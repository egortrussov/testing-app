{"version":3,"sources":["components/Spinner/Spinner.js","context/AuthContext.js","middleware/authMiddleware.js","landingPage/LandingPage.js","components/Navbar/navbarScript.js","components/Navbar/Navbar.js","components/reusableComponents/StatusIcon.js","components/Profile/ResultsTable/Table.js","components/Profile/ResultsTable.js","components/Profile/Profile.js","components/Tests/Tests.js","components/reusableComponents/inputField/Input.js","components/reusableComponents/backLink/BackLink.js","components/Tests/ResultsChart.js","components/Tests/TestInfo.js","components/CreateTest/CreateTest.js","components/TestResult/QuestionResultCard.js","components/TestResult/TestResult.js","components/reusableComponents/ConfirmModal/ConfirmModal.js","components/CreateTest/CreateQuestionCard.js","components/CreateTest/CreateTestForm.js","components/PassTest/QuestionNavbar.js","components/PassTest/QuestionCard.js","components/PassTest/PassTest.js","middleware/validator.js","components/Auth/Login.js","middleware/passwordStrenth.js","components/Auth/Register.js","components/MainPage.js","App.js","serviceWorker.js","index.js","context/TestsContext.js","middleware/convertTime.js","landingPage/img/logo1.svg","landingPage/img/logo-light1.svg","landingPage/img/hero.svg","components/Navbar/img/logo.svg","components/reusableComponents/tests/TestsContainer.js","components/reusableComponents/PointsCard.js"],"names":["Spinner","size","console","log","extraClassName","className","React","createContext","getHeaders","ls","get","LandingPage","src","Logo","alt","LogoLight","to","Hero","Component","toggleView","shouldChangeLS","nav","document","querySelector","linkTexts","querySelectorAll","btn","classList","toggle","forEach","text","state","set","Navbar","isLoggedIn","isHidden","addEventListener","init","this","context","logout","window","location","href","isHiiden","token","rnd","Math","floor","random","id","icon","faChevronLeft","faCat","exact","faHome","faAlignLeft","faPenAlt","faSignInAlt","faUserPlus","onClick","bind","faSignOutAlt","contextType","AuthContext","StatusIcon","percent","props","faCrown","Table","isRedirectToTest","testToRedirect","isRedirectToResult","test","setState","tests","user","_id","map","redirectToResult","testId","title","dateFormat","date","attempt","points","maxPoints","avgPoints","ResultsTable","results","isLoading","left","right","isRedirectToLogin","isMoreTests","authContext","i","currTest","fetch","proxy","headers","then","res","json","isTokenError","testResults","result","length","subject","min","slice","testsMap","Map","passedTests","currAttempts","totalAttempts","filter","passedTest","push","loadTests","testsToShow","TestsContext","lazy","Profile","avgResult","nextLinkVal","reverse","name","TestsContainer","Tests","linkToFetch","fallback","urlToFetch","type","containerType","Input","onChange","isMini","value","handleChange","e","autoComplete","htmlFor","BackLink","link","history","useHistory","faArrowLeft","goBack","ResultsChart","userId","labels","labelsMap","userPoints","max","el","sort","barColor","borderColor","matchMedia","matches","pointsData","barColors","label","data","canvas","getContext","createLinearGradient","datasets","fill","backgroundColor","maxBarThickness","borderWidth","options","scales","yAxes","ticks","beginAtZero","callback","legend","display","TestInfo","usernames","errors","hasLiked","match","params","likes","find","like","res1","res2","currentAccessKey","target","maxAttempts","usedAttemtps","accessKey","isProtected","field","which","preventDefault","method","body","JSON","stringify","isIncrease","timeLimit","attemtpsLeft","description","setAccessKey","convertTime","goToTest","setLike","faThumbsUp","faThumbsUpS","CreateTest","createdTests","QuestionResultCard","question","ans","inx","answers","questionType","correctAnswerId","parseInt","answer","answerId","foundAnswer","TestResult","resultId","questions","toString","isCorrect","faCheckCircle","faTimesCircle","ConfirmModal","message","setModalChoice","positiveChoice","negativeChoice","CreateQuestionCard","index","questionTypesToDisplay","changeQuestionType","letters","addAnswer","deleteAnswer","setAnswerText","setCorrectAnswerId","setQuestionTitle","choiceInx","key","option","placeholder","ansId","CreateTestForm","questionTypes","creator","timeErrorMsg","isLimitedAttempts","isLimitedTime","answerToLoadTest","undefined","hasSavedTest","x","selElmnt","a","b","c","getElementsByClassName","timeValues","setst","j","getElementsByTagName","createElement","setAttribute","innerHTML","selectedIndex","appendChild","y","k","s","h","parentNode","previousSibling","removeAttribute","click","stopPropagation","closeAllSelect","nextSibling","elmnt","arrNo","remove","indexOf","add","quesId","len","quesIndex","currQuestion","ansId1","splice","newTest","ques","isErrors","success","isTimeErr","choice","getElementById","currAnswerIds","currAnswers","currAns","questionInx","setTestTitle","setTestSubject","setTestDescription","cols","rows","checked","setProtectedState","faCheck","setAttemptsState","changeAttemptsNumber","setTimeLimitState","style","width","visibility","handleAddAnswer","answerInx","handleAddQuestion","handleAddTest","QuestionNavbar","questionsNum","moveToQuestion","currentQuestion","questionsButtons","QuestionCard","testTitle","time","handleSelect","changeQuestion","finishTest","convertTimeShort","class","currAnswer","disabled","faArrowRight","PassTest","answeredQuestions","isSubmitted","isTimeUp","showModal","setInterval","currentAnswer","foundIndex","query","Date","now","toggleModal","validate","trim","Login","email","password","isLongerExpiration","formEl","createRef","setToken","doesUserExist","onSubmit","handleSubmit","setCredential","setExpirationState","setLoading","Register","confirmPassword","isTeacher","newUser","notSuccess","strenth","hasNums","hasLetters","hasSymbols","toLowerCase","getPasswordStrenth","registerUser","setTeacherState","MainPage","mainEl","lastScrollTime","getTime","contains","path","component","App","startsWith","process","basename","Fragment","Provider","allTests","hasMoreTests","Boolean","hostname","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","seconds","toISOString","substr","hrs","mins","secs","module","exports","TestCard","TestsComtainer","shouldFetchTests","isLimited","items","pageStart","loadMore","hasMore","loader","useWindow","PointsCard"],"mappings":"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","file":"static/js/main.1dd8dc91.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport './Spinner.css'\r\n\r\nconst Spinner = ({ size }) => {\r\n    console.log(size);\r\n    const extraClassName = size === \"sm\" ? \"small\" : \"\";\r\n\r\n    return (\r\n        <div className={ \"loader-wrapper \" + extraClassName }>\r\n            <div className={ \"loader \" + extraClassName }></div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Spinner","import React from 'react';\r\n\r\nexport default React.createContext({\r\n    \r\n})\r\n","import ls from 'local-storage'\r\n\r\nconst getHeaders = () => {\r\n    return {\r\n        'x-auth-token': ls.get('token')\r\n    }\r\n}\r\n\r\nexport {\r\n    getHeaders\r\n}","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport Logo from './img/logo1.svg'\r\nimport LogoLight from './img/logo-light1.svg'\r\nimport Hero from './img/hero.svg'\r\n\r\nimport './css/style.css'\r\n\r\nexport default class LandingPage extends Component {\r\n    render() {\r\n        return (\r\n            <header>\r\n                {/* <div className=\"bg-circle-lg bg-circle\"></div> */}\r\n                <div className=\"bg-circle-md bg-circle\"></div>\r\n                <div className=\"bg-circle-dm bg-circle\"></div>\r\n                <div className=\"nav\">\r\n                    <div className=\"nav-left\">\r\n                        <img className=\"light\" src={ Logo } alt=\"\" />\r\n                        <img className=\"dark\" src={ LogoLight } alt=\"\" />\r\n                        <h1>EasyTest</h1>\r\n                    </div>\r\n                </div>\r\n                <div className=\"hero\">\r\n                    <div className=\"hero-left\">\r\n                        <h1>Get your experience in online testing to a whole new level!</h1>\r\n                        <Link className=\"cta\" to=\"/app/\">Try it out!</Link>\r\n                    </div>\r\n                    <div className=\"hero-right\">\r\n                        <img src={ Hero } alt=\"\" />\r\n                    </div>\r\n                </div>\r\n                <div className=\"copyright\">\r\n                    &copy; 2020 Yegor Trussov\r\n                </div>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n","import ls from 'local-storage';\r\n\r\nconst toggleView = (shouldChangeLS) => {\r\n    let nav = document.querySelector('nav');\r\n    let linkTexts = document.querySelectorAll('.text');\r\n    let btn = document.querySelector('#toggle-view');\r\n    nav.classList.toggle('hidden');\r\n    linkTexts.forEach(text => text.classList.toggle('hidden'));\r\n    btn.classList.toggle('hidden');\r\n    console.log('object')\r\n\r\n    if (shouldChangeLS) {\r\n        let state = ls.get('isNavbarHidden');\r\n        ls.set('isNavbarHidden', !state);\r\n    }\r\n}\r\n\r\nconst init = () => {\r\n    let btn = document.querySelector('#toggle-view');\r\n    const state = ls.get('isNavbarHidden');\r\n    console.log(state)\r\n    if (state) {\r\n        toggleView(false);\r\n    }\r\n    btn.addEventListener('click', () => toggleView(true));\r\n}\r\n\r\nexport {\r\n    toggleView,\r\n    init\r\n};","import React, { Component } from 'react'\r\nimport { NavLink, Link } from 'react-router-dom'\r\nimport ls from 'local-storage'\r\n\r\nimport { init } from './navbarScript'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faHome, faAlignLeft, faPenAlt, faSignInAlt, faSignOutAlt, faUserPlus, faChevronLeft, faCat } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport Logo from './img/logo.svg'\r\n\r\nimport AuthContext from '../../context/AuthContext'\r\n\r\nclass Navbar extends Component {\r\n    state = {\r\n        isLoggedIn: false,\r\n        isHidden: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        init();\r\n    }\r\n    \r\n\r\n    static contextType = AuthContext;\r\n\r\n    logout() {\r\n        this.context.logout();\r\n        window.location.href = process.env.PUBLIC_URL + '/app/login'\r\n    }\r\n\r\n    render() {\r\n        const { isHiiden } = this.state;\r\n\r\n        const token = ls.get('token');\r\n        console.log(token);\r\n        \r\n        let isLoggedIn = token !== '';\r\n\r\n        let rnd = Math.floor(Math.random() * 100) % 3;\r\n\r\n        return (\r\n            <nav>\r\n                <div className=\"toggle-view\" id=\"toggle-view\">\r\n                    <FontAwesomeIcon className=\"icon\" icon={ faChevronLeft } />\r\n                </div>\r\n                <div className=\"nav-item nav-top\">\r\n                    <a href=\"/\">\r\n                        {\r\n                            rnd === 0 ? (\r\n                                <>\r\n                                    <h2 className=\"logo\"><FontAwesomeIcon className=\"cat-icon\" icon={ faCat } /><span className=\"text\">EasyTest</span></h2>\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <h2 className=\"logo\"><img src={ Logo } alt=\"\"/> <span className=\"text\">EasyTest</span></h2>\r\n                                </>\r\n                            )\r\n                        }\r\n                    </a>\r\n                </div>\r\n                { \r\n                    isLoggedIn && (\r\n                        <div className=\"nav-item nav-middle\">\r\n                            <NavLink exact className=\"nav-link\" to={\"/app/\"}><FontAwesomeIcon className=\"icon\" icon={ faHome } /> <span className=\"text\">Home</span></NavLink>\r\n                            <NavLink className=\"nav-link\" to={\"/app/allTests\"}><FontAwesomeIcon className=\"icon\" icon={ faAlignLeft } /><span className=\"text\"> Tests</span></NavLink>\r\n                            <NavLink className=\"nav-link\" to={\"/app/createTest\"}><FontAwesomeIcon className=\"icon\" icon={ faPenAlt } /> <span className=\"text\">Create Test</span></NavLink>\r\n                        </div>\r\n                    )\r\n                }\r\n                \r\n                <div className=\"nav-item nav-bottom\">\r\n                    { !isLoggedIn && (\r\n                        <>\r\n                            <NavLink className=\"nav-link\" to={\"/app/login\"}><FontAwesomeIcon className=\"icon\" icon={ faSignInAlt } /> <span className=\"text\">Login</span></NavLink>\r\n                            <NavLink className=\"nav-link\" to={\"/app/register\"}><FontAwesomeIcon className=\"icon\" icon={ faUserPlus } /> <span className=\"text\">Register</span></NavLink>\r\n                        </>\r\n                    ) }\r\n                    { isLoggedIn && (\r\n                        <button className=\"nav-link\" onClick={ this.logout.bind(this) } ><FontAwesomeIcon className=\"icon\" icon={ faSignOutAlt } /> <span className=\"text\">Logout</span></button>\r\n                    ) }                    \r\n                </div>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar","import React, { Component } from 'react'\r\n\r\nimport './css/style.css'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCrown } from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport default class StatusIcon extends Component {\r\n    render() {\r\n        const { percent } = this.props;\r\n\r\n        let extraClassName = '';\r\n\r\n        if (percent >= 85)\r\n            extraClassName = 'excellent';\r\n        else if (percent >= 65)\r\n            extraClassName = 'good';\r\n        else if (percent >= 40)\r\n            extraClassName = 'satisfactory';\r\n        else extraClassName = 'bad';\r\n\r\n        return (\r\n            <span className={ `status-icon ${ extraClassName }` }>\r\n                <FontAwesomeIcon icon={ faCrown } />\r\n            </span>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport dateFormat from 'dateformat';\r\n\r\nimport AuthContext from '../../../context/AuthContext';\r\nimport { Redirect } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default class Table extends Component {\r\n\r\n    state = {\r\n        isRedirectToTest: false,\r\n        testToRedirect: null,\r\n        isRedirectToResult: false\r\n    }\r\n\r\n    static contextType = AuthContext;\r\n\r\n    redirectToResult(test) {\r\n        this.setState({\r\n            ...this.state,\r\n            testToRedirect: test,\r\n            isRedirectToResult: true\r\n        })\r\n    }\r\n\r\n    redirectToTest(test) {\r\n        this.setState({\r\n            ...this.state,\r\n            testToRedirect: test,\r\n            isRedirectToTest: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { isRedirectToResult, isRedirectToTest, testToRedirect } = this.state;\r\n        const { tests } = this.props;\r\n\r\n        if (isRedirectToResult) return (\r\n            <Redirect to={ `/app/testResult/${ this.context.user._id }/${ testToRedirect._id }` } />\r\n        )\r\n\r\n        if (isRedirectToTest) return (\r\n            <Redirect to={ `/app/testInfo/${ testToRedirect._id }` } />\r\n        )\r\n\r\n        return (\r\n            <div className=\"results-table\">\r\n                <div className=\"row head\">\r\n                    <div className=\"cell title\">Test name</div>\r\n                    <div className=\"cell subject\">Date</div>\r\n                    <div className=\"cell attempt\">Attempt No.</div>\r\n                    <div className=\"cell points\">Points</div>\r\n                    <div className=\"cell points average\">Average</div>\r\n                </div>\r\n                {\r\n                    tests.map(test => {\r\n                        return (\r\n                            <div className=\"row\" onClick={ () => this.redirectToResult(test, 'fullDate') }>\r\n                                <Link to={ `/app/testInfo/${ test.testId }` } className=\"cell title\"><span>{ test.title }</span></Link>\r\n                                <div className=\"cell subject\">{ dateFormat(test.date, 'dd.mm.yyyy, hh:mm') }</div>\r\n                                <div className=\"cell attempt\">{ test.attempt }</div>\r\n                                <div className=\"cell points\">{ test.points }/{ test.maxPoints } ({ Math.floor(test.points / test.maxPoints * 100) }%)</div>\r\n                                <div className=\"cell points average\">{ test.avgPoints }/{ test.maxPoints } ({ Math.floor(test.avgPoints / test.maxPoints * 100) }%)</div>\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nimport AuthContext from '../../context/AuthContext'\r\nimport { getHeaders } from '../../middleware/authMiddleware';\r\nimport Spinner from '../Spinner/Spinner';\r\nimport Table from './ResultsTable/Table';\r\nimport TestsContext from '../../context/TestsContext';\r\n\r\nexport default class ResultsTable extends Component {\r\n\r\n    state = {\r\n        results: [],\r\n        tests: [],\r\n        isLoading: true,\r\n        left: 0,\r\n        right: 5,\r\n        isRedirectToLogin: false,\r\n        isMoreTests: true\r\n    }\r\n\r\n    static contextType = TestsContext;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    loadTests() {\r\n        let { left, right, tests, isMoreTests } = this.state;\r\n        let { authContext } = this.props;\r\n\r\n        console.log(left, right)\r\n\r\n        for (let i = left; i < Math.min(tests.length, right); i++) {\r\n            let currTest = tests[i];\r\n            console.log(i)\r\n\r\n            fetch(`${ authContext.proxy }/api/tests/testInfo/${ currTest.testId }`, {\r\n                headers: {\r\n                    ...getHeaders()\r\n                }\r\n            })\r\n                .then(res => res.json())\r\n                .then(res => {\r\n                    if (res.isTokenError) {\r\n                        authContext.logout();\r\n                        this.setState({\r\n                            ...this.state,\r\n                            isRedirectToLogin: true\r\n                        })\r\n                        return true;\r\n                    }\r\n                    let testResults = res.results;\r\n                    console.log(testResults)\r\n                    let avgPoints = 0;\r\n                    testResults.forEach(result => {\r\n                        avgPoints += +result.points;\r\n                    })\r\n                    avgPoints = Math.floor(avgPoints / testResults.length);\r\n                    console.log(avgPoints)\r\n                    currTest = {\r\n                        ...currTest,\r\n                        avgPoints,\r\n                        subject: res.subject\r\n                    };\r\n                    \r\n                    tests[i] = currTest;\r\n                    this.setState({\r\n                        ...this.state,\r\n                        tests\r\n                    })\r\n                    console.log(currTest)\r\n                })\r\n                .then(() => {\r\n                    if (i + 1 === Math.min(tests.length, right)) {\r\n                        this.context.results = tests.slice(0, right);\r\n                        left = right;\r\n                        right += 5;\r\n                        if (left >= tests.length) \r\n                            isMoreTests = false;\r\n                        this.setState({\r\n                            ...this.state,\r\n                            tests,\r\n                            left,\r\n                            right,\r\n                            isMoreTests\r\n                        }, () => console.log('okokokok'))\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        let { user } = this.props;\r\n        let tests = [];\r\n        let testsMap = new Map();\r\n\r\n        let { results } = this.context;\r\n\r\n        user.passedTests.forEach(test => {\r\n            let currAttempts = testsMap.get(test.testId);\r\n            if (!currAttempts) \r\n                currAttempts = 0;\r\n            currAttempts++;\r\n            testsMap.set(test.testId, currAttempts);\r\n            let totalAttempts = user.passedTests.filter(passedTest => passedTest.testId === test.testId).length;\r\n            test = {\r\n                ...test,\r\n                attempt: totalAttempts + 1 - currAttempts,\r\n            }\r\n            tests.push(test);\r\n        })\r\n\r\n        if (results) {\r\n            for (let i = 0; i < results.length; i++) {\r\n                let result = results[i];\r\n                tests[i] = result;\r\n            }\r\n\r\n            this.setState({\r\n                ...this.state,\r\n                tests,\r\n                left: results.length,\r\n                right: results.length + 5,\r\n                isLoading: false\r\n            })\r\n\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            tests,\r\n            isLoading: false\r\n        }, () => {\r\n            this.loadTests()\r\n        })\r\n        \r\n        \r\n    }\r\n    \r\n\r\n    render() {\r\n        const { tests, left, right, isMoreTests, isLoading } = this.state;\r\n\r\n        if (isLoading) return <Spinner size=\"md\" />\r\n\r\n        let testsToShow = tests.slice(0, left);\r\n\r\n        console.log(tests)\r\n\r\n        return (\r\n            <div>\r\n                {\r\n                    testsToShow.length ? (\r\n                        <Table tests={ testsToShow } />\r\n\r\n                    ) : ''\r\n                }\r\n                {\r\n                    (testsToShow.length && isMoreTests) ? (\r\n                        <button className=\"load-more\" onClick={ () => this.loadTests() }>Load more</button>\r\n                    ) : ''\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component, Suspense } from 'react'\r\nimport Spinner from '../Spinner/Spinner'\r\nimport { getHeaders } from '../../middleware/authMiddleware'\r\n\r\nimport AuthContext from '../../context/AuthContext'\r\n\r\nimport StatusIcon from '../reusableComponents/StatusIcon'\r\nimport ResultsTable from './ResultsTable'\r\n\r\nimport './css/style.css'\r\n\r\nconst TestsContainer = React.lazy(() => import('../reusableComponents/tests/TestsContainer'))\r\n\r\nexport default class Profile extends Component {\r\n    state = {\r\n        user: null,\r\n        passedTests: [],\r\n        avgResult: null,\r\n        isLoading: true,\r\n        nextLinkVal: null\r\n    }\r\n\r\n    static contextType = AuthContext;\r\n\r\n    componentDidMount() {\r\n        let { user } = this.context;\r\n        \r\n        if (user) {\r\n            user.passedTests.reverse();\r\n\r\n            let avgResult = 0;\r\n            if (user.passedTests.length) {\r\n                user.passedTests.forEach(test => {\r\n                    avgResult += test.points / test.maxPoints;\r\n                })\r\n                avgResult /= user.passedTests.length;\r\n                avgResult = Math.floor(avgResult * 100);\r\n            }\r\n\r\n            this.setState({\r\n                user,\r\n                avgResult,\r\n                isLoading: false,\r\n            })\r\n            \r\n            return;\r\n        }\r\n\r\n        fetch(`${ this.context.proxy }/api/users/user`, {\r\n            headers: getHeaders()\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                if (res.isTokenError) {\r\n                    this.context.logout();\r\n                    window.location.href = '/app/login';\r\n                }\r\n                console.log(res.passedTests);\r\n                \r\n                res.passedTests.reverse();\r\n\r\n                let avgResult = 0;\r\n                if (res.passedTests.length) {\r\n                    res.passedTests.forEach(test => {\r\n                        avgResult += test.points / test.maxPoints;\r\n                    })\r\n                    avgResult /= res.passedTests.length;\r\n                    avgResult = Math.floor(avgResult * 100);\r\n                }\r\n\r\n                this.setState({\r\n                    user: res,\r\n                    avgResult,\r\n                    isLoading: false,\r\n                })\r\n            })\r\n    }\r\n\r\n    render() {\r\n        const { user, isLoading, avgResult } = this.state;\r\n\r\n        console.log(user)\r\n\r\n        if (isLoading || !user) return (\r\n            <Spinner />\r\n        )\r\n\r\n        const urlToFetch = `${ this.context.proxy }/api/tests/passedTests/${ user._id }`;\r\n\r\n        return (\r\n            <>\r\n                <h1 className=\"heading\">\r\n                    Hello, { user.name }!\r\n                </h1>\r\n                <div className=\"profile-block\">\r\n                    <div className=\"profile-img\">\r\n                        <img src=\"/img/profile-img.svg\" alt=\"\"/>\r\n                    </div>\r\n                    <div className=\"profile-info\">\r\n                        <div className=\"profile-info__block\">\r\n                            <span className=\"info-text\">Name: <StatusIcon percent={ avgResult } /> { user.name }</span>\r\n                        </div>\r\n                        <div className=\"profile-info__block\">\r\n                            <span className=\"info-text\">Tests passed: { user.passedTests.length }</span>\r\n                        </div>\r\n                        <div className=\"profile-info__block\">\r\n                            <span className=\"info-text\">Average result: { avgResult }%</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                { user.passedTests.length > 0 ? ( <h2>Your recent tests: </h2> ) : ( <h2>You haven't passed any tests yet!</h2> ) }\r\n                <ResultsTable authContext={ this.context } user={ user } />\r\n                {/* { <Suspense fallback={ <Spinner /> }>\r\n                    <TestsContainer type=\"result\" urlToFetch={ urlToFetch } user={ user } />\r\n                </Suspense> } */}\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React, { Component, Suspense } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nimport AuthContext from '../../context/AuthContext'\r\nimport Spinner from '../Spinner/Spinner'\r\n\r\nimport './css/style.css'\r\n\r\nconst TestsContainer = React.lazy(() => import('../reusableComponents/tests/TestsContainer'))\r\n\r\nexport default class Tests extends Component {\r\n    state = {\r\n        isLoading: false,\r\n        tests: [],\r\n        isRedirectToLogin: false,\r\n        left: 0,\r\n        right: 3,\r\n        isMoreTests: true\r\n    }\r\n\r\n    static contextType = AuthContext;       \r\n\r\n    render() {\r\n        const { isLoading, isRedirectToLogin } = this.state;\r\n\r\n        const linkToFetch = `${ this.context.proxy }/api/tests/allTests`;\r\n\r\n        if (isRedirectToLogin) return (\r\n            <Redirect to=\"/app/login\" />\r\n        )\r\n\r\n        if (isLoading) return (\r\n            <Spinner />\r\n        )\r\n\r\n        return (\r\n            <>\r\n                <h1 className=\"heading\">Recent tests: </h1>\r\n                <Suspense fallback={ <Spinner /> }>\r\n                    <TestsContainer \r\n                        urlToFetch={ linkToFetch }\r\n                        authContext={ this.context }\r\n                        type={ \"full\" }\r\n                        containerType=\"tests\"\r\n                    />\r\n                </Suspense>\r\n                \r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nimport './css/style.css'\r\n\r\nconst Input = ({ name, onChange, type, isMini, value }) => {\r\n    const handleChange = (e) => {\r\n        console.log(e);\r\n        onChange(e);\r\n    }\r\n\r\n    const extraClassName = isMini ? 'mini' : '';\r\n\r\n    return (\r\n        <div className={ \"input-group \" + extraClassName}>\r\n            <input value={ value } autoComplete={ isMini ? \"off\" : \"on\" } className={ extraClassName } type={ type } name={ name } onChange={ (e) => handleChange(e) } />\r\n            <label htmlFor={ name }></label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input\r\n","import React from 'react'\r\nimport { useHistory, Link } from 'react-router-dom'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport './css/style.css'\r\n\r\nconst BackLink = ({ link }) => {\r\n    let history = useHistory();\r\n\r\n    if (link) return (\r\n        <div className=\"page-top\">\r\n            <Link to={ link } className=\"a\">\r\n                <FontAwesomeIcon icon={ faArrowLeft } /> Back \r\n            </Link>\r\n        </div>\r\n    )\r\n\r\n    return (\r\n        <div className=\"page-top\">\r\n            <span onClick={ () => history.goBack() } className=\"a\">\r\n                <FontAwesomeIcon icon={ faArrowLeft } /> Back \r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BackLink;","import React, { Component } from 'react'\r\n\r\n// ChartJS\r\nimport { Bar } from 'react-chartjs-2'\r\n\r\nexport default class ResultsChart extends Component {\r\n\r\n\r\n\r\n    render() {\r\n        const { results, userId } = this.props;\r\n\r\n        let labels = [];\r\n        let labelsMap = new Map();\r\n        let userPoints = -1;\r\n\r\n        results.forEach(result => {\r\n            if (result.userId === userId) \r\n                userPoints = Math.max(userPoints, result.points);\r\n            if (!labelsMap.get(result.points)) {\r\n                labelsMap.set(result.points, 1);\r\n                labels.push(result.points);\r\n            } else {\r\n                let el = labelsMap.get(result.points);\r\n                labelsMap.set(result.points, el + 1);\r\n            }\r\n        })\r\n\r\n        labels.sort();\r\n\r\n        let barColor = 'rgba(0, 0, 0, .05)';\r\n        let borderColor = 'rgba(0, 0, 0, .3)';\r\n        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\r\n            barColor = 'rgba(255, 255, 255, .05)';\r\n            borderColor = 'rgba(255, 255, 255, 1)';\r\n        } \r\n\r\n        let pointsData = [];\r\n        let barColors = [];\r\n        console.log(userPoints)\r\n        labels.forEach(label => {\r\n            let points = labelsMap.get(label);\r\n            pointsData.push(points);\r\n            console.log(label)\r\n            if (+label === userPoints) {\r\n                barColors.push('rgba(42, 150, 71, .2)'); \r\n                console.log('object')\r\n            }\r\n            else \r\n            barColors.push(barColor);\r\n        })\r\n\r\n        const options = {\r\n            scales: {\r\n                yAxes: [{\r\n                    ticks: {\r\n                        beginAtZero: true,\r\n                        callback: function(value) {if (value % 1 === 0) {return value;}}\r\n                    }\r\n                }]\r\n            },\r\n            legend: {\r\n                display: false\r\n            }\r\n        };\r\n\r\n        const data = (canvas) => {\r\n            const ctx = canvas.getContext(\"2d\")\r\n            const gradient = ctx.createLinearGradient(0,0,100,0);\r\n            return {\r\n                labels,\r\n                datasets: [\r\n                    {\r\n                        data: pointsData,\r\n                        fill: false,\r\n                        backgroundColor: barColors,\r\n                        borderColor: borderColor,\r\n                        maxBarThickness: 60,\r\n                        borderWidth: 1,\r\n                    },\r\n                ],\r\n            }\r\n        }        \r\n\r\n        return (\r\n            <div className=\"chart-container\">\r\n                <Bar data={ data } options={ options } />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport Spinner from '../Spinner/Spinner'\r\n\r\nimport PointsCard from '../reusableComponents/PointsCard'\r\nimport Input from '../reusableComponents/inputField/Input'\r\n\r\nimport { convertTime } from '../../middleware/convertTime'\r\n\r\nimport './css/style.css'\r\n\r\nimport AuthContext from '../../context/AuthContext'\r\nimport { getHeaders } from '../../middleware/authMiddleware';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faThumbsUp } from '@fortawesome/free-regular-svg-icons'\r\nimport { faThumbsUp as faThumbsUpS } from '@fortawesome/free-solid-svg-icons'\r\nimport BackLink from '../reusableComponents/backLink/BackLink';\r\nimport ResultsChart from './ResultsChart';\r\n\r\nexport default class TestInfo extends Component {\r\n    state = {\r\n        isLoading: true,\r\n        test: null,\r\n        testResults: null,\r\n        usernames: null,\r\n        errors: [],\r\n        isRedirectToLogin: false,\r\n        hasLiked: false\r\n    };\r\n\r\n    static contextType = AuthContext;\r\n\r\n    componentDidMount() {\r\n        const testId = this.props.match.params.testId;\r\n        \r\n        fetch(`${ this.context.proxy }/api/tests/testInfo/${ testId }`, {\r\n            headers: {\r\n                ...getHeaders()\r\n            }\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                if (res.isTokenError) {\r\n                    this.context.logout();\r\n                    this.setState({\r\n                        ...this.state,\r\n                        isRedirectToLogin: true\r\n                    })\r\n                } else {\r\n                    let hasLiked = false;\r\n                    if (res.likes.find((like) => like === this.context.userId))\r\n                        hasLiked = true;\r\n                    this.setState({\r\n                        ...this.state,\r\n                        isLoading: false,\r\n                        test: res,\r\n                        hasLiked\r\n                    })\r\n                }\r\n            })\r\n        fetch(`${ this.context.proxy }/api/tests/testResults/${ testId }`)\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                res.testResults.sort((res1, res2) => {\r\n                    return res2.points - res1.points;\r\n                })\r\n                this.setState({\r\n                    isLoading: false,\r\n                    testResults: res.testResults,\r\n                    usernames: res.usernames\r\n                })\r\n            })\r\n    }\r\n\r\n    setAccessKey(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            currentAccessKey: e.target.value\r\n        })\r\n    }\r\n\r\n    goToTest() {\r\n        const { test, errors, testResults } = this.state;\r\n        const { maxAttempts } = test;\r\n        let usedAttemtps = 0;\r\n        testResults.forEach(res => {\r\n            if (res.userId === this.context.userId) \r\n                usedAttemtps++;\r\n        })\r\n        console.log(usedAttemtps, maxAttempts);\r\n        \r\n        if (maxAttempts && usedAttemtps >= maxAttempts) {\r\n            errors['attempts'] = 'You have not got any attempts left!';\r\n            this.setState({\r\n                ...this.state,\r\n                errors\r\n            })\r\n        } else {\r\n            const { currentAccessKey } = this.state;\r\n            const { accessKey, _id, isProtected } = test;\r\n            if (accessKey === currentAccessKey || !isProtected) {\r\n                window.location.href = `/app/passTest/${ _id }`\r\n            } else {\r\n                let { errors } = this.state;\r\n                errors['keyError'] = 'Incorrect access key!';\r\n                this.setState({\r\n                    ...this.state,\r\n                    errors\r\n                })\r\n            }\r\n        }\r\n        \r\n        \r\n    }   \r\n    \r\n    componentDidUpdate() {\r\n        let field = document.querySelector('span.field');\r\n        console.log(field);\r\n        \r\n        if (field && field !== null) field.addEventListener('keypress',function(e){ \r\n            if (e.which === 13) {\r\n                e.preventDefault();\r\n            }\r\n        });\r\n    }\r\n\r\n    setLike() {\r\n        const { test, hasLiked } = this.state;\r\n\r\n        fetch(`${ this.context.proxy }/api/tests/likeTest/${ test._id }`, {\r\n            method: 'POST',\r\n            headers: {\r\n                ...getHeaders,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                isIncrease: !hasLiked,\r\n                userId: this.context.userId\r\n            })\r\n        }) \r\n            .then(res => res.json())\r\n            .then(res => {\r\n                let { test } = this.state;\r\n                test.likes = res.likes;\r\n                console.log(test.likes.length)\r\n                this.setState({\r\n                    ...this.state,\r\n                    test,\r\n                    hasLiked: !hasLiked\r\n                }, () => console.log(this.state.hasLiked))\r\n            })\r\n    }\r\n\r\n    render() {\r\n        const { isLoading, test, testResults, errors, isRedirectToLogin, hasLiked } = this.state;\r\n\r\n        if (isRedirectToLogin) return (\r\n            <Redirect to='/app/login' />\r\n        )\r\n        \r\n        if (isLoading || test === null) return (\r\n            <Spinner />\r\n        )\r\n\r\n        const { maxAttempts, timeLimit } = test;\r\n        let usedAttemtps = 0;\r\n        if (testResults) testResults.forEach(res => {\r\n            if (res.userId === this.context.userId) \r\n                usedAttemtps++;\r\n        })\r\n        const attemtpsLeft = maxAttempts - usedAttemtps;\r\n\r\n        return (\r\n            <div>\r\n                <BackLink />\r\n                <h1>{ test.title }</h1>\r\n                <p>{ test.description }</p>\r\n                { test.isProtected && (\r\n                    //return (\r\n                        <>\r\n                            <br/>\r\n                            <label htmlFor=\"title\">To start the test, you need to type in the secret key!</label> <br/>\r\n                            <Input type=\"text\" name=\"secretKey\" isMini={ true } onChange={ (e) => this.setAccessKey(e) } />\r\n                            {/* <span id=\"field\" className=\"field\" contenteditable=\"true\" onInput={ (e) => this.setAccessKey(e) } type=\"text\" name=\"title\"></span> */}\r\n                            <span className=\"error-input\">{ errors['keyError'] }</span>\r\n                        </>\r\n                    //)\r\n                    \r\n                 ) }\r\n                 { maxAttempts && (\r\n                    <div className=\"attempts-block\">\r\n                        <span className=\"max-attemtts\">Attempts left: { attemtpsLeft }</span>\r\n                    </div>\r\n                 ) }\r\n                 { timeLimit && (\r\n                    <div className=\"attempts-block\">\r\n                        <span className=\"max-attemtts\">Time limit: { convertTime(timeLimit) }</span>\r\n                    </div>\r\n                 ) }\r\n                <br/>\r\n                {/* <Link class=\"btn btn-cta\" to={ `/app/passTest/${ test._id }` }>\r\n                    Pass test!\r\n                </Link> */}\r\n                <span className=\"error-input\">{ errors['attempts'] }</span>\r\n                <div className=\"btn-block\">\r\n                    <button onClick={ () => this.goToTest() } className=\"btn btn-cta\">Pass test!</button>\r\n                    <button className=\"btn like-btn\" onClick={ this.setLike.bind(this) } icon={ faThumbsUp }> \r\n                        <FontAwesomeIcon className=\"icon\" icon={ hasLiked ? faThumbsUpS : faThumbsUp } />\r\n                        <span>{ test.likes.length }</span>\r\n                    </button>\r\n                </div>\r\n                \r\n                <div className=\"results\">\r\n                    <h3>Results: </h3>\r\n                    {\r\n                        test.results.length ? (\r\n                            <ResultsChart results={ test.results } userId={ this.context.user._id } />\r\n                        ) : (\r\n                            <h2>No one has passed the test yet!</h2>\r\n                        )\r\n                    }\r\n                    \r\n                    {/* <table>\r\n                        <col className=\"username\" />\r\n                        <col className=\"points\" />\r\n                        <tr>\r\n                            <th className=\"user\">User</th>\r\n                            <th className=\"points\">Time</th>\r\n                            <th className=\"points\">Points</th>\r\n                        </tr>\r\n                        { testResults === null ? () => {\r\n                            return (\r\n                                <Spinner />\r\n                            )\r\n                        } : testResults.map(res => {                            \r\n                            return (\r\n                                <tr className='resultTr' key={ res.userId + res.points }>\r\n                                    <td className=\"user\">{ res.username }</td>\r\n                                    <td className=\"points time\">\r\n                                        { res.time ? ( \r\n                                            <span>{ convertTime(res.time) }</span>\r\n                                        ) : (\r\n                                            <span>---</span>\r\n                                        ) }\r\n                                    </td>\r\n                                    <td className=\"points\">\r\n                                        <PointsCard points={ res.points } maxPoints={ res.answers.length } />\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        }) }\r\n                    </table> */}\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component, Suspense } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport AuthContext from '../../context/AuthContext'\r\nimport Spinner from '../Spinner/Spinner';\r\nimport TestsContainer from '../reusableComponents/tests/TestsContainer'\r\n\r\nexport default class CreateTest extends Component {\r\n    state = {\r\n        createdTests: [],\r\n        isLoading: false\r\n    }\r\n\r\n    static contextType = AuthContext;\r\n\r\n    componentDidMount() {\r\n        if (!this.context.userId) \r\n            window.location.href = '/app/login';\r\n        fetch(`${ this.context.proxy }/api/tests/createdTests/${ this.context.userId }`, {\r\n            method: 'POST'\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                \r\n                this.setState({\r\n                    createdTests: res.tests,\r\n                    isLoading: false\r\n                })\r\n            })\r\n    }\r\n    \r\n    render() {\r\n        const { createdTests, isLoading } = this.state;\r\n\r\n        if (isLoading) return (\r\n            <Spinner />\r\n        )\r\n\r\n        let urlToFetch = `${ this.context.proxy }/api/tests/createdTests/${ this.context.userId }`;\r\n\r\n        return (\r\n            <>\r\n                <h1 className=\"heading\">\r\n                    Currently, you have { createdTests.length } created tests\r\n                </h1>\r\n                <Link to=\"/app/createTestForm\" className=\"btn btn-cta\">\r\n                    New test\r\n                </Link>\r\n                { <Suspense fallback={ <Spinner /> }>\r\n                    <TestsContainer type=\"created\" urlToFetch={ urlToFetch } user={ null } />\r\n                </Suspense> }\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class QuestionResultCard extends Component {\r\n    render() {\r\n        const { question, ans, extraClassName, inx, answers } = this.props;\r\n\r\n        console.log(answers, question)\r\n\r\n        if (question.questionType === 'singleChoice')\r\n            return (\r\n                <div className=\"question-ans\">\r\n                    <h3>{ inx + 1 }. { question.title }</h3>\r\n                    { ans ===  0 ? (\r\n                        <span className={ \"ans-text \" + extraClassName}>\r\n                            Your answer: -\r\n                        </span>\r\n                    ) : (\r\n                        <span className={ \"ans-text \" + extraClassName}>\r\n                            Your answer: { ans }) { question.answers[ans - 1].text }\r\n                        </span>\r\n                    ) } \r\n                    <span className=\"ans-text\">\r\n                        Correct answer: { question.correctAnswerId }) { question.answers[parseInt(question.correctAnswerId) - 1].text }\r\n                    </span>                           \r\n                </div>\r\n            )\r\n        if (question.questionType === 'multipleChoice') \r\n            return (\r\n                <div className=\"question-ans\">\r\n                    <h3>{ inx + 1 }. { question.title }</h3>\r\n                    { ans ===  0 ? (\r\n                        <span className={ \"ans-text \" + extraClassName}>\r\n                            Your answers: -\r\n                        </span>\r\n                    ) : (\r\n                        <span className={ \"ans-text \" + extraClassName}>\r\n                            Your answers: \r\n                            <div className=\"answers-container\">\r\n                                {\r\n                                    answers[inx].map(answer => (\r\n                                        <div className=\"answer\">\r\n                                            { question.answers[+answer - 1].answerId }) { question.answers[+answer - 1].text }\r\n                                        </div>\r\n                                    ))\r\n                                }\r\n                            </div>\r\n                        </span>\r\n                    ) } \r\n                    <span className=\"ans-text\">\r\n                        Correct answers: \r\n                        <div className=\"answers-container\">\r\n                            {\r\n                                question.correctAnswerId.map(correctAnswerId => {\r\n                                    let foundAnswer = question.answers[+correctAnswerId - 1];\r\n                                    return (\r\n                                        <div className=\"answer\">\r\n                                            { foundAnswer.answerId }) { foundAnswer.text }\r\n                                        </div>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </div>\r\n                    </span>                           \r\n                </div>\r\n            )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nimport Spinner from '../Spinner/Spinner'\r\n\r\nimport './css/style.css'\r\n\r\nimport AuthContext from '../../context/AuthContext'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCheckCircle, faTimesCircle } from '@fortawesome/free-regular-svg-icons'\r\nimport BackLink from '../reusableComponents/backLink/BackLink'\r\nimport QuestionResultCard from './QuestionResultCard'\r\n\r\nexport default class TestResult extends Component {\r\n    state = {\r\n        isLoading: true,\r\n        test: null,\r\n        answers: null\r\n    }\r\n\r\n    static contextType = AuthContext;\r\n\r\n    componentDidMount() {\r\n        const userId = this.props.match.params.userId;\r\n        const resultId = this.props.match.params.resultId;\r\n        \r\n        fetch(`${ this.context.proxy }/api/tests/testResult/${ userId }/${ resultId }`)\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                \r\n                this.setState({\r\n                    isLoading: false,\r\n                    answers: res.answers,\r\n                    test: res.test\r\n                })\r\n            })\r\n    }\r\n    \r\n\r\n    render() {\r\n        const { isLoading, test, answers } = this.state;\r\n        if (test) console.log(test.questions[0]);\r\n        console.log(answers);\r\n        console.log(this.props)\r\n        \r\n        \r\n\r\n        if (isLoading) return (\r\n            <Spinner />\r\n        )\r\n\r\n        return (\r\n            <div>\r\n                <BackLink link=\"/app\" />\r\n                <h1 className=\"heading\">\r\n                    Test result for \"{ test.title }\"\r\n                </h1>\r\n                <div className=\"result-table\">\r\n                    <table>\r\n                        <col className=\"main\" />\r\n                        { answers.map(ans => {\r\n                            return (\r\n                                <col className=\"answer\" />\r\n                            )\r\n                        }) }\r\n                        <tr className=\"first\">\r\n                            <th className=\"first main\">Question No.</th>\r\n                            { answers.map((ans, inx) => {\r\n                                return (\r\n                                    <th className=\"first ans\">{ inx + 1 }</th>\r\n                                )\r\n                            }) }\r\n                        </tr>\r\n                        <tr>\r\n                            <th className=\"main\">Result: </th>\r\n                            { answers.map((ans, inx) => {\r\n                                let extraClassName = '';\r\n                                console.log(toString(ans));\r\n                                \r\n                                let isCorrect = true;\r\n                                let question = test.questions[inx];\r\n\r\n                                if (ans.length !== question.correctAnswerId.length) \r\n                                    isCorrect = false;\r\n                                else {\r\n                                    for (let i = 0; i < ans.length; i++) \r\n                                        if (ans[i] !== question.correctAnswerId[i]) {\r\n                                            isCorrect = false;\r\n                                            break;\r\n                                        }\r\n                                }\r\n                                \r\n                                if (parseInt(ans) === parseInt(test.questions[inx].correctAnswerId)) \r\n                                    extraClassName = 'correct';\r\n                                else \r\n                                    extraClassName = 'wrong'\r\n                                return (\r\n                                    <th className={ `answerr ans ${ extraClassName }` }>{ isCorrect ? (<FontAwesomeIcon className=\"icon\" icon={ faCheckCircle } /> ) : (<FontAwesomeIcon className=\"icon\" icon={ faTimesCircle } />) }</th>\r\n                                )\r\n                            }) }\r\n                        </tr>\r\n                    </table>\r\n                </div>\r\n                { answers.map((ans, inx) => {\r\n                    let isCorrect = true;\r\n                    let question = test.questions[inx];\r\n\r\n                    if (ans.length !== question.correctAnswerId.length) \r\n                        isCorrect = false;\r\n                    else {\r\n                        for (let i = 0; i < ans.length; i++) \r\n                            if (ans[i] !== question.correctAnswerId[i]) {\r\n                                isCorrect = false;\r\n                                break;\r\n                            }\r\n                    }\r\n\r\n                    console.log(test.questions);\r\n                    \r\n                    let extraClassName = '';\r\n                    if (!isCorrect) extraClassName = 'wrong';\r\n                    console.log(question.answers[parseInt(question.correctAnswerId)]);\r\n                    \r\n                    return (\r\n                        <QuestionResultCard\r\n                            question={ question }\r\n                            extraClassName={ extraClassName }\r\n                            ans={ ans }\r\n                            inx={ inx }\r\n                            answers={ answers }\r\n                        />\r\n                    )\r\n                }) }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class ConfirmModal extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"modal-wrapper\">\r\n                <div className=\"modal-overlay\"></div>\r\n                <div className=\"modal-card\">\r\n                    <div className=\"card-top\">\r\n                        <div className=\"icon\">\r\n                            <img src='/img/questionmark.svg' alt=\"\"/>\r\n                        </div>\r\n                        <div className=\"text\">\r\n                            { this.props.message }\r\n                        </div>\r\n                    </div>\r\n                    {/* <div className=\"card-middle\">\r\n                        { this.props.message }\r\n                    </div> */}\r\n                    <div className=\"card-buttons\">\r\n                        <button onClick={ () => this.props.setModalChoice(true) } className=\"cta\">{ this.props.positiveChoice }</button>\r\n                        <button onClick={ () => this.props.setModalChoice(false) } className=\"\">{ this.props.negativeChoice }</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Dropdown from 'react-dropdown';\r\nimport Input from '../reusableComponents/inputField/Input';\r\n\r\nexport default class CreateQuestionCard extends Component {\r\n\r\n    render() {\r\n        const { index, question, questionTypesToDisplay, changeQuestionType, letters, addAnswer, deleteAnswer, setAnswerText, setCorrectAnswerId, setQuestionTitle } = this.props;\r\n\r\n        let choiceInx = 0;\r\n        if (question.questionType === 'multipleChoice') \r\n            choiceInx = 1;\r\n        console.log(choiceInx)\r\n\r\n        return (\r\n            <div key={ index } className=\"question-container pass\"> \r\n\r\n                <div className=\"question-container__toptitle\">\r\n                    <div className=\"left\">\r\n                        <h3 className=\"question-container__title\">\r\n                            <div className=\"delete-question-btn\">\r\n                                <span>&times;</span>\r\n                            </div>\r\n                            <span>{ index + 1 }.</span>  <Input type=\"text\" isMini={ true } onChange={ (e) => setQuestionTitle(e, index) } name=\"questionTitle\" value={ question.title } />\r\n                        </h3>\r\n                    </div>\r\n                    <div className=\"right\">\r\n                        <Dropdown className=\"dropdown\" options={ questionTypesToDisplay } onChange={ (option) => changeQuestionType(index, option) } value={ questionTypesToDisplay[choiceInx]} placeholder=\"Select question type\" />\r\n                    </div>\r\n                </div>\r\n\r\n                \r\n\r\n                \r\n                <div className=\"question-container__answers\">\r\n                    { question.answers.map((ans, inx) => {\r\n                        let extraClassName = '';\r\n\r\n                        question.correctAnswerId.forEach(ansId => {\r\n                            if (ansId.toString() === (inx + 1).toString()) \r\n                                extraClassName = 'selected';\r\n                        })\r\n                        \r\n                        {/* if (question.correctAnswerId.toString() === (inx + 1).toString()) \r\n                            extraClassName = 'selected'; */}\r\n\r\n                        return (\r\n                            <div key={ `${ inx }-${ index }` } className={ \"answer-block \" + extraClassName }>\r\n                                <div className=\"answer-block__letter\" onClick={ () => setCorrectAnswerId(index, ans.answerId) }><span>{ letters[inx] }</span></div>\r\n                                <div className=\"answer-block__text\">\r\n                                    <input autoComplete=\"off\" id={ `_${ index }-${ inx }` } type=\"text\" onChange={(e) => setAnswerText(e, index, inx) } value={ ans.text } />\r\n                                    <button className=\"btn-delete\" onClick={ () => deleteAnswer(index, inx) }>\r\n                                        <span>&times;</span>\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    }) }\r\n                    <button onClick={ () => addAnswer(index) } className=\"add-question\"><span>+</span></button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport ls from 'local-storage'\r\nimport Dropdown from 'react-dropdown'\r\n\r\nimport Spinner from '../Spinner/Spinner'\r\nimport Input from '../reusableComponents/inputField/Input'\r\n\r\nimport AuthContext from '../../context/AuthContext'\r\n\r\nimport './css/style.css'\r\nimport 'react-dropdown/style.css';\r\n\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCheck } from '@fortawesome/free-solid-svg-icons'\r\nimport ConfirmModal from '../reusableComponents/ConfirmModal/ConfirmModal'\r\nimport CreateQuestionCard from './CreateQuestionCard'\r\n\r\nexport default class CreateTestForm extends Component {\r\n    state = {\r\n        questionTypes: ['singleChoice', 'multipleChoice'],\r\n        questions: [{\r\n            questionType: 'singleChoice',\r\n            title: '',\r\n            answers: [{\r\n                text: '',\r\n                answerId: '1'\r\n            }, {\r\n                text: '',\r\n                answerId: '2'\r\n            }],\r\n            correctAnswerId: ['1']\r\n        }],\r\n        title: '',\r\n        description: '',\r\n        subject: '',\r\n        isProtected: false,\r\n        accessKey: '',\r\n        creator: this.context.userId,\r\n        timeErrorMsg: '',\r\n        isLoading: false,\r\n        errors: [],\r\n        maxAttempts: null,\r\n        isLimitedAttempts: false,\r\n        isLimitedTime: false,\r\n        timeLimit: null,\r\n        answerToLoadTest: undefined,\r\n        hasSavedTest: false\r\n    }\r\n\r\n    static contextType = AuthContext;\r\n\r\n    componentDidMount() {\r\n                \r\n        var x, i, selElmnt, a, b, c;\r\n        /* Look for any elements with the class \"custom-select\": */\r\n        x = document.getElementsByClassName('custom-select');\r\n        console.log(x);\r\n\r\n        let savedTest = ls.get('savedTestToCreate');\r\n\r\n        if (savedTest) {\r\n            this.setState({\r\n                ...this.state,\r\n                hasSavedTest: true\r\n            })\r\n        }\r\n\r\n        let timeValues = [5 * 60, 10 * 60, 20 * 60, 30 * 60, 1 * 60 * 60, 1.5 * 60 * 60];\r\n\r\n        const setst = (j) => {\r\n            console.log(\"hhhh\");\r\n            \r\n            this.setState({\r\n                ...this.state,\r\n                timeLimit: timeValues[j - 1]\r\n            }, () => console.log(this.state))\r\n        }\r\n\r\n        for (i = 0; i < x.length; i++) {\r\n            selElmnt = x[i].getElementsByTagName('select')[0];\r\n            /* For each element, create a new DIV that will act as the selected item: */\r\n            a = document.createElement('DIV');\r\n            a.setAttribute('class', 'select-selected');\r\n            a.innerHTML = selElmnt.options[selElmnt.selectedIndex].innerHTML;\r\n            x[i].appendChild(a);\r\n            /* For each element, create a new DIV that will contain the option list: */\r\n            b = document.createElement('DIV');\r\n            b.setAttribute('class', 'select-items select-hide');\r\n            for (let j = 1; j < selElmnt.length; j++) {\r\n                /* For each option in the original select element,\r\n            create a new DIV that will act as an option item: */\r\n                c = document.createElement('DIV');\r\n                c.innerHTML = selElmnt.options[j].innerHTML;\r\n                console.log(selElmnt);\r\n                \r\n                c.addEventListener('click', function(e) {\r\n                    /* When an item is clicked, update the original select box,\r\n                and the selected item: */\r\n                    \r\n                    var y, i, k, s, h;\r\n                    s = this.parentNode.parentNode.getElementsByTagName('select')[0];\r\n                    h = this.parentNode.previousSibling;\r\n                    console.log(timeValues[j - 1]);\r\n                    // this.setState({\r\n                    //     ...this.state,\r\n                    //     timeLimit: timeValues[j - 1]\r\n                    // })\r\n                    \r\n                    \r\n                    for (i = 0; i < s.length; i++) {\r\n                        if (s.options[i].innerHTML === this.innerHTML) {\r\n                            s.selectedIndex = i;\r\n\r\n                            h.innerHTML = this.innerHTML;\r\n                            y = this.parentNode.getElementsByClassName(\r\n                                'same-as-selected'\r\n                            );\r\n                            for (k = 0; k < y.length; k++) {\r\n                                y[k].removeAttribute('class');\r\n                            }\r\n                            this.setAttribute('class', 'same-as-selected');\r\n                            break;\r\n                        }\r\n                    }\r\n                    h.click();\r\n\r\n                    setst(j);\r\n                });\r\n                b.appendChild(c);\r\n            }\r\n            x[i].appendChild(b);\r\n            a.addEventListener('click', function(e) {\r\n                /* When the select box is clicked, close any other select boxes,\r\n            and open/close the current select box: */\r\n                e.stopPropagation();\r\n                closeAllSelect(this);\r\n                this.nextSibling.classList.toggle('select-hide');\r\n                this.classList.toggle('select-arrow-active');\r\n            });\r\n        }\r\n\r\n        function closeAllSelect(elmnt) {\r\n            /* A function that will close all select boxes in the document,\r\n        except the current select box: */\r\n            var x,\r\n                y,\r\n                i,\r\n                arrNo = [];\r\n            x = document.getElementsByClassName('select-items');\r\n            y = document.getElementsByClassName('select-selected');\r\n            for (i = 0; i < y.length; i++) {\r\n                if (elmnt === y[i]) {\r\n                    arrNo.push(i);\r\n                } else {\r\n                    y[i].classList.remove('select-arrow-active');\r\n                }\r\n            }\r\n            for (i = 0; i < x.length; i++) {\r\n                if (arrNo.indexOf(i)) {\r\n                    x[i].classList.add('select-hide');\r\n                }\r\n            }\r\n        }\r\n\r\n        document.addEventListener('click', closeAllSelect);\r\n    }\r\n\r\n    handleAddAnswer(quesId) {\r\n        const { questions } = this.state;        \r\n        let len = questions[quesId].answers.length;\r\n        console.log(len.toString());\r\n        \r\n        if (questions[quesId].answers.length === 6) return;\r\n        questions[quesId].answers.push({\r\n            text: '',\r\n            answerId: (len + 1).toString()\r\n        })\r\n        console.log(questions[quesId].answers);\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        }, () => {\r\n            ls.set('savedTestToCreate', this.state);\r\n        })\r\n\r\n    }\r\n\r\n    handleAddQuestion() {\r\n        const { questions } = this.state;\r\n        if (questions.length === 20) return;\r\n        questions.push({\r\n            questionType: 'singleChoice',\r\n            title: '',\r\n            answers: [{\r\n                text: '',\r\n                answerId: '1'\r\n            }, {\r\n                text: '',\r\n                answerId: '2'\r\n            }],\r\n            correctAnswerId: ['1']\r\n        }) \r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        }, () => {\r\n            ls.set('savedTestToCreate', this.state);\r\n        })\r\n    }\r\n\r\n    setQuestionTitle(e, index) {\r\n        let { questions } = this.state;\r\n        questions[index].title = e.target.value;\r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        }, () => {\r\n            ls.set('savedTestToCreate', this.state);\r\n        });\r\n    }\r\n\r\n    setAnswerText(e, index, inx) {\r\n        console.log(e.target.value);\r\n        \r\n        let { questions } = this.state;\r\n        console.log(questions[index].answers, inx);\r\n        questions[index].answers[inx].text = e.target.value;\r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        }, () => {\r\n            ls.set('savedTestToCreate', this.state);\r\n        })\r\n    }\r\n\r\n    setTestTitle(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            title: e.target.value\r\n        }, () => {\r\n            ls.set('savedTestToCreate', this.state);\r\n        })\r\n    }\r\n\r\n    setTestDescription(e) {        \r\n        this.setState({\r\n            ...this.state,\r\n            description: e.target.value\r\n        }, () => {\r\n            ls.set('savedTestToCreate', this.state);\r\n        })\r\n    }\r\n\r\n    setTestSubject(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            subject: e.target.value\r\n        }, () => {\r\n            ls.set('savedTestToCreate', this.state);\r\n        })\r\n    }\r\n\r\n    setProtectedState(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            isProtected: !this.state.isProtected,\r\n            accessKey: ''\r\n        }, () => {\r\n            ls.set('savedTestToCreate', this.state);\r\n        })\r\n    }\r\n\r\n    setAttemptsState(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            isLimitedAttempts: !this.state.isLimitedAttempts,\r\n            maxAttempts: 1\r\n        }, () => {\r\n            ls.set('savedTestToCreate', this.state);\r\n        })\r\n    }\r\n\r\n    setTimeLimitState(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            isLimitedTime: !this.state.isLimitedTime,\r\n            timeLimit: null\r\n        }, () => {\r\n            ls.set('savedTestToCreate', this.state);\r\n        })\r\n    }\r\n\r\n    setAccessKey(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            accessKey: e.target.value\r\n        }, () => {\r\n            ls.set('savedTestToCreate', this.state);\r\n        })\r\n    }\r\n\r\n    setAttemptsNumber(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            maxAttempts: parseInt(e.target.value)\r\n        }, () => {\r\n            ls.set('savedTestToCreate', this.state);\r\n        })\r\n        \r\n    }\r\n\r\n    changeAttemptsNumber(value) {\r\n        let { maxAttempts } = this.state;\r\n\r\n        if (value > 0) \r\n            maxAttempts = Math.min(maxAttempts + value, 10);\r\n        else \r\n            maxAttempts = Math.max(maxAttempts + value, 1);\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            maxAttempts\r\n        }, () => {\r\n            ls.set('savedTestToCreate', this.state);\r\n        })\r\n    }\r\n\r\n    setCorrectAnswerId(quesIndex, ansId) {\r\n        let { questions } = this.state;\r\n        \r\n        let currQuestion = questions[quesIndex];\r\n\r\n        if (currQuestion.questionType === 'singleChoice') \r\n            questions[quesIndex].correctAnswerId = [ansId];\r\n        else {\r\n            let index = -1;\r\n            currQuestion.correctAnswerId.forEach((ansId1, inx) => {\r\n                if (ansId1 === ansId) \r\n                    index = inx;\r\n            })\r\n            if (index === -1) \r\n                questions[quesIndex].correctAnswerId.push(ansId);\r\n            else if (currQuestion.correctAnswerId.length > 1)\r\n                questions[quesIndex].correctAnswerId.splice(index, 1);\r\n            currQuestion.correctAnswerId.sort();\r\n        }\r\n        \r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        }, () => {\r\n            ls.set('savedTestToCreate', this.state);\r\n        })\r\n    }\r\n\r\n    handleAddTest() {\r\n        this.setState({\r\n            ...this.state,\r\n            isLoading: true\r\n        })\r\n\r\n        let newTest = this.state;\r\n        \r\n        console.log(this.state);\r\n        \r\n        let errors = [];\r\n\r\n        if (!newTest.title) \r\n            errors['title'] = 'The test must have a title'\r\n        if (!newTest.subject) \r\n            errors['subject'] = 'The test must have a subject'\r\n        newTest.questions.map(ques => {\r\n            if (!ques.title) \r\n                errors['questions'] = 'Questions must not be empty';\r\n            ques.answers.map(ans => {\r\n                if (!ans.text) \r\n                    errors['answers'] = 'Answers must not be empty';\r\n                return true;\r\n            })\r\n            return true;\r\n        })\r\n\r\n        if (errors['title'] || errors['subject'] || errors['questions'] || errors['answers']) {\r\n            this.setState({\r\n                ...this.state,\r\n                errors\r\n            });\r\n            return;\r\n        }\r\n\r\n        let isErrors = false;\r\n\r\n        if (newTest.title.length >= 30) {\r\n            errors['title'] = 'Title must not be longer than 30 syllables';\r\n            isErrors = true;\r\n        }\r\n        if (newTest.subject.length >= 18) {\r\n            errors['title'] = 'Title subject not be longer than 18 syllables';\r\n            isErrors = true;\r\n        }\r\n        if (newTest.description.length >= 400) {\r\n            errors['title'] = 'Title description not be longer than 400 syllables';\r\n            isErrors = true;\r\n        }\r\n\r\n        if (isErrors) {\r\n            this.setState({\r\n                ...this.state,\r\n                errors\r\n            })\r\n            return;\r\n        }\r\n\r\n        if (!this.context.userId) \r\n            window.location.href = '/app/login'\r\n        \r\n        fetch(`${ this.context.proxy }/api/tests/createTest`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'x-auth-token': this.context.token\r\n            },\r\n            body: JSON.stringify(this.state)\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                \r\n                if (!res.success) {\r\n                    if (res.isTimeErr) {\r\n                        this.setState({\r\n                            ...this.state,\r\n                            timeErrorMsg: 'You cannot create more than 1 test in 5 minutes!',\r\n                            isLoading: false\r\n                        })\r\n                    }\r\n                } else {\r\n                    ls.set('savedTestToCreate', null)\r\n                    window.location.href = '/app/allTests'\r\n                }\r\n            })\r\n    }\r\n\r\n    setModalChoice(choice) {\r\n        if (choice) {\r\n            this.setState(ls.get('savedTestToCreate'), () => {\r\n                console.log(this.state)\r\n                this.setState({\r\n                    ...this.state,\r\n                    hasSavedTest: false\r\n                })\r\n            })\r\n        } else {\r\n            ls.set('savedTestToCreate', null);\r\n            this.setState({\r\n                ...this.state,\r\n                hasSavedTest: false\r\n            })\r\n        }\r\n    }\r\n\r\n    deleteAnswer(quesId, ansId) {\r\n        let { questions } = this.state;\r\n        if (questions[quesId].answers.length <= 2) return;\r\n\r\n        if (questions[quesId].questionType === 'singleChoice') {\r\n\r\n            let inx = parseInt(ansId);\r\n            let corrAnswer = questions[quesId].correctAnswerId[0];\r\n            if (corrAnswer.toString() === (ansId + 1).toString()) {\r\n                if (ansId === 0) {\r\n                    questions[quesId].correctAnswerId = ['1'];\r\n                } else {                \r\n                    questions[quesId].correctAnswerId = [(ansId).toString()];\r\n                }\r\n            } \r\n            for (let i = inx; i < questions[quesId].answers.length; i++) {\r\n                questions[quesId].answers[i].answerId = (parseInt(questions[quesId].answers[i].answerId) - 1).toString();\r\n                if (i !== inx)\r\n                    document.getElementById(`_${ quesId }-${ i - 1 }`).value = questions[quesId].answers[i].text;\r\n            }  \r\n            if (+questions[quesId].correctAnswerId[0] >= questions[quesId].answers.length) \r\n                questions[quesId].correctAnswerId[0] =  (questions[quesId].answers.length - 1).toString();\r\n            \r\n            questions[quesId].answers.splice(ansId, 1);\r\n\r\n        } else {\r\n            let question = questions[quesId];\r\n            let currAnswerIds = question.correctAnswerId;\r\n            let currAnswers = question.answers;\r\n            let inx = +ansId;\r\n            console.log(currAnswerIds)\r\n\r\n            if (ansId !== 0) \r\n                currAnswerIds = currAnswerIds.filter(currAns => currAns !== (ansId + 1).toString());\r\n            \r\n            currAnswers.splice(+(ansId), 1)\r\n\r\n            for (let i = 0; i < currAnswerIds.length; i++) {\r\n                if (+currAnswerIds[i] - 1 > +ansId) {\r\n                    currAnswerIds[i] = (+currAnswerIds[i] - 1).toString();\r\n                    // break;\r\n                }\r\n            }\r\n            console.log(currAnswerIds)\r\n\r\n            while (inx < currAnswers.length) {\r\n                let currAns = currAnswers[inx];\r\n\r\n                currAns.answerId = (+currAns.answerId - 1).toString();\r\n                currAnswers[inx] = currAns;\r\n\r\n                inx++;\r\n            }\r\n\r\n            question.correctAnswerId = currAnswerIds;\r\n            question.answers = currAnswers;\r\n\r\n            questions[quesId] = question;\r\n        }        \r\n\r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        })\r\n    }\r\n\r\n    deleteQuestion(quesId) {\r\n        let { questions } = this.state;\r\n        if (questions.length === 1) return;\r\n        \r\n        questions.splice(quesId, 1);\r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        })\r\n    }\r\n\r\n    changeQuestionType(questionInx, option) {\r\n        let { questions, questionTypes } = this.state;\r\n\r\n        questions[questionInx].questionType = questionTypes[option.value];\r\n\r\n        console.log(option, questions[questionInx].questionType)\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        }, () => {\r\n            ls.set('savedTestToCreate', this.state);\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { questions, isProtected, timeErrorMsg, isLoading,  errors, isLimitedAttempts, isLimitedTime, maxAttempts, hasSavedTest, title, description, subject, accessKey, questionTypes } = this.state;\r\n        \r\n        const letters = ['A', 'B', 'C', 'D', 'E', 'F'];\r\n        const questionTypesToDisplay = [\r\n            { value: 0, label: 'Single choice' }, \r\n            { value: 1, label: 'Multiple choice' }\r\n        ];\r\n\r\n        return (\r\n            <div>\r\n                {hasSavedTest && (\r\n                    <ConfirmModal\r\n                        message=\"Load autosaved test?\"\r\n                        positiveChoice=\"Sure\"\r\n                        negativeChoice=\"No, delete it\"\r\n                        setModalChoice={(choice) => this.setModalChoice(choice)}\r\n                    />\r\n                )}\r\n\r\n                <h1 className=\"heading\">Create test</h1>\r\n                <div className=\"test-basic-info\">\r\n                    <div className=\"info-group\">\r\n                        <label htmlFor=\"title\">Test name: </label>\r\n                        <Input\r\n                            type=\"text\"\r\n                            onChange={(e) => this.setTestTitle(e)}\r\n                            isMini={true}\r\n                            name=\"title\"\r\n                            value={title}\r\n                        />\r\n                        <span className=\"error-input\">{errors['title']}</span>\r\n                    </div>\r\n                    <div className=\"info-group\">\r\n                        <label htmlFor=\"subject\">Subject: </label>\r\n                        <Input\r\n                            type=\"text\"\r\n                            onChange={(e) => this.setTestSubject(e)}\r\n                            isMini={true}\r\n                            name=\"title\"\r\n                            value={subject}\r\n                        />\r\n                        <span className=\"error-input\">{errors['subject']}</span>\r\n                    </div>\r\n                    <div className=\"info-group\">\r\n                        <label htmlFor=\"description\">Description: </label>\r\n                        <textarea\r\n                            className=\"\"\r\n                            onChange={(e) => this.setTestDescription(e)}\r\n                            name=\"description\"\r\n                            id=\"\"\r\n                            cols=\"30\"\r\n                            rows=\"10\"\r\n                            value={description}></textarea>\r\n                    </div>\r\n                    <div className=\"info-group-checkbox\">\r\n                        <div className=\"pretty p-icon p-smooth p-thick p-curve\">\r\n                            {isProtected ? (\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    checked\r\n                                    onChange={this.setProtectedState.bind(this)}\r\n                                />\r\n                            ) : (\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    onChange={this.setProtectedState.bind(this)}\r\n                                />\r\n                            )}\r\n                            <div className=\"state p-success\">\r\n                                <i className=\"icon\">\r\n                                    <FontAwesomeIcon\r\n                                        className=\"check-icon\"\r\n                                        icon={faCheck}\r\n                                    />\r\n                                </i>\r\n                                <label>Protected</label>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    {isProtected && (\r\n                        <div className=\"info-group\">\r\n                            <label htmlFor=\"key\">Secret key: </label>\r\n                            <Input\r\n                                onChange={(e) => this.setAccessKey(e)}\r\n                                isMini={true}\r\n                                name=\"accessKey\"\r\n                                type=\"text\"\r\n                                value={accessKey}\r\n                            />\r\n                        </div>\r\n                    )}\r\n                    <div className=\"info-group-checkbox\">\r\n                        <div className=\"pretty p-icon p-smooth p-thick p-curve\">\r\n                            {isLimitedAttempts ? (\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    checked\r\n                                    onChange={this.setAttemptsState.bind(this)}\r\n                                />\r\n                            ) : (\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    onChange={this.setAttemptsState.bind(this)}\r\n                                />\r\n                            )}\r\n                            <div className=\"state p-success\">\r\n                                <i className=\"icon\">\r\n                                    <FontAwesomeIcon\r\n                                        className=\"check-icon\"\r\n                                        icon={faCheck}\r\n                                    />\r\n                                </i>\r\n                                <label>Limited attempts</label>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    {isLimitedAttempts && (\r\n                        <div className=\"info-group\">\r\n                            <label htmlFor=\"key\">Maximum attempts: </label>\r\n                            <div className=\"btn-group\">\r\n                                <button\r\n                                    className=\"increment-btn\"\r\n                                    onClick={() =>\r\n                                        this.changeAttemptsNumber(-1)\r\n                                    }>\r\n                                    {' '}\r\n                                    <span>-</span>{' '}\r\n                                </button>\r\n                                <span className=\"attempts-num\">\r\n                                    {maxAttempts}\r\n                                </span>\r\n                                <button\r\n                                    className=\"increment-btn\"\r\n                                    onClick={() =>\r\n                                        this.changeAttemptsNumber(1)\r\n                                    }>\r\n                                    {' '}\r\n                                    <span>+</span>{' '}\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                    <div className=\"info-group-checkbox\">\r\n                        <div className=\"pretty p-icon p-smooth p-thick p-curve\">\r\n                            {isLimitedTime ? (\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    checked\r\n                                    onChange={this.setTimeLimitState.bind(this)}\r\n                                />\r\n                            ) : (\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    onChange={this.setTimeLimitState.bind(this)}\r\n                                />\r\n                            )}\r\n                            <div className=\"state p-success\">\r\n                                <i className=\"icon\">\r\n                                    <FontAwesomeIcon\r\n                                        className=\"check-icon\"\r\n                                        icon={faCheck}\r\n                                    />\r\n                                </i>\r\n                                <label>Limited time</label>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    {isLimitedTime ? (\r\n                        <div\r\n                            className=\"custom-select\"\r\n                            style={{ width: 300 + 'px' }}>\r\n                            <select>\r\n                                <option value=\"0\">Select time limit:</option>\r\n                                <option value=\"1\">5 minutes</option>\r\n                                <option value=\"2\">10 minutes</option>\r\n                                <option value=\"3\">20 minuted</option>\r\n                                <option value=\"4\">30 minutes</option>\r\n                                <option value=\"5\">1 hour</option>\r\n                                <option value=\"6\">1.5 hours</option>\r\n                            </select>\r\n                        </div>\r\n                    ) : (\r\n                        <div\r\n                            className=\"custom-select\"\r\n                            style={{ width: 300 + 'px', visibility: 'hidden' }}>\r\n                            <select>\r\n                                <option value=\"0\">Select time limit:</option>\r\n                                <option value=\"1\">5 minutes</option>\r\n                                <option value=\"2\">10 minutes</option>\r\n                                <option value=\"3\">20 minuted</option>\r\n                                <option value=\"4\">30 minutes</option>\r\n                                <option value=\"5\">1 hour</option>\r\n                                <option value=\"6\">1.5 hours</option>\r\n                            </select>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n                <div className=\"questions\">\r\n                    { questions.map((ques, index) => (\r\n                        <CreateQuestionCard\r\n                            question={ ques }\r\n                            index={ index }\r\n                            questionTypesToDisplay={ questionTypesToDisplay }\r\n                            letters={ letters }\r\n                            changeQuestionType={ (questionInx, option) =>\r\n                                this.changeQuestionType(questionInx, option)\r\n                            }\r\n                            handleAddAnswer={ (index) => this.handleAddAnswer(index) }\r\n                            setAnswerText={ (e, questionInx, answerInx) => this.setAnswerText(e, questionInx, answerInx) }\r\n                            deleteAnswer={ (questionInx, answerInx) => this.deleteAnswer(questionInx, answerInx) }\r\n                            setCorrectAnswerId={ (questionInx, ansId) => this.setCorrectAnswerId(questionInx, ansId) }\r\n                            setQuestionTitle={ (e, index) => this.setQuestionTitle(e, index) }\r\n                            addAnswer={ (questionInx) => this.handleAddAnswer(questionInx) }\r\n                        />\r\n                    ))}\r\n                    <button\r\n                        onClick={this.handleAddQuestion.bind(this)}\r\n                        className=\"new-question btn-secondary\">\r\n                        New question\r\n                    </button>\r\n                </div>\r\n                {timeErrorMsg && (\r\n                    <span className=\"error-msg\">{timeErrorMsg}</span>\r\n                )}\r\n\r\n                {errors['questions'] && (\r\n                    <span className=\"error-msg\">{errors['questions']}</span>\r\n                )}\r\n                {errors['answers'] && (\r\n                    <span className=\"error-msg\">{errors['answers']}</span>\r\n                )}\r\n\r\n                <button\r\n                    onClick={this.handleAddTest.bind(this)}\r\n                    className=\"btn btn-cta\">\r\n                    Create test!\r\n                </button>\r\n\r\n                {isLoading && <Spinner size=\"sm\" />}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class QuestionNavbar extends Component {\r\n    render() {\r\n        const { questionsNum, moveToQuestion, answers, currentQuestion } = this.props;\r\n\r\n        let questionsButtons = [];\r\n\r\n        for (let i = 0; i < questionsNum; i++) {\r\n            let extraClassName = '';\r\n\r\n            if (currentQuestion === i) \r\n                extraClassName = 'current';\r\n            else if (answers[i].length) \r\n                extraClassName = 'answered'\r\n\r\n            questionsButtons.push(\r\n                <div onClick={ () => moveToQuestion(i) } className={`question-btn ${ extraClassName }`}>\r\n                    <span>{ i + 1 }</span>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <>\r\n                { questionsButtons }  \r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport QuestionNavbar from './QuestionNavbar';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowLeft, faArrowRight } from '@fortawesome/free-solid-svg-icons'\r\nimport { convertTimeShort } from '../../middleware/convertTime';\r\n\r\nexport default class QuestionCard extends Component {\r\n    render() {\r\n        const { testTitle, time, answers, question, index, handleSelect, changeQuestion, questionsNum, finishTest, moveToQuestion } = this.props;\r\n\r\n        const letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\r\n\r\n        return (\r\n            <div className=\"question-container pass\">\r\n                <div className=\"question-container__toptitle\">\r\n                    <div className=\"left\">\r\n                        { testTitle }\r\n                    </div>\r\n                    <div className=\"right\">\r\n                        { convertTimeShort(time) }\r\n                    </div>\r\n                </div>\r\n                <div className=\"question-container__top\">\r\n                    {\r\n                        <QuestionNavbar currentQuestion={ index } answers={ answers } moveToQuestion={ (index) => moveToQuestion(index) } questionsNum={ questionsNum } />\r\n                    }\r\n                </div>\r\n                <h3 class=\"question-container__title\">\r\n                    { index + 1 }.  { question.title }\r\n                </h3>\r\n                <div className=\"question-container__answers\">\r\n                    { question.answers.map((ans, inx) => {\r\n                        let extraClassName = '';\r\n                        \r\n                        if (answers[index].find((currAnswer) => currAnswer === (inx + 1).toString())) \r\n                            extraClassName = 'selected';\r\n\r\n                        return (\r\n                            <div className={ \"answer-block \" + extraClassName } onClick={ () => handleSelect(index, ans.answerId) }>\r\n                                <div className=\"answer-block__letter\"><span>{ letters[inx] }</span></div>\r\n                                <div className=\"answer-block__text\">\r\n                                    <span>{ ans.text }</span>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    }) }\r\n                    \r\n                </div>\r\n                <div className=\"question-container__buttons\">\r\n                    <div className=\"buttons-left\">\r\n                        <button className={ `cta ${ index === 0 ? 'disabled' : '' }` }  disabled={ index === 0 } onClick={ () => changeQuestion(-1) }> \r\n                                <FontAwesomeIcon icon={ faArrowLeft } />    \r\n                             </button>\r\n                        <button className={ `cta ${ index === questionsNum - 1 ? 'disabled' : '' }` } disabled={ index === questionsNum - 1 } onClick={ () => changeQuestion(1) }><FontAwesomeIcon icon={ faArrowRight } /></button>\r\n                        \r\n                    </div>\r\n                    <div className=\"buttons-right\">\r\n                        <button onClick={ () => finishTest() } >Finish test</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport AuthContext from '../../context/AuthContext'\r\n\r\nimport Spinner from '../Spinner/Spinner'\r\n\r\nimport './css/style.css'\r\nimport { convertTimeShort } from '../../middleware/convertTime'\r\nimport { getHeaders } from '../../middleware/authMiddleware'\r\nimport QuestionCard from './QuestionCard'\r\nimport ConfirmModal from '../reusableComponents/ConfirmModal/ConfirmModal'\r\n\r\nexport default class PassTest extends Component {\r\n    state = {\r\n        isLoading: true,\r\n        test: [],\r\n        answers: [],\r\n        answeredQuestions: 0,\r\n        isSubmitted: false,\r\n        isTimeUp: false,\r\n        time: null,\r\n        currentQuestion: 0,\r\n        showModal: false\r\n    }\r\n\r\n    static contextType = AuthContext;\r\n\r\n    componentDidMount() {\r\n        const testId = this.props.match.params.testId;\r\n\r\n        fetch(`${ this.context.proxy }/api/tests/testInfo/${ testId }`, {\r\n            headers: {\r\n                ...getHeaders()\r\n            }\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                let answers = [];\r\n                for (let i = 0; i < res.questions.length; i++) \r\n                    answers[i] = [];\r\n                this.setState({\r\n                    isLoading: false,\r\n                    answers,\r\n                    test: res\r\n                })\r\n\r\n                if (res.timeLimit) {\r\n                    const { timeLimit } = res;\r\n                    let time = timeLimit;\r\n                    setInterval(() => {\r\n                        time = Math.max(time - 1, 0);\r\n                        let { isTimeUp } = this.state;\r\n                        if (!isTimeUp && time <= 0) {\r\n                            isTimeUp = true;\r\n                            let els = document.querySelectorAll(\"input[type='radio']\");\r\n                            els.forEach(el => {\r\n                                el.setAttribute('onChange', 'return false');\r\n                                el.setAttribute('onClick', 'return false');\r\n                            })\r\n                        }\r\n                        this.setState({\r\n                            ...this.state,\r\n                            isTimeUp,\r\n                            time\r\n                        });\r\n                        \r\n                    }, 1000)\r\n                } else {\r\n                    let time = 0;\r\n                    setInterval(() => {\r\n                        time++;\r\n                        this.setState({\r\n                            ...this.state,\r\n                            time\r\n                        })\r\n                    }, 1000)\r\n                }\r\n\r\n                \r\n            })\r\n    }\r\n\r\n    handleSelect(index, answerId) {\r\n        let { answers, answeredQuestions, isTimeUp, test } = this.state;\r\n        \r\n        if (isTimeUp) \r\n            return;\r\n        else {\r\n            if (!answers[index]) {\r\n                answeredQuestions++;\r\n            }\r\n            let currentAnswer = answers[index];\r\n            let currentQuestion = test.questions[index];\r\n\r\n            if (currentQuestion.questionType === 'singleChoice') \r\n                answers[index] = [answerId.toString()];\r\n            else {\r\n                let foundIndex = -1;\r\n                currentAnswer.forEach((ansId1, inx) => {\r\n                    if (ansId1 === answerId.toString()) \r\n                        foundIndex = inx;\r\n                })\r\n                if (foundIndex === -1) \r\n                    currentAnswer.push(answerId.toString());\r\n                else \r\n                    currentAnswer.splice(foundIndex, 1);\r\n                currentAnswer.sort();\r\n                answers[index] = currentAnswer;\r\n            }\r\n\r\n            console.log(answers)\r\n\r\n            this.setState({\r\n                ...this.state,\r\n                answers,\r\n                answeredQuestions\r\n            }, () => console.log(this.state) )\r\n        }\r\n        \r\n    }\r\n\r\n    finishTest() {\r\n        // e.preventDefault();\r\n        let points = 0;\r\n        let results = [];\r\n        let { answers, test, isSubmitted, time } = this.state;\r\n\r\n        if (test.timeLimit) {\r\n            time = test.timeLimit - time;\r\n        }\r\n\r\n        if (isSubmitted) \r\n            return;\r\n        \r\n        this.setState({\r\n            ...this.state,\r\n            isSubmitted: true\r\n        })\r\n\r\n        console.log('finish!');\r\n        \r\n\r\n        test.questions.map((ques, index) => {\r\n            console.log(ques.correctAnswerId, answers[index], ques.correctAnswerId == answers[index])\r\n            let isCorrect = true;\r\n            if (ques.correctAnswerId.length !== answers[index].length) \r\n                isCorrect = false;\r\n            else {\r\n                for (let i = 0; i < ques.correctAnswerId.length; i++) \r\n                    if (ques.correctAnswerId[i] !== answers[index][i]) {\r\n                        isCorrect = false;\r\n                        break;\r\n                    }\r\n            }\r\n            console.log(isCorrect)\r\n            if (isCorrect) {\r\n                points++;\r\n                results.push(true);\r\n            } else {\r\n                results.push(false);\r\n            }\r\n            return ques;\r\n        })\r\n        const query = {\r\n            \"userId\": this.context.userId,\r\n            \"points\": points,\r\n            \"time\": time,\r\n            \"answers\": results,\r\n            \"title\": test.title,\r\n            \"maxPoints\": test.questions.length,\r\n            \"date\": Date.now(),\r\n            \"answersLetters\": answers\r\n        }\r\n        fetch(`${ this.context.proxy }/api/tests/saveResult/${ test._id }`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(query)\r\n        })\r\n            .then(() => {\r\n                console.log('result saved!');\r\n                window.location.href = `/app/testInfo/${ test._id }`\r\n            })\r\n    }\r\n\r\n    changeQuestion(choice) {\r\n        let { currentQuestion, test } = this.state;\r\n\r\n        if ((!currentQuestion && choice === -1) || (currentQuestion === test.questions.length && choice === 1)) \r\n            return;\r\n\r\n        currentQuestion += choice;\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            currentQuestion\r\n        })\r\n        console.log(currentQuestion)\r\n    } \r\n\r\n    moveToQuestion(index) {\r\n        let { currentQuestion } = this.state;\r\n\r\n        currentQuestion = index;\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            currentQuestion\r\n        })\r\n    }\r\n\r\n    toggleModal(choice) {\r\n        const { showModal } = this.state;\r\n\r\n        // console.log(toggleModal)\r\n\r\n        if (!choice) {\r\n            this.setState({\r\n                ...this.state,\r\n                showModal: !showModal\r\n            })\r\n        } else {\r\n            this.finishTest();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { isLoading, test, answeredQuestions, time, answers, currentQuestion, showModal } = this.state;\r\n        const { questions } = test;\r\n\r\n        const letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\r\n\r\n        if (isLoading) return (\r\n            <Spinner />\r\n        )\r\n\r\n        return (\r\n            <>\r\n                {\r\n                    showModal && (\r\n                        <ConfirmModal \r\n                            message=\"Are you sure you want to finish the test?\" \r\n                            setModalChoice={ (choice) => this.toggleModal(choice) } \r\n                            positiveChoice=\"Yes\"\r\n                            negativeChoice=\"No\"    \r\n                         />\r\n                    )\r\n                }\r\n                {\r\n                    <QuestionCard \r\n                        answers={ answers } \r\n                        question={ questions[currentQuestion] }\r\n                        handleSelect={ (index, ansId) => this.handleSelect(index, ansId) }\r\n                        index={ currentQuestion }\r\n                        changeQuestion={  (choice) => this.changeQuestion(choice) }\r\n                        questionsNum={ test.questions.length }\r\n                        finishTest={ () => this.toggleModal(false) }\r\n                        moveToQuestion={ (index) => this.moveToQuestion(index) }\r\n                        testTitle={ test.title } \r\n                        time={ time }\r\n                    />\r\n                }\r\n            </>\r\n        )\r\n    }\r\n}\r\n","const validate = (data) => {\r\n    let errors = [];\r\n    data.forEach(field => {\r\n        if (field.name === 'email') {\r\n            if (!(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(field.value)) ) {\r\n                errors['email'] = 'Invalid email'\r\n            } \r\n        } \r\n        if (field.name === 'password') {\r\n            if (field.value.length < 6) {\r\n                errors['password'] = 'Password must be at least 6 characters'\r\n            }\r\n        }\r\n        if (field.name === 'fullName') {\r\n            if (field.value.trim().length <= 5) {\r\n                errors['fullName'] = 'Please enter a real full name'\r\n            }\r\n        }\r\n    })\r\n\r\n    return errors;\r\n}\r\n\r\nexport {\r\n    validate\r\n}","import React, { Component } from 'react'\r\n\r\nimport './css/style.css'\r\n\r\nimport Input from '../reusableComponents/inputField/Input'\r\nimport Spinner from '../Spinner/Spinner'\r\n\r\nimport { validate } from '../../middleware/validator'\r\nimport AuthContext from '../../context/AuthContext'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCheck } from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport default class Login extends Component {\r\n    state = {\r\n        email: '',\r\n        password: '',\r\n        errors: [],\r\n        isLongerExpiration: false,\r\n        isLoading: false\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.formEl = React.createRef();        \r\n    }\r\n\r\n    static contextType = AuthContext;\r\n\r\n    setCredential(e) {\r\n        console.log(e.target);\r\n        \r\n        this.setState({\r\n            ...this.state,\r\n            [e.target.name]: e.target.value\r\n        }, () => console.log(this.state)\r\n        )\r\n    }\r\n\r\n    setLoading(state) {\r\n        this.setState({\r\n            isLoading: state\r\n        }, () => console.log(this.state))\r\n    }\r\n\r\n    setExpirationState() {\r\n        this.setState({\r\n            ...this.state,\r\n            isLongerExpiration: !this.state.isLongerExpiration\r\n        })\r\n    } \r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        const { email, password, isLongerExpiration } = this.state;\r\n\r\n        let data = [\r\n            { name: 'email', value: email },\r\n            { name: 'password', value: password }\r\n        ];\r\n        let errors = validate(data);\r\n        \r\n        \r\n        if (errors['email'] || errors['password']) {\r\n            this.setState({\r\n                ...this.state,\r\n                errors: errors,\r\n                isLoading: false\r\n            })\r\n        } else {\r\n            errors = [];\r\n            const query = {\r\n                email,\r\n                password,\r\n                isLongerExpiration\r\n            }\r\n            fetch(`${ this.context.proxy }/api/users/login`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(query)\r\n            })\r\n                .then(res => res.json())\r\n                .then(res => {\r\n                    if (res.success) {\r\n                        this.context.setToken(res.token, res.user._id, res.user);\r\n                        window.location.href = '/app/'\r\n                    } else {\r\n                        if (res.doesUserExist) \r\n                            errors['password'] = 'Incorrect password';\r\n                        else \r\n                            errors['email'] = 'User does not exist!'\r\n                        this.setState({\r\n                            ...this.state,\r\n                            errors: errors,\r\n                            isLoading: false\r\n                        })\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { errors, isLoading } = this.state;\r\n        console.log(isLoading);\r\n        \r\n\r\n        return (\r\n            <div>\r\n                <h1 className=\"heading\">Log in</h1>\r\n                <form id=\"login-form\" onSubmit={ (e) => this.handleSubmit(e) }>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Email: </label>\r\n                        <Input name=\"email\" type=\"text\" onChange={ (e) => this.setCredential(e) } />\r\n                        <span className=\"error-input\">{ errors['email'] }</span>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Password</label>\r\n                        <Input name=\"password\" type=\"password\" onChange={ (e) => this.setCredential(e) } />\r\n                        <span className=\"error-input\">{ errors['password'] }</span>\r\n                    </div>\r\n\r\n                    <div className=\"checkbox-group pretty p-icon p-smooth p-thick p-curve\">\r\n                        <input type=\"checkbox\" onChange={ this.setExpirationState.bind(this) } />\r\n                        <div className=\"state p-success\">\r\n                            <i className=\"icon\">\r\n                            <FontAwesomeIcon className=\"check-icon\" icon={ faCheck } />\r\n                            </i>\r\n                            <label>Remember for a day</label>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <input onClick={ () => this.setLoading(true) } type=\"submit\" className=\"btn btn-cta\" value=\"Log in\" />\r\n                    { isLoading && <Spinner size=\"sm\" /> }\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","export const getPasswordStrenth = (password) => {\r\n    // password strenth points: \r\n    //  numbers + 1\r\n    //  letters + 1\r\n    //  symbols + 2\r\n    //  > 8 syllables + 1\r\n\r\n    // 1 - weak\r\n    // 2 - 3 - meduim\r\n    // 4 - strong\r\n    // 5 - ultra-strong\r\n\r\n    if (!password) return {\r\n        points: null,\r\n        strenth: null\r\n    }\r\n\r\n    let points = 0;\r\n    let hasNums = false,\r\n        hasLetters = false,\r\n        hasSymbols = false;\r\n    \r\n    if (password.length > 8) \r\n        points++;\r\n\r\n    for (let i of password) {\r\n        if (i >= '0' && i <= 9) {\r\n            if (!hasNums) {\r\n                hasNums = true;\r\n                points++;\r\n            }\r\n        } else if (i.toLowerCase(i) >= 'a' && i.toLowerCase(i) <= 'z') {\r\n            if (!hasLetters) {\r\n                hasLetters = true;\r\n                points++;\r\n            }\r\n        } else if (i !== ' ') {\r\n            if (!hasSymbols) {\r\n                hasSymbols = true;\r\n                points += 2;\r\n            }\r\n        }\r\n    }\r\n\r\n    let result = 'Weak',\r\n        className = \"weak\";\r\n\r\n    if (points >= 2) {\r\n        result = 'Medium';\r\n        className = 'medium';\r\n    }\r\n    if (points >= 4) {\r\n        result = 'Strong';\r\n        className = 'strong';\r\n    }\r\n    if (points >= 5) {\r\n        result = 'Ultra strong';\r\n        className = 'ultra-strong';\r\n    }\r\n        \r\n    \r\n    return {\r\n        points,\r\n        className,\r\n        strenth: result\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nimport './css/style.css'\r\n\r\nimport Spinner from '../Spinner/Spinner'\r\n\r\nimport { validate } from '../../middleware/validator'\r\nimport { getPasswordStrenth } from '../../middleware/passwordStrenth'\r\nimport AuthContext from '../../context/AuthContext'\r\nimport Input from '../reusableComponents/inputField/Input'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCheck } from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport default class Register extends Component {\r\n    state = {\r\n        email: '',\r\n        password: '',\r\n        confirmPassword: '',\r\n        name: '',\r\n        isTeacher: false,\r\n        errors: [],\r\n        isLoading: false\r\n    }\r\n\r\n    static contextType = AuthContext;\r\n\r\n    setCredential(e) {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n    }\r\n\r\n    setLoading(state) {\r\n        this.setState({\r\n            isLoading: state\r\n        }, () => console.log(this.state))\r\n    }\r\n\r\n    setTeacherState() {\r\n        this.setState({\r\n            ...this.state,\r\n            isTeacher: !this.state.isTeacher\r\n        })\r\n    }\r\n\r\n    registerUser(e) {\r\n        e.preventDefault();\r\n\r\n        let data = [\r\n            { name: 'email', value: this.state.email },\r\n            { name: 'password', value: this.state.password },\r\n            { name: 'fullName', value: this.state.name }\r\n        ];\r\n        let errors = validate(data);\r\n        if (this.state.password !== this.state.confirmPassword) {\r\n            errors['confirmPassword'] = 'Passwords do not match'\r\n        }\r\n        \r\n        if (errors['email'] || errors['password'] || errors['fullName'] || errors['confirmPassword']) {\r\n            this.setState({\r\n                ...this.state,\r\n                errors: errors,\r\n                isLoading: false\r\n            })\r\n        } else {\r\n            const newUser = {\r\n                email: this.state.email,\r\n                password: this.state.password,\r\n                name: this.state.name\r\n            };\r\n            if (this.state.confirmPassword !== newUser.password) {\r\n                return;\r\n            };\r\n            fetch(`${ this.context.proxy }/api/users/addUser`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(newUser)\r\n            })\r\n                .then(res => res.json())\r\n                .then(res => {\r\n                    console.log(res);\r\n                    \r\n                    if (res.notSuccess) {\r\n                        errors = [];\r\n                        errors['email'] = 'User with such email already exists';\r\n                        this.setState({\r\n                            ...this.state,\r\n                            errors,\r\n                            isLoading: false\r\n                        })\r\n                    } else {\r\n                        this.context.setToken(res.token, res.user._id);\r\n                        window.location.href = '/app/'\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { errors, isLoading, password } = this.state;\r\n\r\n        let { strenth, className } = getPasswordStrenth(password);\r\n\r\n        return (\r\n            <>\r\n                <h1 className=\"heading\">Register</h1>\r\n                <form onSubmit={ (e) => this.registerUser(e) }>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">E-mail: </label>\r\n                        <Input type=\"text\" name=\"email\" onChange={ (e) => this.setCredential(e) } />\r\n                        <span className=\"error-input\">{ errors['email'] }</span>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Full name: </label>\r\n                        <Input type=\"text\" name=\"name\" onChange={ (e) => this.setCredential(e) } />\r\n                        <span className=\"error-input\">{ errors['fullName'] }</span>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Password: { strenth && <span className={ \"strenth-text \" + className }>({ strenth })</span> } </label>\r\n                        <Input type=\"password\" name=\"password\" onChange={ (e) => this.setCredential(e) } />\r\n                        <span className=\"error-input\">{ errors['password'] }</span>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Confirm password: </label>\r\n                        <Input type=\"password\" name=\"confirmPassword\" onChange={ (e) => this.setCredential(e) } />\r\n                        <span className=\"error-input\">{ errors['confirmPassword'] }</span>\r\n                    </div>\r\n                    <div className=\"checkbox-group pretty p-icon p-smooth p-thick p-curve\">\r\n                        <input type=\"checkbox\" onChange={ this.setTeacherState.bind(this) } />\r\n                        <div className=\"state p-success\">\r\n                            <i className=\"icon\">\r\n                            <FontAwesomeIcon className=\"check-icon\" icon={ faCheck } />\r\n                            </i>\r\n                            <label>Register as teacher</label>\r\n                        </div>\r\n                    </div>\r\n                    <input onClick={ () => this.setLoading(true) } type=\"submit\" className=\"btn btn-cta\" value=\"Create account\" />\r\n                    { isLoading && <Spinner size=\"sm\" /> }\r\n                </form>\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Switch, Route, BrowserRouter } from 'react-router-dom'\r\n\r\nimport Navbar from './Navbar/Navbar'\r\n\r\nimport Profile from './Profile/Profile'\r\nimport Tests from './Tests/Tests'\r\nimport TestInfo from './Tests/TestInfo'\r\nimport CreateTest from './CreateTest/CreateTest'\r\nimport TestResult from './TestResult/TestResult'\r\nimport CreateTestForm from './CreateTest/CreateTestForm'\r\nimport PassTest from './PassTest/PassTest'\r\nimport Login from './Auth/Login'\r\nimport Register from './Auth/Register'\r\n\r\nimport './css/MainPage.css'\r\nimport './css/GlobalStyles/style.css'\r\n\r\nexport default class MainPage extends Component {    \r\n\r\n    componentDidMount() {\r\n        let mainEl = document.querySelector('main')\r\n        console.log(\"Hello\");\r\n\r\n\r\n        setInterval(() => {\r\n            if (is_scrolling()) {\r\n                if (!mainEl.classList.contains(\"on-scroll-bar\")) {\r\n                    mainEl.classList.add(\"on-scroll-bar\");\r\n                }\r\n                \r\n            } else {\r\n                if (mainEl.classList.contains(\"on-scroll-bar\")) {\r\n                    mainEl.classList.remove(\"on-scroll-bar\");\r\n                }\r\n            }\r\n            \r\n        }, 10)\r\n\r\n        mainEl.addEventListener('scroll', (e) => {\r\n            window.lastScrollTime = new Date().getTime()\r\n        }, false)\r\n\r\n        function is_scrolling() {\r\n            return window.lastScrollTime && new Date().getTime() < window.lastScrollTime + 500\r\n        }\r\n    }\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <BrowserRouter>\r\n\r\n                <div className=\"app-container\">\r\n                    <Navbar />\r\n                    <main>\r\n                        <Switch>\r\n                            <Route exact path='/app/' component={ Profile } /> \r\n                            <Route path='/app/allTests' component={ Tests } /> \r\n                            <Route path='/app/testInfo/:testId' component={ TestInfo } /> \r\n                            <Route path='/app/testResult/:userId/:resultId' component={ TestResult } /> \r\n                            <Route path='/app/createTest' component={ CreateTest } /> \r\n                            <Route path='/app/createTestForm' component={ CreateTestForm } /> \r\n                            <Route path='/app/passTest/:testId' component={ PassTest } /> \r\n                            <Route path='/app/login' component={ Login } /> \r\n                            <Route path='/app/register' component={ Register } /> \r\n                        </Switch>\r\n                    </main>\r\n                </div>\r\n\r\n            </BrowserRouter>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport ls from 'local-storage'\r\n\r\nimport AuthContext from './context/AuthContext'\r\nimport TestsContext from './context/TestsContext'\r\n\r\nimport LandingPage from './landingPage/LandingPage';\r\nimport MainPage from './components/MainPage';\r\n\r\nimport './App.css'\r\n\r\nclass App extends Component {\r\n    state = {\r\n        user: ls.get('user'),\r\n        userId: ls.get('userId'),\r\n        token: ls.get('token'),\r\n        proxy: ''\r\n    }\r\n\r\n    componentWillMount() {\r\n        let proxy = '';\r\n        if (process.env.NODE_ENV === 'production') {\r\n            if (window.location.href.startsWith('https'))\r\n                proxy = 'https://easytestapp.herokuapp.com';\r\n            else if (window.location.href.startsWith('http'))\r\n                proxy = 'http://easytestapp.herokuapp.com';\r\n            else \r\n                proxy = 'easytestapp.herokuapp.com';\r\n        } else \r\n            proxy = 'http://localhost:5000';\r\n        console.log(proxy)\r\n        this.setState({\r\n            ...this.state,\r\n            proxy\r\n        })\r\n    }\r\n    \r\n\r\n    setToken = (token, userId, user) => {\r\n        this.setState({\r\n            token: token,\r\n            userId: userId,\r\n            user\r\n        })\r\n        ls.set('token', token);\r\n        ls.set('userId', userId);\r\n        ls.set('user', user);\r\n    }\r\n\r\n    logout = () => {\r\n        this.setState({\r\n            token: '',\r\n            userId: ''\r\n        });\r\n        ls.set('token', '');\r\n        ls.set('userId', '');\r\n    }\r\n\r\n    render() {\r\n        const { token, userId, proxy, user } = this.state;\r\n        console.log(process.env);\r\n        console.log(window.location.href);\r\n        \r\n        \r\n\r\n        return (\r\n            <BrowserRouter basename={ process.env.PUBLIC_URL }>\r\n                <React.Fragment>\r\n                    <TestsContext.Provider\r\n                        value={ { allTests: null, hasMoreTests: true, results: null, createdTests: null } }\r\n                    >\r\n                        <AuthContext.Provider value={{ token, userId, user, setToken: this.setToken, logout: this.logout, proxy  }}>\r\n                            <Switch>\r\n                                <Route exact path=\"/\" component={ LandingPage } />\r\n                                <Route path=\"/app\" component={ MainPage } />\r\n                            </Switch>\r\n                        </AuthContext.Provider>\r\n                    </TestsContext.Provider>\r\n                </React.Fragment>\r\n            </BrowserRouter>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\r\n\r\nexport default React.createContext({\r\n    \r\n})\r\n","export const convertTimeShort = seconds => {\r\n    return new Date(seconds * 1000).toISOString().substr(11, 8);\r\n};\r\n\r\nexport const convertTime = seconds => {\r\n    const hrs = Math.floor(seconds / 3600);\r\n    const mins = Math.floor((seconds - hrs * 3600) / 60);\r\n    const secs = seconds - hrs * 3600 - mins * 60;\r\n\r\n    let result = '';\r\n    if (hrs) \r\n        result += hrs.toString() + ` hour${ hrs !== 1 ? 's' : '' } `;\r\n    if (mins)\r\n        result += mins.toString() + ` minute${ mins !== 1 ? 's' : '' } `;\r\n    if (secs) \r\n        result += secs.toString() + ` second${ secs !== 1 ? 's' : '' } `;\r\n    \r\n    return result;\r\n};\r\n","module.exports = __webpack_public_path__ + \"static/media/logo1.2ad03ba9.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo-light1.dc46d8b1.svg\";","module.exports = __webpack_public_path__ + \"static/media/hero.de877d3a.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.dc46d8b1.svg\";","import React, { Component, Suspense } from 'react'\r\n\r\nimport { Redirect } from 'react-router-dom'\r\nimport InfiniteScroll from 'react-infinite-scroller'\r\n\r\nimport Spinner from '../../Spinner/Spinner'\r\nimport { getHeaders } from '../../../middleware/authMiddleware';\r\n\r\nimport AuthContext from '../../../context/AuthContext'\r\nimport TestsContext from '../../../context/TestsContext';\r\n\r\nconst TestCard = React.lazy(() => import('./TestCard'));\r\n\r\nexport default class TestsComtainer extends Component {\r\n    state = {\r\n        tests: [],\r\n        createdTests: [],\r\n        left: 0,\r\n        right: 3,\r\n        isMoreTests: true,\r\n        isRedirectToLogin: false,\r\n        shouldFetchTests: true\r\n    }\r\n\r\n    static contextType = TestsContext;\r\n\r\n    loadMore() {\r\n        const { urlToFetch, authContext, containerType, type } = this.props;\r\n        let { left, right, tests, isMoreTests, createdTests, shouldFetchTests } = this.state;\r\n        console.log(isMoreTests, this.context.hasMoreTests, '-----+++++++')\r\n        if (!this.context.hasMoreTests && containerType === 'tests') {\r\n            return;\r\n        }\r\n        console.log(tests.length)\r\n        if (!shouldFetchTests) \r\n            return;\r\n\r\n        fetch(urlToFetch, {\r\n            method: 'POST',\r\n            headers: {\r\n                ...getHeaders(),\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                isLimited: true,\r\n                left,\r\n                right\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                if (res.isTokenError) {\r\n                    authContext.logout();\r\n                    this.setState({\r\n                        ...this.state,\r\n                        isRedirectToLogin: true\r\n                    })\r\n                    return true;\r\n                }\r\n                if (type === 'full')\r\n                    res.tests.forEach(test => tests.push(test));\r\n                else \r\n                    tests = res.tests;\r\n                if (containerType === 'tests') {\r\n                    this.context.allTests = tests;\r\n                    this.context.hasMoreTests = res.isMoreTests;\r\n                }\r\n                if (type === 'created') {\r\n                    createdTests = tests;\r\n                    this.context.createdTests = createdTests;\r\n                }\r\n                let isMoreTests = res.isMoreTests;\r\n                if (type === 'created') \r\n                    isMoreTests = false;\r\n                this.setState({\r\n                    ...this.state,\r\n                    tests,\r\n                    left: left + 3,\r\n                    right: right + 3,\r\n                    isMoreTests,\r\n                    createdTests\r\n                }, () => console.log(this.state.tests))\r\n            });\r\n    }\r\n\r\n    componentWillMount() {\r\n        if (this.props.type === 'full') {\r\n            if (this.context.allTests) {\r\n                console.log(this.context.allTests.length, '+-+-')\r\n                this.setState({\r\n                    ...this.state,\r\n                    tests: this.context.allTests,\r\n                    left: this.context.allTests.length,\r\n                    right: this.context.allTests.length + 3,\r\n                    isMoreTests: this.context.hasMoreTests\r\n                })\r\n            }\r\n        }\r\n        console.log(this.state.tests.length, '==============')\r\n        if (this.props.type === 'created') {\r\n            if (this.context.createdTests) {\r\n                this.setState({\r\n                    ...this.state,\r\n                    shouldFetchTests: false,\r\n                    createdTests: this.context.createdTests\r\n                })\r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n\r\n    render() {\r\n        const { type, user } = this.props;\r\n\r\n        let { isLoading, tests, isRedirectToLogin, isMoreTests, createdTests, shouldFetchTests } = this.state;\r\n\r\n        let hasPreloadedTests = false;\r\n\r\n        if (isRedirectToLogin) return (\r\n            <Redirect to=\"/app/login\" />\r\n        )\r\n\r\n        if (isLoading || !tests) return (\r\n            <Spinner />\r\n        )\r\n\r\n        let items = [];\r\n        // console.log(TestsContext)\r\n        \r\n        // if (type === 'full' && this.context.allTests) {\r\n        //     tests = this.context.allTests;\r\n        //     hasPreloadedTests = true;\r\n        // }\r\n\r\n        console.log(this.context.hasMoreTests) \r\n\r\n        if (type === 'full')\r\n            tests.map((test, inx) => {\r\n                return items.push (\r\n                    <Suspense key={ inx } fallback={ <Spinner size=\"sm\" /> } >\r\n                        <TestCard key={ `${ inx }-${ inx }` } type={ type } test={ test } user={ user || null } />\r\n                    </Suspense> \r\n                )\r\n            })\r\n        else \r\n            createdTests.map((test, inx) => {\r\n                return items.push (\r\n                    <Suspense key={ inx } fallback={ <Spinner size=\"sm\" /> } >\r\n                        <TestCard key={ `${ inx }-${ inx }` } type={ type } test={ test } user={ user || null } />\r\n                    </Suspense> \r\n                )\r\n            })\r\n\r\n        console.log(type, 'lppl')\r\n\r\n        return (\r\n            <>\r\n                        <InfiniteScroll\r\n                            pageStart={ \"0\" }\r\n                            loadMore={ this.loadMore.bind(this) }\r\n                            hasMore={ isMoreTests && shouldFetchTests }\r\n                            loader={ <Spinner /> }\r\n                            useWindow={ false } >\r\n                            <div className=\"tests-container\">\r\n                                { items.length === 0 ? (type !== 'result' && <h3>Oops, no tests available yet!</h3>) : items }\r\n                            </div>\r\n                            \r\n                        </InfiniteScroll>\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nimport './css/style.css'\r\n\r\nexport default class PointsCard extends Component {\r\n    render() {\r\n        const { points, maxPoints } = this.props;\r\n\r\n        let result = points / maxPoints;\r\n        let extraClassName = '';\r\n\r\n        if (result >= .85)\r\n            extraClassName = 'excellent';\r\n        else if (result >= .65)\r\n            extraClassName = 'good';\r\n        else if (result >= .40)\r\n            extraClassName = 'satisfactory';\r\n        else extraClassName = 'bad';\r\n\r\n        return (\r\n            <span className={ `points-card ${ extraClassName }` }>\r\n                { points }<span className=\"divider\">/</span>{ maxPoints }\r\n            </span>\r\n        )\r\n    }\r\n}\r\n"],"sourceRoot":""}