{"version":3,"sources":["components/Spinner/Spinner.js","middleware/authMiddleware.js","landingPage/LandingPage.js","components/Navbar/navbarScript.js","components/Navbar/Navbar.js","components/reusableComponents/StatusIcon.js","components/Profile/ResultsTable/Table.js","components/Profile/ResultsTable.js","components/Profile/Profile.js","components/Tests/Tests.js","components/reusableComponents/inputField/Input.js","components/reusableComponents/backLink/BackLink.js","components/Tests/ResultsChart.js","components/Tests/TestInfo.js","components/CreateTest/CreateTest.js","components/TestResult/TestResult.js","components/reusableComponents/ConfirmModal/ConfirmModal.js","components/CreateTest/CreateTestForm.js","components/PassTest/PassTest.js","middleware/validator.js","components/Auth/Login.js","middleware/passwordStrenth.js","components/Auth/Register.js","components/MainPage.js","App.js","serviceWorker.js","index.js","context/TestsContext.js","middleware/convertTime.js","landingPage/img/logo1.svg","landingPage/img/logo-light1.svg","landingPage/img/hero.svg","components/Navbar/img/logo.svg","components/reusableComponents/tests/TestsContainer.js","components/reusableComponents/PointsCard.js","context/AuthContext.js"],"names":["Spinner","size","console","log","extraClassName","className","getHeaders","ls","get","LandingPage","src","Logo","alt","LogoLight","to","Hero","Component","toggleView","shouldChangeLS","nav","document","querySelector","linkTexts","querySelectorAll","btn","classList","toggle","forEach","text","state","set","Navbar","isLoggedIn","isHidden","addEventListener","init","this","context","logout","window","location","href","isHiiden","token","id","icon","faChevronLeft","exact","faHome","faAlignLeft","faPenAlt","faSignInAlt","faUserPlus","onClick","bind","faSignOutAlt","contextType","AuthContext","StatusIcon","percent","props","faCrown","Table","isRedirectToTest","testToRedirect","isRedirectToResult","test","setState","tests","user","_id","map","redirectToResult","testId","title","dateFormat","date","attempt","points","maxPoints","Math","floor","avgPoints","ResultsTable","results","isLoading","left","right","isRedirectToLogin","isMoreTests","authContext","i","currTest","fetch","proxy","headers","then","res","json","isTokenError","testResults","result","length","subject","min","slice","testsMap","Map","passedTests","currAttempts","totalAttempts","filter","passedTest","push","loadTests","testsToShow","TestsContext","React","lazy","Profile","avgResult","nextLinkVal","reverse","name","TestsContainer","Tests","linkToFetch","fallback","urlToFetch","type","Input","onChange","isMini","value","handleChange","e","autoComplete","htmlFor","BackLink","link","history","useHistory","faArrowLeft","goBack","ResultsChart","userId","labels","labelsMap","userPoints","max","el","sort","barColor","borderColor","matchMedia","matches","pointsData","barColors","label","data","canvas","getContext","createLinearGradient","datasets","fill","backgroundColor","maxBarThickness","borderWidth","options","scales","yAxes","ticks","beginAtZero","callback","legend","display","TestInfo","usernames","errors","hasLiked","match","params","likes","find","like","res1","res2","currentAccessKey","target","maxAttempts","usedAttemtps","accessKey","isProtected","field","which","preventDefault","method","body","JSON","stringify","isIncrease","timeLimit","attemtpsLeft","description","setAccessKey","convertTime","goToTest","setLike","faThumbsUp","faThumbsUpS","CreateTest","createdTests","TestResult","answers","resultId","questions","ans","inx","toString","isCorrect","correctAnswerId","parseInt","faCheckCircle","faTimesCircle","question","ConfirmModal","message","setModalChoice","positiveChoice","negativeChoice","CreateTestForm","answerId","creator","timeErrorMsg","isLimitedAttempts","isLimitedTime","answerToLoadTest","undefined","hasSavedTest","x","selElmnt","a","b","c","getElementsByClassName","timeValues","setst","j","getElementsByTagName","createElement","setAttribute","innerHTML","selectedIndex","appendChild","y","k","s","h","parentNode","previousSibling","removeAttribute","click","stopPropagation","closeAllSelect","nextSibling","elmnt","arrNo","remove","indexOf","add","quesId","len","index","quesIndex","ansId","newTest","ques","isErrors","success","isTimeErr","choice","getElementById","splice","letters","setTestTitle","setTestSubject","setTestDescription","cols","rows","checked","setProtectedState","faCheck","setAttemptsState","changeAttemptsNumber","setTimeLimitState","style","width","visibility","key","setQuestionTitle","setCorrectAnswerId","setAnswerText","deleteAnswer","handleAddAnswer","handleAddQuestion","handleAddTest","PassTest","answeredQuestions","isSubmitted","isTimeUp","time","setInterval","query","Date","now","convertTimeShort","onSubmit","finishTest","class","handleSelect","validate","trim","Login","email","password","isLongerExpiration","formEl","createRef","setToken","doesUserExist","handleSubmit","setCredential","setExpirationState","setLoading","Register","confirmPassword","isTeacher","newUser","notSuccess","strenth","hasNums","hasLetters","hasSymbols","toLowerCase","getPasswordStrenth","registerUser","setTeacherState","MainPage","mainEl","lastScrollTime","getTime","contains","path","component","App","startsWith","process","basename","Fragment","Provider","allTests","Boolean","hostname","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","createContext","seconds","toISOString","substr","hrs","mins","secs","module","exports","TestCard","TestsComtainer","isLimited","items","pageStart","loadMore","hasMore","loader","useWindow","PointsCard"],"mappings":"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","file":"static/js/main.051429c6.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport './Spinner.css'\r\n\r\nconst Spinner = ({ size }) => {\r\n    console.log(size);\r\n    const extraClassName = size === \"sm\" ? \"small\" : \"\";\r\n\r\n    return (\r\n        <div className={ \"loader-wrapper \" + extraClassName }>\r\n            <div className={ \"loader \" + extraClassName }></div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Spinner","import ls from 'local-storage'\r\n\r\nconst getHeaders = () => {\r\n    return {\r\n        'x-auth-token': ls.get('token')\r\n    }\r\n}\r\n\r\nexport {\r\n    getHeaders\r\n}","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport Logo from './img/logo1.svg'\r\nimport LogoLight from './img/logo-light1.svg'\r\nimport Hero from './img/hero.svg'\r\n\r\nimport './css/style.css'\r\n\r\nexport default class LandingPage extends Component {\r\n    render() {\r\n        return (\r\n            <header>\r\n                {/* <div className=\"bg-circle-lg bg-circle\"></div> */}\r\n                <div className=\"bg-circle-md bg-circle\"></div>\r\n                <div className=\"bg-circle-dm bg-circle\"></div>\r\n                <div className=\"nav\">\r\n                    <div className=\"nav-left\">\r\n                        <img className=\"light\" src={ Logo } alt=\"\" />\r\n                        <img className=\"dark\" src={ LogoLight } alt=\"\" />\r\n                        <h1>EasyTest</h1>\r\n                    </div>\r\n                </div>\r\n                <div className=\"hero\">\r\n                    <div className=\"hero-left\">\r\n                        <h1>Get your experience in online testing to a whole new level!</h1>\r\n                        <Link className=\"cta\" to=\"/app/\">Try it out!</Link>\r\n                    </div>\r\n                    <div className=\"hero-right\">\r\n                        <img src={ Hero } alt=\"\" />\r\n                    </div>\r\n                </div>\r\n                <div className=\"copyright\">\r\n                    &copy; 2020 Yegor Trussov\r\n                </div>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n","import ls from 'local-storage';\r\n\r\nconst toggleView = (shouldChangeLS) => {\r\n    let nav = document.querySelector('nav');\r\n    let linkTexts = document.querySelectorAll('.text');\r\n    let btn = document.querySelector('#toggle-view');\r\n    nav.classList.toggle('hidden');\r\n    linkTexts.forEach(text => text.classList.toggle('hidden'));\r\n    btn.classList.toggle('hidden');\r\n    console.log('object')\r\n\r\n    if (shouldChangeLS) {\r\n        let state = ls.get('isNavbarHidden');\r\n        ls.set('isNavbarHidden', !state);\r\n    }\r\n}\r\n\r\nconst init = () => {\r\n    let btn = document.querySelector('#toggle-view');\r\n    const state = ls.get('isNavbarHidden');\r\n    console.log(state)\r\n    if (state) {\r\n        toggleView(false);\r\n    }\r\n    btn.addEventListener('click', () => toggleView(true));\r\n}\r\n\r\nexport {\r\n    toggleView,\r\n    init\r\n};","import React, { Component } from 'react'\r\nimport { NavLink, Link } from 'react-router-dom'\r\nimport ls from 'local-storage'\r\n\r\nimport { init } from './navbarScript'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faHome, faAlignLeft, faPenAlt, faSignInAlt, faSignOutAlt, faUserPlus, faChevronLeft } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport Logo from './img/logo.svg'\r\n\r\nimport AuthContext from '../../context/AuthContext'\r\n\r\nclass Navbar extends Component {\r\n    state = {\r\n        isLoggedIn: false,\r\n        isHidden: false\r\n    }\r\n\r\n    componentDidMount() {\r\n        init();\r\n    }\r\n    \r\n\r\n    static contextType = AuthContext;\r\n\r\n    logout() {\r\n        this.context.logout();\r\n        window.location.href = process.env.PUBLIC_URL + '/app/login'\r\n    }\r\n\r\n    render() {\r\n        const { isHiiden } = this.state;\r\n\r\n        const token = ls.get('token');\r\n        console.log(token);\r\n        \r\n        let isLoggedIn = token !== '';\r\n\r\n        return (\r\n            <nav>\r\n                <div className=\"toggle-view\" id=\"toggle-view\">\r\n                    <FontAwesomeIcon className=\"icon\" icon={ faChevronLeft } />\r\n                </div>\r\n                <div className=\"nav-item nav-top\">\r\n                    <a href=\"/\">\r\n                        <h2 className=\"logo\"><img src={ Logo } alt=\"\"/> <span className=\"text\">EasyTest</span></h2>\r\n                    </a>\r\n                </div>\r\n                { \r\n                    isLoggedIn && (\r\n                        <div className=\"nav-item nav-middle\">\r\n                            <NavLink exact className=\"nav-link\" to={\"/app/\"}><FontAwesomeIcon className=\"icon\" icon={ faHome } /> <span className=\"text\">Home</span></NavLink>\r\n                            <NavLink className=\"nav-link\" to={\"/app/allTests\"}><FontAwesomeIcon className=\"icon\" icon={ faAlignLeft } /><span className=\"text\"> Tests</span></NavLink>\r\n                            <NavLink className=\"nav-link\" to={\"/app/createTest\"}><FontAwesomeIcon className=\"icon\" icon={ faPenAlt } /> <span className=\"text\">Create Test</span></NavLink>\r\n                        </div>\r\n                    )\r\n                }\r\n                \r\n                <div className=\"nav-item nav-bottom\">\r\n                    { !isLoggedIn && (\r\n                        <>\r\n                            <NavLink className=\"nav-link\" to={\"/app/login\"}><FontAwesomeIcon className=\"icon\" icon={ faSignInAlt } /> <span className=\"text\">Login</span></NavLink>\r\n                            <NavLink className=\"nav-link\" to={\"/app/register\"}><FontAwesomeIcon className=\"icon\" icon={ faUserPlus } /> <span className=\"text\">Register</span></NavLink>\r\n                        </>\r\n                    ) }\r\n                    { isLoggedIn && (\r\n                        <button className=\"nav-link\" onClick={ this.logout.bind(this) } ><FontAwesomeIcon className=\"icon\" icon={ faSignOutAlt } /> <span className=\"text\">Logout</span></button>\r\n                    ) }                    \r\n                </div>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar","import React, { Component } from 'react'\r\n\r\nimport './css/style.css'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCrown } from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport default class StatusIcon extends Component {\r\n    render() {\r\n        const { percent } = this.props;\r\n\r\n        let extraClassName = '';\r\n\r\n        if (percent >= 85)\r\n            extraClassName = 'excellent';\r\n        else if (percent >= 65)\r\n            extraClassName = 'good';\r\n        else if (percent >= 40)\r\n            extraClassName = 'satisfactory';\r\n        else extraClassName = 'bad';\r\n\r\n        return (\r\n            <span className={ `status-icon ${ extraClassName }` }>\r\n                <FontAwesomeIcon icon={ faCrown } />\r\n            </span>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport dateFormat from 'dateformat';\r\n\r\nimport AuthContext from '../../../context/AuthContext';\r\nimport { Redirect } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default class Table extends Component {\r\n\r\n    state = {\r\n        isRedirectToTest: false,\r\n        testToRedirect: null,\r\n        isRedirectToResult: false\r\n    }\r\n\r\n    static contextType = AuthContext;\r\n\r\n    redirectToResult(test) {\r\n        this.setState({\r\n            ...this.state,\r\n            testToRedirect: test,\r\n            isRedirectToResult: true\r\n        })\r\n    }\r\n\r\n    redirectToTest(test) {\r\n        this.setState({\r\n            ...this.state,\r\n            testToRedirect: test,\r\n            isRedirectToTest: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { isRedirectToResult, isRedirectToTest, testToRedirect } = this.state;\r\n        const { tests } = this.props;\r\n\r\n        if (isRedirectToResult) return (\r\n            <Redirect to={ `/app/testResult/${ this.context.user._id }/${ testToRedirect._id }` } />\r\n        )\r\n\r\n        if (isRedirectToTest) return (\r\n            <Redirect to={ `/app/testInfo/${ testToRedirect._id }` } />\r\n        )\r\n\r\n        return (\r\n            <div className=\"results-table\">\r\n                <div className=\"row head\">\r\n                    <div className=\"cell title\">Test name</div>\r\n                    <div className=\"cell subject\">Date</div>\r\n                    <div className=\"cell attempt\">Attempt No.</div>\r\n                    <div className=\"cell points\">Points</div>\r\n                    <div className=\"cell points average\">Average</div>\r\n                </div>\r\n                {\r\n                    tests.map(test => {\r\n                        return (\r\n                            <div className=\"row\" onClick={ () => this.redirectToResult(test, 'fullDate') }>\r\n                                <Link to={ `/app/testInfo/${ test.testId }` } className=\"cell title\">{ test.title }</Link>\r\n                                <div className=\"cell subject\">{ dateFormat(test.date, 'dd.mm.yyyy, hh:mm') }</div>\r\n                                <div className=\"cell attempt\">{ test.attempt }</div>\r\n                                <div className=\"cell points\">{ test.points }/{ test.maxPoints } ({ Math.floor(test.points / test.maxPoints * 100) }%)</div>\r\n                                <div className=\"cell points average\">{ test.avgPoints }/{ test.maxPoints } ({ Math.floor(test.avgPoints / test.maxPoints * 100) }%)</div>\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nimport AuthContext from '../../context/AuthContext'\r\nimport { getHeaders } from '../../middleware/authMiddleware';\r\nimport Spinner from '../Spinner/Spinner';\r\nimport Table from './ResultsTable/Table';\r\nimport TestsContext from '../../context/TestsContext';\r\n\r\nexport default class ResultsTable extends Component {\r\n\r\n    state = {\r\n        results: [],\r\n        tests: [],\r\n        isLoading: true,\r\n        left: 0,\r\n        right: 5,\r\n        isRedirectToLogin: false,\r\n        isMoreTests: true\r\n    }\r\n\r\n    static contextType = TestsContext;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    loadTests() {\r\n        let { left, right, tests, isMoreTests } = this.state;\r\n        let { authContext } = this.props;\r\n\r\n        console.log(left, right)\r\n\r\n        for (let i = left; i < Math.min(tests.length, right); i++) {\r\n            let currTest = tests[i];\r\n            console.log(i)\r\n\r\n            fetch(`${ authContext.proxy }/api/tests/testInfo/${ currTest.testId }`, {\r\n                headers: {\r\n                    ...getHeaders()\r\n                }\r\n            })\r\n                .then(res => res.json())\r\n                .then(res => {\r\n                    if (res.isTokenError) {\r\n                        authContext.logout();\r\n                        this.setState({\r\n                            ...this.state,\r\n                            isRedirectToLogin: true\r\n                        })\r\n                        return true;\r\n                    }\r\n                    let testResults = res.results;\r\n                    console.log(testResults)\r\n                    let avgPoints = 0;\r\n                    testResults.forEach(result => {\r\n                        avgPoints += +result.points;\r\n                    })\r\n                    avgPoints = Math.floor(avgPoints / testResults.length);\r\n                    console.log(avgPoints)\r\n                    currTest = {\r\n                        ...currTest,\r\n                        avgPoints,\r\n                        subject: res.subject\r\n                    };\r\n                    \r\n                    tests[i] = currTest;\r\n                    this.setState({\r\n                        ...this.state,\r\n                        tests\r\n                    })\r\n                    console.log(currTest)\r\n                })\r\n                .then(() => {\r\n                    if (i + 1 === Math.min(tests.length, right)) {\r\n                        this.context.results = tests.slice(0, right);\r\n                        left = right;\r\n                        right += 5;\r\n                        if (left >= tests.length) \r\n                            isMoreTests = false;\r\n                        this.setState({\r\n                            ...this.state,\r\n                            tests,\r\n                            left,\r\n                            right,\r\n                            isMoreTests\r\n                        }, () => console.log('okokokok'))\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    componentWillMount() {\r\n        let { user } = this.props;\r\n        let tests = [];\r\n        let testsMap = new Map();\r\n\r\n        let { results } = this.context;\r\n\r\n        user.passedTests.forEach(test => {\r\n            let currAttempts = testsMap.get(test.testId);\r\n            if (!currAttempts) \r\n                currAttempts = 0;\r\n            currAttempts++;\r\n            testsMap.set(test.testId, currAttempts);\r\n            let totalAttempts = user.passedTests.filter(passedTest => passedTest.testId === test.testId).length;\r\n            test = {\r\n                ...test,\r\n                attempt: totalAttempts + 1 - currAttempts,\r\n            }\r\n            tests.push(test);\r\n        })\r\n\r\n        if (results) {\r\n            for (let i = 0; i < results.length; i++) {\r\n                let result = results[i];\r\n                tests[i] = result;\r\n            }\r\n\r\n            this.setState({\r\n                ...this.state,\r\n                tests,\r\n                left: results.length,\r\n                right: results.length + 5\r\n            })\r\n\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            tests\r\n        }, () => {\r\n            this.loadTests()\r\n        })\r\n        \r\n        \r\n    }\r\n    \r\n\r\n    render() {\r\n        const { tests, left, right, isMoreTests } = this.state;\r\n\r\n        if (!tests.length) return <Spinner size=\"md\" />\r\n\r\n        let testsToShow = tests.slice(0, left);\r\n\r\n        return (\r\n            <div>\r\n                <Table tests={ testsToShow } />\r\n                {\r\n                    isMoreTests && (\r\n                        <button className=\"load-more\" onClick={ () => this.loadTests() }>Load more</button>\r\n                    )\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component, Suspense } from 'react'\r\nimport Spinner from '../Spinner/Spinner'\r\nimport { getHeaders } from '../../middleware/authMiddleware'\r\n\r\nimport AuthContext from '../../context/AuthContext'\r\n\r\nimport StatusIcon from '../reusableComponents/StatusIcon'\r\nimport ResultsTable from './ResultsTable'\r\n\r\nimport './css/style.css'\r\n\r\nconst TestsContainer = React.lazy(() => import('../reusableComponents/tests/TestsContainer'))\r\n\r\nexport default class Profile extends Component {\r\n    state = {\r\n        user: null,\r\n        passedTests: [],\r\n        avgResult: null,\r\n        isLoading: true,\r\n        nextLinkVal: null\r\n    }\r\n\r\n    static contextType = AuthContext;\r\n\r\n    componentDidMount() {\r\n        fetch(`${ this.context.proxy }/api/users/user`, {\r\n            headers: getHeaders()\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                if (res.isTokenError) {\r\n                    this.context.logout();\r\n                    window.location.href = '/app/login';\r\n                }\r\n                console.log(res.passedTests);\r\n                \r\n                res.passedTests.reverse();\r\n\r\n                let avgResult = 0;\r\n                if (res.passedTests.length) {\r\n                    res.passedTests.forEach(test => {\r\n                        avgResult += test.points / test.maxPoints;\r\n                    })\r\n                    avgResult /= res.passedTests.length;\r\n                    avgResult = Math.floor(avgResult * 100);\r\n                }\r\n\r\n                this.setState({\r\n                    user: res,\r\n                    avgResult,\r\n                    isLoading: false,\r\n                })\r\n            })\r\n    }\r\n\r\n    render() {\r\n        const { user, isLoading, avgResult } = this.state;\r\n\r\n        console.log(user)\r\n\r\n        if (isLoading || !user) return (\r\n            <Spinner />\r\n        )\r\n\r\n        const urlToFetch = `${ this.context.proxy }/api/tests/passedTests/${ user._id }`;\r\n\r\n        return (\r\n            <>\r\n                <h1 className=\"heading\">\r\n                    Hello, { user.name }!\r\n                </h1>\r\n                <div className=\"profile-block\">\r\n                    <div className=\"profile-img\">\r\n                        <img src=\"/img/profile-img.svg\" alt=\"\"/>\r\n                    </div>\r\n                    <div className=\"profile-info\">\r\n                        <div className=\"profile-info__block\">\r\n                            <span className=\"info-text\">Name: <StatusIcon percent={ avgResult } /> { user.name }</span>\r\n                        </div>\r\n                        <div className=\"profile-info__block\">\r\n                            <span className=\"info-text\">Tests passed: { user.passedTests.length }</span>\r\n                        </div>\r\n                        <div className=\"profile-info__block\">\r\n                            <span className=\"info-text\">Average result: { avgResult }%</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                { user.passedTests.length > 0 ? ( <h2>Your recent tests: </h2> ) : ( <h2>You haven't passed any tests yet!</h2> ) }\r\n                <ResultsTable authContext={ this.context } user={ user } />\r\n                {/* { <Suspense fallback={ <Spinner /> }>\r\n                    <TestsContainer type=\"result\" urlToFetch={ urlToFetch } user={ user } />\r\n                </Suspense> } */}\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React, { Component, Suspense } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nimport AuthContext from '../../context/AuthContext'\r\nimport Spinner from '../Spinner/Spinner'\r\n\r\nimport './css/style.css'\r\n\r\nconst TestsContainer = React.lazy(() => import('../reusableComponents/tests/TestsContainer'))\r\n\r\nexport default class Tests extends Component {\r\n    state = {\r\n        isLoading: false,\r\n        tests: [],\r\n        isRedirectToLogin: false,\r\n        left: 0,\r\n        right: 3,\r\n        isMoreTests: true\r\n    }\r\n\r\n    static contextType = AuthContext;       \r\n\r\n    render() {\r\n        const { isLoading, isRedirectToLogin } = this.state;\r\n\r\n        const linkToFetch = `${ this.context.proxy }/api/tests/allTests`;\r\n\r\n        if (isRedirectToLogin) return (\r\n            <Redirect to=\"/app/login\" />\r\n        )\r\n\r\n        if (isLoading) return (\r\n            <Spinner />\r\n        )\r\n\r\n        return (\r\n            <>\r\n                <h1 className=\"heading\">Recent tests: </h1>\r\n                <Suspense fallback={ <Spinner /> }>\r\n                    <TestsContainer \r\n                        urlToFetch={ linkToFetch }\r\n                        authContext={ this.context }\r\n                        type={ \"full\" } />\r\n                </Suspense>\r\n                \r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nimport './css/style.css'\r\n\r\nconst Input = ({ name, onChange, type, isMini, value }) => {\r\n    const handleChange = (e) => {\r\n        console.log(e);\r\n        onChange(e);\r\n    }\r\n\r\n    const extraClassName = isMini ? 'mini' : '';\r\n\r\n    return (\r\n        <div className={ \"input-group \" + extraClassName}>\r\n            <input value={ value } autoComplete={ isMini ? \"off\" : \"on\" } className={ extraClassName } type={ type } name={ name } onChange={ (e) => handleChange(e) } />\r\n            <label htmlFor={ name }></label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input\r\n","import React from 'react'\r\nimport { useHistory, Link } from 'react-router-dom'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport './css/style.css'\r\n\r\nconst BackLink = ({ link }) => {\r\n    let history = useHistory();\r\n\r\n    if (link) return (\r\n        <div className=\"page-top\">\r\n            <Link to={ link } className=\"a\">\r\n                <FontAwesomeIcon icon={ faArrowLeft } /> Back \r\n            </Link>\r\n        </div>\r\n    )\r\n\r\n    return (\r\n        <div className=\"page-top\">\r\n            <span onClick={ () => history.goBack() } className=\"a\">\r\n                <FontAwesomeIcon icon={ faArrowLeft } /> Back \r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BackLink;","import React, { Component } from 'react'\r\n\r\n// ChartJS\r\nimport { Bar } from 'react-chartjs-2'\r\n\r\nexport default class ResultsChart extends Component {\r\n\r\n\r\n\r\n    render() {\r\n        const { results, userId } = this.props;\r\n\r\n        let labels = [];\r\n        let labelsMap = new Map();\r\n        let userPoints = -1;\r\n\r\n        results.forEach(result => {\r\n            if (result.userId === userId) \r\n                userPoints = Math.max(userPoints, result.points);\r\n            if (!labelsMap.get(result.points)) {\r\n                labelsMap.set(result.points, 1);\r\n                labels.push(result.points);\r\n            } else {\r\n                let el = labelsMap.get(result.points);\r\n                labelsMap.set(result.points, el + 1);\r\n            }\r\n        })\r\n\r\n        labels.sort();\r\n\r\n        let barColor = 'rgba(0, 0, 0, .05)';\r\n        let borderColor = 'rgba(0, 0, 0, .3)';\r\n        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\r\n            barColor = 'rgba(255, 255, 255, .05)';\r\n            borderColor = 'rgba(255, 255, 255, 1)';\r\n        } \r\n\r\n        let pointsData = [];\r\n        let barColors = [];\r\n        console.log(userPoints)\r\n        labels.forEach(label => {\r\n            let points = labelsMap.get(label);\r\n            pointsData.push(points);\r\n            console.log(label)\r\n            if (+label === userPoints) {\r\n                barColors.push('rgba(42, 150, 71, .2)'); \r\n                console.log('object')\r\n            }\r\n            else \r\n            barColors.push(barColor);\r\n        })\r\n\r\n        const options = {\r\n            scales: {\r\n                yAxes: [{\r\n                    ticks: {\r\n                        beginAtZero: true,\r\n                        callback: function(value) {if (value % 1 === 0) {return value;}}\r\n                    }\r\n                }]\r\n            },\r\n            legend: {\r\n                display: false\r\n            }\r\n        };\r\n\r\n        const data = (canvas) => {\r\n            const ctx = canvas.getContext(\"2d\")\r\n            const gradient = ctx.createLinearGradient(0,0,100,0);\r\n            return {\r\n                labels,\r\n                datasets: [\r\n                    {\r\n                        data: pointsData,\r\n                        fill: false,\r\n                        backgroundColor: barColors,\r\n                        borderColor: borderColor,\r\n                        maxBarThickness: 60,\r\n                        borderWidth: 1,\r\n                    },\r\n                ],\r\n            }\r\n        }        \r\n\r\n        return (\r\n            <div className=\"chart-container\">\r\n                <Bar data={ data } options={ options } />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport Spinner from '../Spinner/Spinner'\r\n\r\nimport PointsCard from '../reusableComponents/PointsCard'\r\nimport Input from '../reusableComponents/inputField/Input'\r\n\r\nimport { convertTime } from '../../middleware/convertTime'\r\n\r\nimport './css/style.css'\r\n\r\nimport AuthContext from '../../context/AuthContext'\r\nimport { getHeaders } from '../../middleware/authMiddleware';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faThumbsUp } from '@fortawesome/free-regular-svg-icons'\r\nimport { faThumbsUp as faThumbsUpS } from '@fortawesome/free-solid-svg-icons'\r\nimport BackLink from '../reusableComponents/backLink/BackLink';\r\nimport ResultsChart from './ResultsChart';\r\n\r\nexport default class TestInfo extends Component {\r\n    state = {\r\n        isLoading: true,\r\n        test: null,\r\n        testResults: null,\r\n        usernames: null,\r\n        errors: [],\r\n        isRedirectToLogin: false,\r\n        hasLiked: false\r\n    };\r\n\r\n    static contextType = AuthContext;\r\n\r\n    componentDidMount() {\r\n        const testId = this.props.match.params.testId;\r\n        \r\n        fetch(`${ this.context.proxy }/api/tests/testInfo/${ testId }`, {\r\n            headers: {\r\n                ...getHeaders()\r\n            }\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                if (res.isTokenError) {\r\n                    this.context.logout();\r\n                    this.setState({\r\n                        ...this.state,\r\n                        isRedirectToLogin: true\r\n                    })\r\n                } else {\r\n                    let hasLiked = false;\r\n                    if (res.likes.find((like) => like === this.context.userId))\r\n                        hasLiked = true;\r\n                    this.setState({\r\n                        ...this.state,\r\n                        isLoading: false,\r\n                        test: res,\r\n                        hasLiked\r\n                    })\r\n                }\r\n            })\r\n        fetch(`${ this.context.proxy }/api/tests/testResults/${ testId }`)\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                res.testResults.sort((res1, res2) => {\r\n                    return res2.points - res1.points;\r\n                })\r\n                this.setState({\r\n                    isLoading: false,\r\n                    testResults: res.testResults,\r\n                    usernames: res.usernames\r\n                })\r\n            })\r\n    }\r\n\r\n    setAccessKey(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            currentAccessKey: e.target.value\r\n        })\r\n    }\r\n\r\n    goToTest() {\r\n        const { test, errors, testResults } = this.state;\r\n        const { maxAttempts } = test;\r\n        let usedAttemtps = 0;\r\n        testResults.forEach(res => {\r\n            if (res.userId === this.context.userId) \r\n                usedAttemtps++;\r\n        })\r\n        console.log(usedAttemtps, maxAttempts);\r\n        \r\n        if (maxAttempts && usedAttemtps >= maxAttempts) {\r\n            errors['attempts'] = 'You have not got any attempts left!';\r\n            this.setState({\r\n                ...this.state,\r\n                errors\r\n            })\r\n        } else {\r\n            const { currentAccessKey } = this.state;\r\n            const { accessKey, _id, isProtected } = test;\r\n            if (accessKey === currentAccessKey || !isProtected) {\r\n                window.location.href = `/app/passTest/${ _id }`\r\n            } else {\r\n                let { errors } = this.state;\r\n                errors['keyError'] = 'Incorrect access key!';\r\n                this.setState({\r\n                    ...this.state,\r\n                    errors\r\n                })\r\n            }\r\n        }\r\n        \r\n        \r\n    }   \r\n    \r\n    componentDidUpdate() {\r\n        let field = document.querySelector('span.field');\r\n        console.log(field);\r\n        \r\n        if (field && field !== null) field.addEventListener('keypress',function(e){ \r\n            if (e.which === 13) {\r\n                e.preventDefault();\r\n            }\r\n        });\r\n    }\r\n\r\n    setLike() {\r\n        const { test, hasLiked } = this.state;\r\n\r\n        fetch(`${ this.context.proxy }/api/tests/likeTest/${ test._id }`, {\r\n            method: 'POST',\r\n            headers: {\r\n                ...getHeaders,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                isIncrease: !hasLiked,\r\n                userId: this.context.userId\r\n            })\r\n        }) \r\n            .then(res => res.json())\r\n            .then(res => {\r\n                let { test } = this.state;\r\n                test.likes = res.likes;\r\n                console.log(test.likes.length)\r\n                this.setState({\r\n                    ...this.state,\r\n                    test,\r\n                    hasLiked: !hasLiked\r\n                }, () => console.log(this.state.hasLiked))\r\n            })\r\n    }\r\n\r\n    render() {\r\n        const { isLoading, test, testResults, errors, isRedirectToLogin, hasLiked } = this.state;\r\n\r\n        if (isRedirectToLogin) return (\r\n            <Redirect to='/app/login' />\r\n        )\r\n        \r\n        if (isLoading || test === null) return (\r\n            <Spinner />\r\n        )\r\n\r\n        const { maxAttempts, timeLimit } = test;\r\n        let usedAttemtps = 0;\r\n        if (testResults) testResults.forEach(res => {\r\n            if (res.userId === this.context.userId) \r\n                usedAttemtps++;\r\n        })\r\n        const attemtpsLeft = maxAttempts - usedAttemtps;\r\n\r\n        return (\r\n            <div>\r\n                <BackLink />\r\n                <h1>{ test.title }</h1>\r\n                <p>{ test.description }</p>\r\n                { test.isProtected && (\r\n                    //return (\r\n                        <>\r\n                            <br/>\r\n                            <label htmlFor=\"title\">To start the test, you need to type in the secret key!</label> <br/>\r\n                            <Input type=\"text\" name=\"secretKey\" isMini={ true } onChange={ (e) => this.setAccessKey(e) } />\r\n                            {/* <span id=\"field\" className=\"field\" contenteditable=\"true\" onInput={ (e) => this.setAccessKey(e) } type=\"text\" name=\"title\"></span> */}\r\n                            <span className=\"error-input\">{ errors['keyError'] }</span>\r\n                        </>\r\n                    //)\r\n                    \r\n                 ) }\r\n                 { maxAttempts && (\r\n                    <div className=\"attempts-block\">\r\n                        <span className=\"max-attemtts\">Attempts left: { attemtpsLeft }</span>\r\n                    </div>\r\n                 ) }\r\n                 { timeLimit && (\r\n                    <div className=\"attempts-block\">\r\n                        <span className=\"max-attemtts\">Time limit: { convertTime(timeLimit) }</span>\r\n                    </div>\r\n                 ) }\r\n                <br/>\r\n                {/* <Link class=\"btn btn-cta\" to={ `/app/passTest/${ test._id }` }>\r\n                    Pass test!\r\n                </Link> */}\r\n                <span className=\"error-input\">{ errors['attempts'] }</span>\r\n                <div className=\"btn-block\">\r\n                    <button onClick={ () => this.goToTest() } className=\"btn btn-cta\">Pass test!</button>\r\n                    <button className=\"btn like-btn\" onClick={ this.setLike.bind(this) } icon={ faThumbsUp }> \r\n                        <FontAwesomeIcon className=\"icon\" icon={ hasLiked ? faThumbsUpS : faThumbsUp } />\r\n                        <span>{ test.likes.length }</span>\r\n                    </button>\r\n                </div>\r\n                \r\n                <div className=\"results\">\r\n                    <h3>Results: </h3>\r\n                    {\r\n                        test.results.length ? (\r\n                            <ResultsChart results={ test.results } userId={ this.context.user._id } />\r\n                        ) : (\r\n                            <h2>No one has passed the test yet!</h2>\r\n                        )\r\n                    }\r\n                    \r\n                    {/* <table>\r\n                        <col className=\"username\" />\r\n                        <col className=\"points\" />\r\n                        <tr>\r\n                            <th className=\"user\">User</th>\r\n                            <th className=\"points\">Time</th>\r\n                            <th className=\"points\">Points</th>\r\n                        </tr>\r\n                        { testResults === null ? () => {\r\n                            return (\r\n                                <Spinner />\r\n                            )\r\n                        } : testResults.map(res => {                            \r\n                            return (\r\n                                <tr className='resultTr' key={ res.userId + res.points }>\r\n                                    <td className=\"user\">{ res.username }</td>\r\n                                    <td className=\"points time\">\r\n                                        { res.time ? ( \r\n                                            <span>{ convertTime(res.time) }</span>\r\n                                        ) : (\r\n                                            <span>---</span>\r\n                                        ) }\r\n                                    </td>\r\n                                    <td className=\"points\">\r\n                                        <PointsCard points={ res.points } maxPoints={ res.answers.length } />\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        }) }\r\n                    </table> */}\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component, Suspense } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport AuthContext from '../../context/AuthContext'\r\nimport Spinner from '../Spinner/Spinner';\r\nimport TestsContainer from '../reusableComponents/tests/TestsContainer'\r\n\r\nexport default class CreateTest extends Component {\r\n    state = {\r\n        createdTests: [],\r\n        isLoading: false\r\n    }\r\n\r\n    static contextType = AuthContext;\r\n\r\n    componentDidMount() {\r\n        if (!this.context.userId) \r\n            window.location.href = '/app/login';\r\n        fetch(`${ this.context.proxy }/api/tests/createdTests/${ this.context.userId }`, {\r\n            method: 'POST'\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                \r\n                this.setState({\r\n                    createdTests: res.tests,\r\n                    isLoading: false\r\n                })\r\n            })\r\n    }\r\n    \r\n    render() {\r\n        const { createdTests, isLoading } = this.state;\r\n\r\n        if (isLoading) return (\r\n            <Spinner />\r\n        )\r\n\r\n        let urlToFetch = `${ this.context.proxy }/api/tests/createdTests/${ this.context.userId }`;\r\n\r\n        return (\r\n            <>\r\n                <h1 className=\"heading\">\r\n                    Currently, you have { createdTests.length } created tests\r\n                </h1>\r\n                <Link to=\"/app/createTestForm\" className=\"btn btn-cta\">\r\n                    New test\r\n                </Link>\r\n                { <Suspense fallback={ <Spinner /> }>\r\n                    <TestsContainer type=\"created\" urlToFetch={ urlToFetch } user={ null } />\r\n                </Suspense> }\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nimport Spinner from '../Spinner/Spinner'\r\n\r\nimport './css/style.css'\r\n\r\nimport AuthContext from '../../context/AuthContext'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCheckCircle, faTimesCircle } from '@fortawesome/free-regular-svg-icons'\r\nimport BackLink from '../reusableComponents/backLink/BackLink'\r\n\r\nexport default class TestResult extends Component {\r\n    state = {\r\n        isLoading: true,\r\n        test: null,\r\n        answers: null\r\n    }\r\n\r\n    static contextType = AuthContext;\r\n\r\n    componentDidMount() {\r\n        const userId = this.props.match.params.userId;\r\n        const resultId = this.props.match.params.resultId;\r\n        \r\n        fetch(`${ this.context.proxy }/api/tests/testResult/${ userId }/${ resultId }`)\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                \r\n                this.setState({\r\n                    isLoading: false,\r\n                    answers: res.answers,\r\n                    test: res.test\r\n                })\r\n            })\r\n    }\r\n    \r\n\r\n    render() {\r\n        const { isLoading, test, answers } = this.state;\r\n        if (test) console.log(test.questions[0]);\r\n        console.log(answers);\r\n        console.log(this.props)\r\n        \r\n        \r\n\r\n        if (isLoading) return (\r\n            <Spinner />\r\n        )\r\n\r\n        return (\r\n            <div>\r\n                <BackLink link=\"/app\" />\r\n                <h1 className=\"heading\">\r\n                    Test result for \"{ test.title }\"\r\n                </h1>\r\n                <div className=\"result-table\">\r\n                    <table>\r\n                        <col className=\"main\" />\r\n                        { answers.map(ans => {\r\n                            return (\r\n                                <col className=\"answer\" />\r\n                            )\r\n                        }) }\r\n                        <tr className=\"first\">\r\n                            <th className=\"first main\">Question No.</th>\r\n                            { answers.map((ans, inx) => {\r\n                                return (\r\n                                    <th className=\"first ans\">{ inx + 1 }</th>\r\n                                )\r\n                            }) }\r\n                        </tr>\r\n                        <tr>\r\n                            <th className=\"main\">Result: </th>\r\n                            { answers.map((ans, inx) => {\r\n                                let extraClassName = '';\r\n                                console.log(toString(ans));\r\n                                \r\n                                let isCorrect = ans.toString() === test.questions[inx].correctAnswerId;\r\n                                \r\n                                if (parseInt(ans) === parseInt(test.questions[inx].correctAnswerId)) \r\n                                    extraClassName = 'correct';\r\n                                else \r\n                                    extraClassName = 'wrong'\r\n                                return (\r\n                                    <th className={ `answerr ans ${ extraClassName }` }>{ isCorrect ? (<FontAwesomeIcon className=\"icon\" icon={ faCheckCircle } /> ) : (<FontAwesomeIcon className=\"icon\" icon={ faTimesCircle } />) }</th>\r\n                                )\r\n                            }) }\r\n                        </tr>\r\n                    </table>\r\n                </div>\r\n                { answers.map((ans, inx) => {\r\n                    let isCorrect = ans.toString() === test.questions[inx].correctAnswerId;\r\n                    console.log(test.questions);\r\n                    \r\n                    let extraClassName = '';\r\n                    if (!isCorrect) extraClassName = 'wrong';\r\n                    let question = test.questions[inx];\r\n                    console.log(question.answers[parseInt(question.correctAnswerId)]);\r\n                    \r\n                    return (\r\n                        <div className=\"question-ans\">\r\n                            <h3>{ inx + 1 }. { question.title }</h3>\r\n                            { ans ===  0 ? (\r\n                                <span className={ \"ans-text \" + extraClassName}>\r\n                                    Your answer: -\r\n                                </span>\r\n                            ) : (\r\n                                <span className={ \"ans-text \" + extraClassName}>\r\n                                    Your answer: { ans }) { question.answers[ans - 1].text }\r\n                                </span>\r\n                            ) } \r\n                            <span className=\"ans-text\">\r\n                                Correct answer: { question.correctAnswerId }) { question.answers[parseInt(question.correctAnswerId) - 1].text }\r\n                            </span>                           \r\n                        </div>\r\n                    )\r\n                }) }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class ConfirmModal extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"modal-wrapper\">\r\n                <div className=\"modal-overlay\"></div>\r\n                <div className=\"modal-card\">\r\n                    <div className=\"card-top\">\r\n                        <div className=\"icon\">\r\n                            <img src='/img/questionmark.svg' alt=\"\"/>\r\n                        </div>\r\n                        <div className=\"text\">\r\n                            { this.props.message }\r\n                        </div>\r\n                    </div>\r\n                    {/* <div className=\"card-middle\">\r\n                        { this.props.message }\r\n                    </div> */}\r\n                    <div className=\"card-buttons\">\r\n                        <button onClick={ () => this.props.setModalChoice(true) } className=\"cta\">{ this.props.positiveChoice }</button>\r\n                        <button onClick={ () => this.props.setModalChoice(false) } className=\"\">{ this.props.negativeChoice }</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport ls from 'local-storage'\r\n\r\nimport Spinner from '../Spinner/Spinner'\r\nimport Input from '../reusableComponents/inputField/Input'\r\n\r\nimport AuthContext from '../../context/AuthContext'\r\n\r\nimport './css/style.css'\r\n\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCheck } from '@fortawesome/free-solid-svg-icons'\r\nimport ConfirmModal from '../reusableComponents/ConfirmModal/ConfirmModal'\r\n\r\nexport default class CreateTestForm extends Component {\r\n    state = {\r\n        questions: [{\r\n            title: '',\r\n            answers: [{\r\n                text: '',\r\n                answerId: '1'\r\n            }, {\r\n                text: '',\r\n                answerId: '2'\r\n            }],\r\n            correctAnswerId: '1'\r\n        }],\r\n        title: '',\r\n        description: '',\r\n        subject: '',\r\n        isProtected: false,\r\n        accessKey: '',\r\n        creator: this.context.userId,\r\n        timeErrorMsg: '',\r\n        isLoading: false,\r\n        errors: [],\r\n        maxAttempts: null,\r\n        isLimitedAttempts: false,\r\n        isLimitedTime: false,\r\n        timeLimit: null,\r\n        answerToLoadTest: undefined,\r\n        hasSavedTest: false\r\n    }\r\n\r\n    static contextType = AuthContext;\r\n\r\n    componentDidMount() {\r\n                \r\n        var x, i, selElmnt, a, b, c;\r\n        /* Look for any elements with the class \"custom-select\": */\r\n        x = document.getElementsByClassName('custom-select');\r\n        console.log(x);\r\n\r\n        let savedTest = ls.get('savedTestToCreate');\r\n\r\n        if (savedTest) {\r\n            this.setState({\r\n                ...this.state,\r\n                hasSavedTest: true\r\n            })\r\n        }\r\n\r\n        let timeValues = [5 * 60, 10 * 60, 20 * 60, 30 * 60, 1 * 60 * 60, 1.5 * 60 * 60];\r\n\r\n        const setst = (j) => {\r\n            console.log(\"hhhh\");\r\n            \r\n            this.setState({\r\n                ...this.state,\r\n                timeLimit: timeValues[j - 1]\r\n            }, () => console.log(this.state))\r\n        }\r\n\r\n        for (i = 0; i < x.length; i++) {\r\n            selElmnt = x[i].getElementsByTagName('select')[0];\r\n            /* For each element, create a new DIV that will act as the selected item: */\r\n            a = document.createElement('DIV');\r\n            a.setAttribute('class', 'select-selected');\r\n            a.innerHTML = selElmnt.options[selElmnt.selectedIndex].innerHTML;\r\n            x[i].appendChild(a);\r\n            /* For each element, create a new DIV that will contain the option list: */\r\n            b = document.createElement('DIV');\r\n            b.setAttribute('class', 'select-items select-hide');\r\n            for (let j = 1; j < selElmnt.length; j++) {\r\n                /* For each option in the original select element,\r\n            create a new DIV that will act as an option item: */\r\n                c = document.createElement('DIV');\r\n                c.innerHTML = selElmnt.options[j].innerHTML;\r\n                console.log(selElmnt);\r\n                \r\n                c.addEventListener('click', function(e) {\r\n                    /* When an item is clicked, update the original select box,\r\n                and the selected item: */\r\n                    \r\n                    var y, i, k, s, h;\r\n                    s = this.parentNode.parentNode.getElementsByTagName('select')[0];\r\n                    h = this.parentNode.previousSibling;\r\n                    console.log(timeValues[j - 1]);\r\n                    // this.setState({\r\n                    //     ...this.state,\r\n                    //     timeLimit: timeValues[j - 1]\r\n                    // })\r\n                    \r\n                    \r\n                    for (i = 0; i < s.length; i++) {\r\n                        if (s.options[i].innerHTML === this.innerHTML) {\r\n                            s.selectedIndex = i;\r\n\r\n                            h.innerHTML = this.innerHTML;\r\n                            y = this.parentNode.getElementsByClassName(\r\n                                'same-as-selected'\r\n                            );\r\n                            for (k = 0; k < y.length; k++) {\r\n                                y[k].removeAttribute('class');\r\n                            }\r\n                            this.setAttribute('class', 'same-as-selected');\r\n                            break;\r\n                        }\r\n                    }\r\n                    h.click();\r\n\r\n                    setst(j);\r\n                });\r\n                b.appendChild(c);\r\n            }\r\n            x[i].appendChild(b);\r\n            a.addEventListener('click', function(e) {\r\n                /* When the select box is clicked, close any other select boxes,\r\n            and open/close the current select box: */\r\n                e.stopPropagation();\r\n                closeAllSelect(this);\r\n                this.nextSibling.classList.toggle('select-hide');\r\n                this.classList.toggle('select-arrow-active');\r\n            });\r\n        }\r\n\r\n        function closeAllSelect(elmnt) {\r\n            /* A function that will close all select boxes in the document,\r\n        except the current select box: */\r\n            var x,\r\n                y,\r\n                i,\r\n                arrNo = [];\r\n            x = document.getElementsByClassName('select-items');\r\n            y = document.getElementsByClassName('select-selected');\r\n            for (i = 0; i < y.length; i++) {\r\n                if (elmnt === y[i]) {\r\n                    arrNo.push(i);\r\n                } else {\r\n                    y[i].classList.remove('select-arrow-active');\r\n                }\r\n            }\r\n            for (i = 0; i < x.length; i++) {\r\n                if (arrNo.indexOf(i)) {\r\n                    x[i].classList.add('select-hide');\r\n                }\r\n            }\r\n        }\r\n\r\n        document.addEventListener('click', closeAllSelect);\r\n    }\r\n    \r\n\r\n    handleAddAnswer(quesId) {\r\n        const { questions } = this.state;        \r\n        let len = questions[quesId].answers.length;\r\n        console.log(len.toString());\r\n        \r\n        if (questions[quesId].answers.length === 6) return;\r\n        questions[quesId].answers.push({\r\n            text: '',\r\n            answerId: (len + 1).toString()\r\n        })\r\n        console.log(questions[quesId].answers);\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        }, () => {\r\n            ls.set('savedTestToCreate', this.state);\r\n        })\r\n\r\n    }\r\n\r\n    handleAddQuestion() {\r\n        const { questions } = this.state;\r\n        if (questions.length === 20) return;\r\n        questions.push({\r\n            title: '',\r\n            answers: [{\r\n                text: '',\r\n                answerId: '1'\r\n            }, {\r\n                text: '',\r\n                answerId: '2'\r\n            }],\r\n            correctAnswerId: '1'\r\n        }) \r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        }, () => {\r\n            ls.set('savedTestToCreate', this.state);\r\n        })\r\n    }\r\n\r\n    setQuestionTitle(e, index) {\r\n        let { questions } = this.state;\r\n        questions[index].title = e.target.value;\r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        }, () => {\r\n            ls.set('savedTestToCreate', this.state);\r\n        });\r\n    }\r\n\r\n    setAnswerText(e, index, inx) {\r\n        console.log(e.target.value);\r\n        \r\n        let { questions } = this.state;\r\n        console.log(questions[index].answers, inx);\r\n        questions[index].answers[inx].text = e.target.value;\r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        }, () => {\r\n            ls.set('savedTestToCreate', this.state);\r\n        })\r\n    }\r\n\r\n    setTestTitle(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            title: e.target.value\r\n        }, () => {\r\n            ls.set('savedTestToCreate', this.state);\r\n        })\r\n    }\r\n\r\n    setTestDescription(e) {        \r\n        this.setState({\r\n            ...this.state,\r\n            description: e.target.value\r\n        }, () => {\r\n            ls.set('savedTestToCreate', this.state);\r\n        })\r\n    }\r\n\r\n    setTestSubject(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            subject: e.target.value\r\n        }, () => {\r\n            ls.set('savedTestToCreate', this.state);\r\n        })\r\n    }\r\n\r\n    setProtectedState(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            isProtected: !this.state.isProtected,\r\n            accessKey: ''\r\n        }, () => {\r\n            ls.set('savedTestToCreate', this.state);\r\n        })\r\n    }\r\n\r\n    setAttemptsState(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            isLimitedAttempts: !this.state.isLimitedAttempts,\r\n            maxAttempts: 1\r\n        }, () => {\r\n            ls.set('savedTestToCreate', this.state);\r\n        })\r\n    }\r\n\r\n    setTimeLimitState(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            isLimitedTime: !this.state.isLimitedTime,\r\n            timeLimit: null\r\n        }, () => {\r\n            ls.set('savedTestToCreate', this.state);\r\n        })\r\n    }\r\n\r\n    setAccessKey(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            accessKey: e.target.value\r\n        }, () => {\r\n            ls.set('savedTestToCreate', this.state);\r\n        })\r\n    }\r\n\r\n    setAttemptsNumber(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            maxAttempts: parseInt(e.target.value)\r\n        }, () => {\r\n            ls.set('savedTestToCreate', this.state);\r\n        })\r\n        \r\n    }\r\n\r\n    changeAttemptsNumber(value) {\r\n        let { maxAttempts } = this.state;\r\n\r\n        if (value > 0) \r\n            maxAttempts = Math.min(maxAttempts + value, 10);\r\n        else \r\n            maxAttempts = Math.max(maxAttempts + value, 1);\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            maxAttempts\r\n        }, () => {\r\n            ls.set('savedTestToCreate', this.state);\r\n        })\r\n    }\r\n\r\n    setCorrectAnswerId(quesIndex, ansId) {\r\n        let { questions } = this.state;\r\n        questions[quesIndex].correctAnswerId = ansId;\r\n        console.log(ansId);\r\n        \r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        }, () => {\r\n            ls.set('savedTestToCreate', this.state);\r\n        })\r\n    }\r\n\r\n    handleAddTest() {\r\n        this.setState({\r\n            ...this.state,\r\n            isLoading: true\r\n        })\r\n\r\n        let newTest = this.state;\r\n        \r\n        console.log(this.state);\r\n        \r\n        let errors = [];\r\n\r\n        if (!newTest.title) \r\n            errors['title'] = 'The test must have a title'\r\n        if (!newTest.subject) \r\n            errors['subject'] = 'The test must have a subject'\r\n        newTest.questions.map(ques => {\r\n            if (!ques.title) \r\n                errors['questions'] = 'Questions must not be empty';\r\n            ques.answers.map(ans => {\r\n                if (!ans.text) \r\n                    errors['answers'] = 'Answers must not be empty';\r\n                return true;\r\n            })\r\n            return true;\r\n        })\r\n\r\n        if (errors['title'] || errors['subject'] || errors['questions'] || errors['answers']) {\r\n            this.setState({\r\n                ...this.state,\r\n                errors\r\n            });\r\n            return;\r\n        }\r\n\r\n        let isErrors = false;\r\n\r\n        if (newTest.title.length >= 30) {\r\n            errors['title'] = 'Title must not be longer than 30 syllables';\r\n            isErrors = true;\r\n        }\r\n        if (newTest.subject.length >= 18) {\r\n            errors['title'] = 'Title subject not be longer than 18 syllables';\r\n            isErrors = true;\r\n        }\r\n        if (newTest.description.length >= 400) {\r\n            errors['title'] = 'Title description not be longer than 400 syllables';\r\n            isErrors = true;\r\n        }\r\n\r\n        if (isErrors) {\r\n            this.setState({\r\n                ...this.state,\r\n                errors\r\n            })\r\n            return;\r\n        }\r\n\r\n        if (!this.context.userId) \r\n            window.location.href = '/app/login'\r\n        \r\n        fetch(`${ this.context.proxy }/api/tests/createTest`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'x-auth-token': this.context.token\r\n            },\r\n            body: JSON.stringify(this.state)\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                \r\n                if (!res.success) {\r\n                    if (res.isTimeErr) {\r\n                        this.setState({\r\n                            ...this.state,\r\n                            timeErrorMsg: 'You cannot create more than 1 test in 5 minutes!',\r\n                            isLoading: false\r\n                        })\r\n                    }\r\n                } else {\r\n                    ls.set('savedTestToCreate', null)\r\n                    window.location.href = '/app/allTests'\r\n                }\r\n            })\r\n    }\r\n\r\n    setModalChoice(choice) {\r\n        if (choice) {\r\n            this.setState(ls.get('savedTestToCreate'), () => {\r\n                console.log(this.state)\r\n                this.setState({\r\n                    ...this.state,\r\n                    hasSavedTest: false\r\n                })\r\n            })\r\n        } else {\r\n            ls.set('savedTestToCreate', null);\r\n            this.setState({\r\n                ...this.state,\r\n                hasSavedTest: false\r\n            })\r\n        }\r\n    }\r\n\r\n    deleteAnswer(quesId, ansId) {\r\n        let { questions } = this.state;\r\n        if (questions[quesId].answers.length <= 2) return;\r\n\r\n        let inx = parseInt(ansId);\r\n        let corrAnswer = questions[quesId].correctAnswerId;\r\n        if (corrAnswer.toString() === (ansId + 1).toString()) {\r\n            if (ansId === 0) {\r\n                questions[quesId].correctAnswerId = '1';\r\n            } else {                \r\n                questions[quesId].correctAnswerId = (ansId).toString();\r\n            }\r\n        } \r\n        for (let i = inx; i < questions[quesId].answers.length; i++) {\r\n            questions[quesId].answers[i].answerId = (parseInt(questions[quesId].answers[i].answerId) - 1).toString();\r\n            if (i !== inx)\r\n                document.getElementById(`_${ quesId }-${ i - 1 }`).value = questions[quesId].answers[i].text;\r\n        }  \r\n        console.log(+questions[quesId].correctAnswerId, questions[quesId].answers.length)\r\n        if (+questions[quesId].correctAnswerId >= questions[quesId].answers.length) \r\n            questions[quesId].correctAnswerId =  (questions[quesId].answers.length - 1).toString();\r\n        console.log(questions[quesId]);\r\n         \r\n        questions[quesId].answers.splice(ansId, 1);\r\n\r\n        console.log(questions[quesId].answers);\r\n        \r\n\r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        })\r\n    }\r\n\r\n    deleteQuestion(quesId) {\r\n        let { questions } = this.state;\r\n        if (questions.length === 1) return;\r\n        \r\n        questions.splice(quesId, 1);\r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { questions, isProtected, timeErrorMsg, isLoading,  errors, isLimitedAttempts, isLimitedTime, maxAttempts, hasSavedTest, title, description, subject, accessKey } = this.state;\r\n        \r\n        const letters = ['A', 'B', 'C', 'D', 'E', 'F'];\r\n\r\n        return (\r\n            <div>\r\n\r\n                {\r\n                    hasSavedTest && (\r\n                        <ConfirmModal \r\n                            message=\"Load autosaved test?\"\r\n                            positiveChoice=\"Sure\"\r\n                            negativeChoice=\"No, delete it\"\r\n                            setModalChoice={ (choice) => this.setModalChoice(choice) }\r\n                        />\r\n                    )\r\n                }\r\n\r\n                <h1 className=\"heading\">\r\n                    Create test \r\n                </h1>\r\n                <div className=\"test-basic-info\">\r\n                    <div className=\"info-group\">\r\n                        <label htmlFor=\"title\">Test name: </label>\r\n                        <Input type=\"text\" onChange={ (e) => this.setTestTitle(e) } isMini={ true } name=\"title\" value={ title } />\r\n                        <span className=\"error-input\">{ errors['title'] }</span>\r\n                    </div>\r\n                    <div className=\"info-group\">\r\n                        <label htmlFor=\"subject\">Subject: </label>\r\n                        <Input type=\"text\" onChange={ (e) => this.setTestSubject(e) } isMini={ true } name=\"title\" value={ subject } />\r\n                        <span className=\"error-input\">{ errors['subject'] }</span>\r\n                    </div>\r\n                    <div className=\"info-group\">\r\n                        <label htmlFor=\"description\">Description: </label>\r\n                        <textarea className=\"\" onChange={ (e) => this.setTestDescription(e) } name=\"description\" id=\"\" cols=\"30\" rows=\"10\" value={ description }></textarea>\r\n                    </div>\r\n                    <div className=\"info-group-checkbox\">\r\n                        <div className=\"pretty p-icon p-smooth p-thick p-curve\">\r\n                            {\r\n                                isProtected ? (\r\n                                    <input type=\"checkbox\" checked onChange={ this.setProtectedState.bind(this) } />\r\n                                ) : (\r\n                                    <input type=\"checkbox\" onChange={ this.setProtectedState.bind(this) } />\r\n                                )\r\n                            }\r\n                            <div className=\"state p-success\">\r\n                                <i className=\"icon\">\r\n                                <FontAwesomeIcon className=\"check-icon\" icon={ faCheck } />\r\n                                </i>\r\n                                <label>Protected</label>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    { isProtected && (\r\n                        <div className=\"info-group\">\r\n                            <label htmlFor=\"key\">Secret key: </label>\r\n                            <Input onChange={ (e) => this.setAccessKey(e) } isMini={ true } name=\"accessKey\" type=\"text\" value={ accessKey } />\r\n                        </div>\r\n                    ) }\r\n                    <div className=\"info-group-checkbox\">\r\n                        <div className=\"pretty p-icon p-smooth p-thick p-curve\">\r\n                            {\r\n                                isLimitedAttempts ? (\r\n                                    <input type=\"checkbox\" checked onChange={ this.setAttemptsState.bind(this) } />\r\n                                ) : (\r\n                                    <input type=\"checkbox\" onChange={ this.setAttemptsState.bind(this) } />\r\n                                )\r\n                            }\r\n                            <div className=\"state p-success\">\r\n                                <i className=\"icon\">\r\n                                <FontAwesomeIcon className=\"check-icon\" icon={ faCheck } />\r\n                                </i>\r\n                                <label>Limited attempts</label>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    { isLimitedAttempts && (\r\n                        <div className=\"info-group\">\r\n                            <label htmlFor=\"key\">Maximum attempts: </label>\r\n                            <div className=\"btn-group\">\r\n                                <button className=\"increment-btn\" onClick={ () => this.changeAttemptsNumber(-1) }> <span>-</span> </button>\r\n                                <span className=\"attempts-num\">{ maxAttempts }</span>\r\n                                <button className=\"increment-btn\" onClick={ () => this.changeAttemptsNumber(1) }> <span>+</span> </button>\r\n                            </div>\r\n                            \r\n                        </div>\r\n                    ) }\r\n                    <div className=\"info-group-checkbox\">\r\n                        <div className=\"pretty p-icon p-smooth p-thick p-curve\">\r\n                            {\r\n                                isLimitedTime ? (\r\n                                    <input type=\"checkbox\" checked onChange={ this.setTimeLimitState.bind(this) } />\r\n                                ) : (\r\n                                    <input type=\"checkbox\" onChange={ this.setTimeLimitState.bind(this) } />\r\n                                )\r\n                            }\r\n                            <div className=\"state p-success\">\r\n                                <i className=\"icon\">\r\n                                <FontAwesomeIcon className=\"check-icon\" icon={ faCheck } />\r\n                                </i>\r\n                                <label>Limited time</label>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    { isLimitedTime ? (\r\n                        <div className=\"custom-select\" style={{ width: 300 + 'px' }}>\r\n                            <select>\r\n                                <option value=\"0\">Select time limit:</option>\r\n                                <option value=\"1\">5 minutes</option>\r\n                                <option value=\"2\">10 minutes</option>\r\n                                <option value=\"3\">20 minuted</option>\r\n                                <option value=\"4\">30 minutes</option>\r\n                                <option value=\"5\">1 hour</option>\r\n                                <option value=\"6\">1.5 hours</option>\r\n                            </select>\r\n                        </div>\r\n                    ) : (\r\n                        <div className=\"custom-select\" style={{ width: 300 + 'px', visibility: 'hidden' }}>\r\n                            <select>\r\n                                <option value=\"0\">Select time limit:</option>\r\n                                <option value=\"1\">5 minutes</option>\r\n                                <option value=\"2\">10 minutes</option>\r\n                                <option value=\"3\">20 minuted</option>\r\n                                <option value=\"4\">30 minutes</option>\r\n                                <option value=\"5\">1 hour</option>\r\n                                <option value=\"6\">1.5 hours</option>\r\n                            </select>\r\n                        </div>\r\n                    ) }\r\n                    \r\n                </div>\r\n                <div className=\"questions\">\r\n                    { questions.map((ques, index) => {\r\n                        return (\r\n                            <div key={ index } className=\"question-container\">\r\n                                \r\n                                <h3 className=\"question-container__title\">\r\n                                    <div className=\"delete-question-btn\">\r\n                                        <span>&times;</span>\r\n                                    </div>\r\n                                    <span>{ index + 1 }.</span>  <Input type=\"text\" isMini={ true } onChange={ (e) => this.setQuestionTitle(e, index) } name=\"questionTitle\" value={ ques.title } />\r\n                                </h3>\r\n                                <div className=\"question-container__answers\">\r\n                                    { ques.answers.map((ans, inx) => {\r\n                                        let extraClassName = '';\r\n\r\n                                        console.log(ques.correctAnswerId.toString() ===(inx + 1).toString())\r\n                                        \r\n                                        if (ques.correctAnswerId.toString() === (inx + 1).toString()) \r\n                                            extraClassName = 'selected';\r\n                                        console.log(extraClassName)\r\n\r\n                                        return (\r\n                                            <div key={ `${ inx }-${ index }` } className={ \"answer-block \" + extraClassName }>\r\n                                                <div className=\"answer-block__letter\" onClick={ () => this.setCorrectAnswerId(index, ans.answerId) }><span>{ letters[inx] }</span></div>\r\n                                                <div className=\"answer-block__text\">\r\n                                                    <input autoComplete=\"off\" id={ `_${ index }-${ inx }` } type=\"text\" onChange={(e) => this.setAnswerText(e, index, inx) } value={ ans.text } />\r\n                                                    <button className=\"btn-delete\" onClick={ () => this.deleteAnswer(index, inx) }>\r\n                                                        <span>&times;</span>\r\n                                                    </button>\r\n                                                </div>\r\n                                            </div>\r\n                                        )\r\n                                    }) }\r\n                                    <button onClick={ this.handleAddAnswer.bind(this, index) } className=\"add-question\"><span>+</span></button>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    }) }\r\n                    <button onClick={ this.handleAddQuestion.bind(this) } className=\"new-question btn-secondary\">\r\n                        New question\r\n                    </button>\r\n                </div>\r\n                { timeErrorMsg && (\r\n                    <span className=\"error-msg\">\r\n                        { timeErrorMsg }\r\n                    </span>\r\n                ) }\r\n\r\n                { errors['questions'] && (\r\n                    <span className=\"error-msg\">\r\n                        { errors['questions'] }\r\n                    </span>\r\n                ) }\r\n                { errors['answers'] && (\r\n                    <span className=\"error-msg\">\r\n                        { errors['answers'] }\r\n                    </span>\r\n                ) }\r\n\r\n                <button onClick={ this.handleAddTest.bind(this) } className=\"btn btn-cta\">Create test!</button>\r\n                \r\n                { isLoading && <Spinner size=\"sm\" /> }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport AuthContext from '../../context/AuthContext'\r\n\r\nimport Spinner from '../Spinner/Spinner'\r\n\r\nimport './css/style.css'\r\nimport { convertTimeShort } from '../../middleware/convertTime'\r\nimport { getHeaders } from '../../middleware/authMiddleware'\r\n\r\nexport default class PassTest extends Component {\r\n    state = {\r\n        isLoading: true,\r\n        test: [],\r\n        answers: [],\r\n        answeredQuestions: 0,\r\n        isSubmitted: false,\r\n        isTimeUp: false,\r\n        time: null\r\n    }\r\n\r\n    static contextType = AuthContext;\r\n\r\n    componentDidMount() {\r\n        const testId = this.props.match.params.testId;\r\n\r\n        fetch(`${ this.context.proxy }/api/tests/testInfo/${ testId }`, {\r\n            headers: {\r\n                ...getHeaders()\r\n            }\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                let answers = [];\r\n                for (let i = 0; i < res.questions.length; i++) \r\n                    answers[i] = 0;\r\n                this.setState({\r\n                    isLoading: false,\r\n                    answers,\r\n                    test: res\r\n                })\r\n\r\n                if (res.timeLimit) {\r\n                    const { timeLimit } = res;\r\n                    let time = timeLimit;\r\n                    setInterval(() => {\r\n                        time = Math.max(time - 1, 0);\r\n                        let { isTimeUp } = this.state;\r\n                        if (!isTimeUp && time <= 0) {\r\n                            isTimeUp = true;\r\n                            let els = document.querySelectorAll(\"input[type='radio']\");\r\n                            els.forEach(el => {\r\n                                el.setAttribute('onChange', 'return false');\r\n                                el.setAttribute('onClick', 'return false');\r\n                            })\r\n                        }\r\n                        this.setState({\r\n                            ...this.state,\r\n                            isTimeUp,\r\n                            time\r\n                        });\r\n                        \r\n                    }, 1000)\r\n                } else {\r\n                    let time = 0;\r\n                    setInterval(() => {\r\n                        time++;\r\n                        this.setState({\r\n                            ...this.state,\r\n                            time\r\n                        })\r\n                    }, 1000)\r\n                }\r\n\r\n                \r\n            })\r\n    }\r\n\r\n    handleSelect(index, answerId) {\r\n        let { answers, answeredQuestions, isTimeUp } = this.state;\r\n        \r\n        if (isTimeUp) \r\n            return;\r\n        else {\r\n            if (!answers[index]) {\r\n                answeredQuestions++;\r\n            }\r\n            answers[index] = answerId;\r\n            this.setState({\r\n                ...this.state,\r\n                answers,\r\n                answeredQuestions\r\n            }, () => console.log(this.state) )\r\n        }\r\n        \r\n    }\r\n\r\n    finishTest(e) {\r\n        e.preventDefault();\r\n        let points = 0;\r\n        let results = [];\r\n        let { answers, test, isSubmitted, time } = this.state;\r\n\r\n        if (test.timeLimit) {\r\n            time = test.timeLimit - time;\r\n        }\r\n\r\n        if (isSubmitted) \r\n            return;\r\n        \r\n        this.setState({\r\n            ...this.state,\r\n            isSubmitted: true\r\n        })\r\n\r\n        console.log('finish!');\r\n        \r\n\r\n        test.questions.map((ques, index) => {\r\n            if (ques.correctAnswerId === answers[index]) {\r\n                points++;\r\n                results.push(true);\r\n            } else {\r\n                results.push(false);\r\n            }\r\n            return ques;\r\n        })\r\n        const query = {\r\n            \"userId\": this.context.userId,\r\n            \"points\": points,\r\n            \"time\": time,\r\n            \"answers\": results,\r\n            \"title\": test.title,\r\n            \"maxPoints\": test.questions.length,\r\n            \"date\": Date.now(),\r\n            \"answersLetters\": answers\r\n        }\r\n        fetch(`${ this.context.proxy }/api/tests/saveResult/${ test._id }`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(query)\r\n        })\r\n            .then(() => {\r\n                console.log('result saved!');\r\n                window.location.href = `/app/testInfo/${ test._id }`\r\n            })\r\n    }\r\n\r\n    render() {\r\n        const { isLoading, test, answeredQuestions, time, answers } = this.state;\r\n        const { questions } = test;\r\n\r\n        const letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\r\n\r\n        if (isLoading) return (\r\n            <Spinner />\r\n        )\r\n\r\n        return (\r\n            <>\r\n                <div className=\"info-block\">\r\n                    <div>\r\n                        { test.timeLimit ? (\r\n                            <span>Time left: { convertTimeShort(time) }</span>\r\n                        ) : (\r\n                            <span>Time passed: { convertTimeShort(time) }</span>\r\n                        ) } \r\n                    </div>\r\n                    <div>\r\n                        Answered questions: { answeredQuestions } / { questions.length }\r\n                    </div>\r\n                </div>\r\n                <form className=\"test-form\" onSubmit={ e => this.finishTest(e) }>\r\n                    <h1 className=\"heading\">\r\n                        Pass test '{ test.title }'\r\n                    </h1>\r\n                    <div className=\"test-questions\">\r\n                        { questions.map((ques, index) => {\r\n                            return (\r\n                                <div className=\"question-container\">\r\n                                    <h3 class=\"question-container__title\">\r\n                                        { index + 1 }.  { ques.title }\r\n                                    </h3>\r\n                                    <div className=\"question-container__answers\">\r\n                                        { ques.answers.map((ans, inx) => {\r\n                                            let extraClassName = '';\r\n                                            \r\n                                            if (answers[index].toString() === (inx + 1).toString()) \r\n                                                extraClassName = 'selected';\r\n\r\n                                            return (\r\n                                                <div className={ \"answer-block \" + extraClassName } onClick={ this.handleSelect.bind(this, index, ans.answerId) }>\r\n                                                    <div className=\"answer-block__letter\"><span>{ letters[inx] }</span></div>\r\n                                                    <div className=\"answer-block__text\">\r\n                                                        <span>{ ans.text }</span>\r\n                                                    </div>\r\n                                                </div>\r\n                                            )\r\n                                        }) }\r\n                                        \r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        }) }\r\n                    </div>\r\n                    <input type=\"submit\" className=\"btn btn-cta\" value=\"Finish\" />\r\n                </form>\r\n            </>\r\n        )\r\n    }\r\n}\r\n","const validate = (data) => {\r\n    let errors = [];\r\n    data.forEach(field => {\r\n        if (field.name === 'email') {\r\n            if (!(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(field.value)) ) {\r\n                errors['email'] = 'Invalid email'\r\n            } \r\n        } \r\n        if (field.name === 'password') {\r\n            if (field.value.length < 6) {\r\n                errors['password'] = 'Password must be at least 6 characters'\r\n            }\r\n        }\r\n        if (field.name === 'fullName') {\r\n            if (field.value.trim().length <= 5) {\r\n                errors['fullName'] = 'Please enter a real full name'\r\n            }\r\n        }\r\n    })\r\n\r\n    return errors;\r\n}\r\n\r\nexport {\r\n    validate\r\n}","import React, { Component } from 'react'\r\n\r\nimport './css/style.css'\r\n\r\nimport Input from '../reusableComponents/inputField/Input'\r\nimport Spinner from '../Spinner/Spinner'\r\n\r\nimport { validate } from '../../middleware/validator'\r\nimport AuthContext from '../../context/AuthContext'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCheck } from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport default class Login extends Component {\r\n    state = {\r\n        email: '',\r\n        password: '',\r\n        errors: [],\r\n        isLongerExpiration: false,\r\n        isLoading: false\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.formEl = React.createRef();        \r\n    }\r\n\r\n    static contextType = AuthContext;\r\n\r\n    setCredential(e) {\r\n        console.log(e.target);\r\n        \r\n        this.setState({\r\n            ...this.state,\r\n            [e.target.name]: e.target.value\r\n        }, () => console.log(this.state)\r\n        )\r\n    }\r\n\r\n    setLoading(state) {\r\n        this.setState({\r\n            isLoading: state\r\n        }, () => console.log(this.state))\r\n    }\r\n\r\n    setExpirationState() {\r\n        this.setState({\r\n            ...this.state,\r\n            isLongerExpiration: !this.state.isLongerExpiration\r\n        })\r\n    } \r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        const { email, password, isLongerExpiration } = this.state;\r\n\r\n        let data = [\r\n            { name: 'email', value: email },\r\n            { name: 'password', value: password }\r\n        ];\r\n        let errors = validate(data);\r\n        \r\n        \r\n        if (errors['email'] || errors['password']) {\r\n            this.setState({\r\n                ...this.state,\r\n                errors: errors,\r\n                isLoading: false\r\n            })\r\n        } else {\r\n            errors = [];\r\n            const query = {\r\n                email,\r\n                password,\r\n                isLongerExpiration\r\n            }\r\n            fetch(`${ this.context.proxy }/api/users/login`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(query)\r\n            })\r\n                .then(res => res.json())\r\n                .then(res => {\r\n                    if (res.success) {\r\n                        this.context.setToken(res.token, res.user._id, res.user);\r\n                        window.location.href = '/app/'\r\n                    } else {\r\n                        if (res.doesUserExist) \r\n                            errors['password'] = 'Incorrect password';\r\n                        else \r\n                            errors['email'] = 'User does not exist!'\r\n                        this.setState({\r\n                            ...this.state,\r\n                            errors: errors,\r\n                            isLoading: false\r\n                        })\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { errors, isLoading } = this.state;\r\n        console.log(isLoading);\r\n        \r\n\r\n        return (\r\n            <div>\r\n                <h1 className=\"heading\">Log in</h1>\r\n                <form id=\"login-form\" onSubmit={ (e) => this.handleSubmit(e) }>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Email: </label>\r\n                        <Input name=\"email\" type=\"text\" onChange={ (e) => this.setCredential(e) } />\r\n                        <span className=\"error-input\">{ errors['email'] }</span>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Password</label>\r\n                        <Input name=\"password\" type=\"password\" onChange={ (e) => this.setCredential(e) } />\r\n                        <span className=\"error-input\">{ errors['password'] }</span>\r\n                    </div>\r\n\r\n                    <div className=\"checkbox-group pretty p-icon p-smooth p-thick p-curve\">\r\n                        <input type=\"checkbox\" onChange={ this.setExpirationState.bind(this) } />\r\n                        <div className=\"state p-success\">\r\n                            <i className=\"icon\">\r\n                            <FontAwesomeIcon className=\"check-icon\" icon={ faCheck } />\r\n                            </i>\r\n                            <label>Remember for a day</label>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <input onClick={ () => this.setLoading(true) } type=\"submit\" className=\"btn btn-cta\" value=\"Log in\" />\r\n                    { isLoading && <Spinner size=\"sm\" /> }\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","export const getPasswordStrenth = (password) => {\r\n    // password strenth points: \r\n    //  numbers + 1\r\n    //  letters + 1\r\n    //  symbols + 2\r\n    //  > 8 syllables + 1\r\n\r\n    // 1 - weak\r\n    // 2 - 3 - meduim\r\n    // 4 - strong\r\n    // 5 - ultra-strong\r\n\r\n    if (!password) return {\r\n        points: null,\r\n        strenth: null\r\n    }\r\n\r\n    let points = 0;\r\n    let hasNums = false,\r\n        hasLetters = false,\r\n        hasSymbols = false;\r\n    \r\n    if (password.length > 8) \r\n        points++;\r\n\r\n    for (let i of password) {\r\n        if (i >= '0' && i <= 9) {\r\n            if (!hasNums) {\r\n                hasNums = true;\r\n                points++;\r\n            }\r\n        } else if (i.toLowerCase(i) >= 'a' && i.toLowerCase(i) <= 'z') {\r\n            if (!hasLetters) {\r\n                hasLetters = true;\r\n                points++;\r\n            }\r\n        } else if (i !== ' ') {\r\n            if (!hasSymbols) {\r\n                hasSymbols = true;\r\n                points += 2;\r\n            }\r\n        }\r\n    }\r\n\r\n    let result = 'Weak',\r\n        className = \"weak\";\r\n\r\n    if (points >= 2) {\r\n        result = 'Medium';\r\n        className = 'medium';\r\n    }\r\n    if (points >= 4) {\r\n        result = 'Strong';\r\n        className = 'strong';\r\n    }\r\n    if (points >= 5) {\r\n        result = 'Ultra strong';\r\n        className = 'ultra-strong';\r\n    }\r\n        \r\n    \r\n    return {\r\n        points,\r\n        className,\r\n        strenth: result\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nimport './css/style.css'\r\n\r\nimport Spinner from '../Spinner/Spinner'\r\n\r\nimport { validate } from '../../middleware/validator'\r\nimport { getPasswordStrenth } from '../../middleware/passwordStrenth'\r\nimport AuthContext from '../../context/AuthContext'\r\nimport Input from '../reusableComponents/inputField/Input'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCheck } from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport default class Register extends Component {\r\n    state = {\r\n        email: '',\r\n        password: '',\r\n        confirmPassword: '',\r\n        name: '',\r\n        isTeacher: false,\r\n        errors: [],\r\n        isLoading: false\r\n    }\r\n\r\n    static contextType = AuthContext;\r\n\r\n    setCredential(e) {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n    }\r\n\r\n    setLoading(state) {\r\n        this.setState({\r\n            isLoading: state\r\n        }, () => console.log(this.state))\r\n    }\r\n\r\n    setTeacherState() {\r\n        this.setState({\r\n            ...this.state,\r\n            isTeacher: !this.state.isTeacher\r\n        })\r\n    }\r\n\r\n    registerUser(e) {\r\n        e.preventDefault();\r\n\r\n        let data = [\r\n            { name: 'email', value: this.state.email },\r\n            { name: 'password', value: this.state.password },\r\n            { name: 'fullName', value: this.state.name }\r\n        ];\r\n        let errors = validate(data);\r\n        if (this.state.password !== this.state.confirmPassword) {\r\n            errors['confirmPassword'] = 'Passwords do not match'\r\n        }\r\n        \r\n        if (errors['email'] || errors['password'] || errors['fullName'] || errors['confirmPassword']) {\r\n            this.setState({\r\n                ...this.state,\r\n                errors: errors,\r\n                isLoading: false\r\n            })\r\n        } else {\r\n            const newUser = {\r\n                email: this.state.email,\r\n                password: this.state.password,\r\n                name: this.state.name\r\n            };\r\n            if (this.state.confirmPassword !== newUser.password) {\r\n                return;\r\n            };\r\n            fetch(`${ this.context.proxy }/api/users/addUser`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(newUser)\r\n            })\r\n                .then(res => res.json())\r\n                .then(res => {\r\n                    console.log(res);\r\n                    \r\n                    if (res.notSuccess) {\r\n                        errors = [];\r\n                        errors['email'] = 'User with such email already exists';\r\n                        this.setState({\r\n                            ...this.state,\r\n                            errors,\r\n                            isLoading: false\r\n                        })\r\n                    } else {\r\n                        this.context.setToken(res.token, res.user._id);\r\n                        window.location.href = '/app/'\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { errors, isLoading, password } = this.state;\r\n\r\n        let { strenth, className } = getPasswordStrenth(password);\r\n\r\n        return (\r\n            <>\r\n                <h1 className=\"heading\">Register</h1>\r\n                <form onSubmit={ (e) => this.registerUser(e) }>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">E-mail: </label>\r\n                        <Input type=\"text\" name=\"email\" onChange={ (e) => this.setCredential(e) } />\r\n                        <span className=\"error-input\">{ errors['email'] }</span>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Full name: </label>\r\n                        <Input type=\"text\" name=\"name\" onChange={ (e) => this.setCredential(e) } />\r\n                        <span className=\"error-input\">{ errors['fullName'] }</span>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Password: { strenth && <span className={ \"strenth-text \" + className }>({ strenth })</span> } </label>\r\n                        <Input type=\"password\" name=\"password\" onChange={ (e) => this.setCredential(e) } />\r\n                        <span className=\"error-input\">{ errors['password'] }</span>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Confirm password: </label>\r\n                        <Input type=\"password\" name=\"confirmPassword\" onChange={ (e) => this.setCredential(e) } />\r\n                        <span className=\"error-input\">{ errors['confirmPassword'] }</span>\r\n                    </div>\r\n                    <div className=\"checkbox-group pretty p-icon p-smooth p-thick p-curve\">\r\n                        <input type=\"checkbox\" onChange={ this.setTeacherState.bind(this) } />\r\n                        <div className=\"state p-success\">\r\n                            <i className=\"icon\">\r\n                            <FontAwesomeIcon className=\"check-icon\" icon={ faCheck } />\r\n                            </i>\r\n                            <label>Register as teacher</label>\r\n                        </div>\r\n                    </div>\r\n                    <input onClick={ () => this.setLoading(true) } type=\"submit\" className=\"btn btn-cta\" value=\"Create account\" />\r\n                    { isLoading && <Spinner size=\"sm\" /> }\r\n                </form>\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Switch, Route, BrowserRouter } from 'react-router-dom'\r\n\r\nimport Navbar from './Navbar/Navbar'\r\n\r\nimport Profile from './Profile/Profile'\r\nimport Tests from './Tests/Tests'\r\nimport TestInfo from './Tests/TestInfo'\r\nimport CreateTest from './CreateTest/CreateTest'\r\nimport TestResult from './TestResult/TestResult'\r\nimport CreateTestForm from './CreateTest/CreateTestForm'\r\nimport PassTest from './PassTest/PassTest'\r\nimport Login from './Auth/Login'\r\nimport Register from './Auth/Register'\r\n\r\nimport './css/MainPage.css'\r\nimport './css/GlobalStyles/style.css'\r\n\r\nexport default class MainPage extends Component {    \r\n\r\n    componentDidMount() {\r\n        let mainEl = document.querySelector('main')\r\n        console.log(\"Hello\");\r\n\r\n\r\n        setInterval(() => {\r\n            if (is_scrolling()) {\r\n                if (!mainEl.classList.contains(\"on-scroll-bar\")) {\r\n                    mainEl.classList.add(\"on-scroll-bar\");\r\n                }\r\n                \r\n            } else {\r\n                if (mainEl.classList.contains(\"on-scroll-bar\")) {\r\n                    mainEl.classList.remove(\"on-scroll-bar\");\r\n                }\r\n            }\r\n            \r\n        }, 10)\r\n\r\n        mainEl.addEventListener('scroll', (e) => {\r\n            window.lastScrollTime = new Date().getTime()\r\n        }, false)\r\n\r\n        function is_scrolling() {\r\n            return window.lastScrollTime && new Date().getTime() < window.lastScrollTime + 500\r\n        }\r\n    }\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <BrowserRouter>\r\n\r\n                <div className=\"app-container\">\r\n                    <Navbar />\r\n                    <main>\r\n                        <Switch>\r\n                            <Route exact path='/app/' component={ Profile } /> \r\n                            <Route path='/app/allTests' component={ Tests } /> \r\n                            <Route path='/app/testInfo/:testId' component={ TestInfo } /> \r\n                            <Route path='/app/testResult/:userId/:resultId' component={ TestResult } /> \r\n                            <Route path='/app/createTest' component={ CreateTest } /> \r\n                            <Route path='/app/createTestForm' component={ CreateTestForm } /> \r\n                            <Route path='/app/passTest/:testId' component={ PassTest } /> \r\n                            <Route path='/app/login' component={ Login } /> \r\n                            <Route path='/app/register' component={ Register } /> \r\n                        </Switch>\r\n                    </main>\r\n                </div>\r\n\r\n            </BrowserRouter>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport ls from 'local-storage'\r\n\r\nimport AuthContext from './context/AuthContext'\r\nimport TestsContext from './context/TestsContext'\r\n\r\nimport LandingPage from './landingPage/LandingPage';\r\nimport MainPage from './components/MainPage';\r\n\r\nimport './App.css'\r\n\r\nclass App extends Component {\r\n    state = {\r\n        user: ls.get('user'),\r\n        userId: ls.get('userId'),\r\n        token: ls.get('token'),\r\n        proxy: ''\r\n    }\r\n\r\n    componentWillMount() {\r\n        let proxy = '';\r\n        if (process.env.NODE_ENV === 'production') {\r\n            if (window.location.href.startsWith('https'))\r\n                proxy = 'https://easytestapp.herokuapp.com';\r\n            else if (window.location.href.startsWith('http'))\r\n                proxy = 'http://easytestapp.herokuapp.com';\r\n            else \r\n                proxy = 'easytestapp.herokuapp.com';\r\n        } else \r\n            proxy = 'http://localhost:5000';\r\n        console.log(proxy)\r\n        this.setState({\r\n            ...this.state,\r\n            proxy\r\n        })\r\n    }\r\n    \r\n\r\n    setToken = (token, userId, user) => {\r\n        this.setState({\r\n            token: token,\r\n            userId: userId,\r\n            user\r\n        })\r\n        ls.set('token', token);\r\n        ls.set('userId', userId);\r\n        ls.set('user', user);\r\n    }\r\n\r\n    logout = () => {\r\n        this.setState({\r\n            token: '',\r\n            userId: ''\r\n        });\r\n        ls.set('token', '');\r\n        ls.set('userId', '');\r\n    }\r\n\r\n    render() {\r\n        const { token, userId, proxy, user } = this.state;\r\n        console.log(process.env);\r\n        console.log(window.location.href);\r\n        \r\n        \r\n\r\n        return (\r\n            <BrowserRouter basename={ process.env.PUBLIC_URL }>\r\n                <React.Fragment>\r\n                    <TestsContext.Provider\r\n                        value={ { allTests: null, results: null } }\r\n                    >\r\n                        <AuthContext.Provider value={{ token, userId, user, setToken: this.setToken, logout: this.logout, proxy  }}>\r\n                            <Switch>\r\n                                <Route exact path=\"/\" component={ LandingPage } />\r\n                                <Route path=\"/app\" component={ MainPage } />\r\n                            </Switch>\r\n                        </AuthContext.Provider>\r\n                    </TestsContext.Provider>\r\n                </React.Fragment>\r\n            </BrowserRouter>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\r\n\r\nexport default React.createContext({\r\n    \r\n})\r\n","export const convertTimeShort = seconds => {\r\n    return new Date(seconds * 1000).toISOString().substr(11, 8);\r\n};\r\n\r\nexport const convertTime = seconds => {\r\n    const hrs = Math.floor(seconds / 3600);\r\n    const mins = Math.floor((seconds - hrs * 3600) / 60);\r\n    const secs = seconds - hrs * 3600 - mins * 60;\r\n\r\n    let result = '';\r\n    if (hrs) \r\n        result += hrs.toString() + ` hour${ hrs !== 1 ? 's' : '' } `;\r\n    if (mins)\r\n        result += mins.toString() + ` minute${ mins !== 1 ? 's' : '' } `;\r\n    if (secs) \r\n        result += secs.toString() + ` second${ secs !== 1 ? 's' : '' } `;\r\n    \r\n    return result;\r\n};\r\n","module.exports = __webpack_public_path__ + \"static/media/logo1.2ad03ba9.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo-light1.dc46d8b1.svg\";","module.exports = __webpack_public_path__ + \"static/media/hero.de877d3a.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.dc46d8b1.svg\";","import React, { Component, Suspense } from 'react'\r\n\r\nimport { Redirect } from 'react-router-dom'\r\nimport InfiniteScroll from 'react-infinite-scroller'\r\n\r\nimport Spinner from '../../Spinner/Spinner'\r\nimport { getHeaders } from '../../../middleware/authMiddleware';\r\n\r\nimport AuthContext from '../../../context/AuthContext'\r\nimport TestsContext from '../../../context/TestsContext';\r\n\r\nconst TestCard = React.lazy(() => import('./TestCard'));\r\n\r\nexport default class TestsComtainer extends Component {\r\n    state = {\r\n        tests: [],\r\n        left: 0,\r\n        right: 3,\r\n        isMoreTests: true,\r\n        isRedirectToLogin: false\r\n    }\r\n\r\n    static contextType = TestsContext;\r\n\r\n    loadMore() {\r\n        const { urlToFetch, authContext } = this.props;\r\n        const { left, right, tests } = this.state;\r\n        console.log(tests.length, '-----+++++++')\r\n\r\n        fetch(urlToFetch, {\r\n            method: 'POST',\r\n            headers: {\r\n                ...getHeaders(),\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                isLimited: true,\r\n                left,\r\n                right\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                if (res.isTokenError) {\r\n                    authContext.logout();\r\n                    this.setState({\r\n                        ...this.state,\r\n                        isRedirectToLogin: true\r\n                    })\r\n                    return true;\r\n                }\r\n                res.tests.forEach(test => tests.push(test));\r\n                this.context.allTests = tests;\r\n                this.setState({\r\n                    ...this.state,\r\n                    tests,\r\n                    left: left + 3,\r\n                    right: right + 3,\r\n                    isMoreTests: res.isMoreTests\r\n                }, () => console.log(this.state.tests))\r\n            });\r\n    }\r\n\r\n    componentWillMount() {\r\n        if (this.props.type === 'full') {\r\n            if (this.context.allTests) {\r\n                console.log(this.context.allTests.length, '+-+-')\r\n                this.setState({\r\n                    ...this.state,\r\n                    tests: this.context.allTests,\r\n                    left: this.context.allTests.length,\r\n                    right: this.context.allTests.length + 3\r\n                })\r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n\r\n    render() {\r\n        const { type, user } = this.props;\r\n\r\n        let { isLoading, tests, isRedirectToLogin, isMoreTests } = this.state;\r\n\r\n        let hasPreloadedTests = false;\r\n\r\n        if (isRedirectToLogin) return (\r\n            <Redirect to=\"/app/login\" />\r\n        )\r\n\r\n        if (isLoading || !tests) return (\r\n            <Spinner />\r\n        )\r\n\r\n        let items = [];\r\n        // console.log(TestsContext)\r\n        \r\n        // if (type === 'full' && this.context.allTests) {\r\n        //     tests = this.context.allTests;\r\n        //     hasPreloadedTests = true;\r\n        // }\r\n\r\n        tests.map((test, inx) => {\r\n            return items.push (\r\n                <Suspense key={ inx } fallback={ <Spinner size=\"sm\" /> } >\r\n                    <TestCard key={ `${ inx }-${ inx }` } type={ type } test={ test } user={ user || null } />\r\n                </Suspense> \r\n            )\r\n        })\r\n\r\n        return (\r\n            <>\r\n                {/* {\r\n                    !hasPreloadedTests ? ( */}\r\n                        <InfiniteScroll\r\n                            pageStart={ \"0\" }\r\n                            loadMore={ this.loadMore.bind(this) }\r\n                            hasMore={ isMoreTests }\r\n                            loader={ <Spinner /> }\r\n                            useWindow={ false } >\r\n                            <div className=\"tests-container\">\r\n                                { items.length === 0 ? (type !== 'result' && <h3>Oops, no tests available yet!</h3>) : items }\r\n                            </div>\r\n                            \r\n                        </InfiniteScroll>\r\n\r\n                    {/* ) : (\r\n                        <div className=\"tests-container\">\r\n                            { items }\r\n                        </div>\r\n                    )\r\n                } */}\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nimport './css/style.css'\r\n\r\nexport default class PointsCard extends Component {\r\n    render() {\r\n        const { points, maxPoints } = this.props;\r\n\r\n        let result = points / maxPoints;\r\n        let extraClassName = '';\r\n\r\n        if (result >= .85)\r\n            extraClassName = 'excellent';\r\n        else if (result >= .65)\r\n            extraClassName = 'good';\r\n        else if (result >= .40)\r\n            extraClassName = 'satisfactory';\r\n        else extraClassName = 'bad';\r\n\r\n        return (\r\n            <span className={ `points-card ${ extraClassName }` }>\r\n                { points }<span className=\"divider\">/</span>{ maxPoints }\r\n            </span>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport default React.createContext({\r\n    \r\n})\r\n"],"sourceRoot":""}