{"version":3,"sources":["components/Spinner/Spinner.js","context/TestsContext.js","middleware/authMiddleware.js","components/reusableComponents/PointsCard.js","landingPage/img/logo1.svg","landingPage/img/logo-light1.svg","landingPage/img/hero.svg","components/Navbar/img/logo.svg","components/reusableComponents/tests/TestsContainer.js","landingPage/LandingPage.js","components/Navbar/Navbar.js","components/Profile/Profile.js","components/Tests/Tests.js","components/reusableComponents/inputField/Input.js","components/reusableComponents/backLink/BackLink.js","components/Tests/TestInfo.js","middleware/convertTime.js","components/CreateTest/CreateTest.js","components/TestResult/TestResult.js","components/CreateTest/CreateTestForm.js","components/PassTest/PassTest.js","middleware/validator.js","components/Auth/Login.js","middleware/passwordStrenth.js","components/Auth/Register.js","components/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["Spinner","size","console","log","extraClassName","className","React","createContext","tests","title","getHeaders","ls","get","PointsCard","this","props","points","maxPoints","result","Component","module","exports","TestCard","lazy","TestsComtainer","state","left","right","isMoreTests","isRedirectToLogin","urlToFetch","fetch","method","headers","body","JSON","stringify","isLimited","then","res","json","isTokenError","context","logout","setState","forEach","test","push","type","user","isLoading","to","items","map","inx","key","fallback","pageStart","loadMore","bind","hasMore","loader","useWindow","length","contextType","TestsContext","LandingPage","src","Logo","alt","LogoLight","Hero","Navbar","isLoggedIn","window","location","href","token","exact","icon","faHome","faAlignLeft","faPenAlt","faSignInAlt","faUserPlus","onClick","faSignOutAlt","TestsContainer","Profile","passedTests","avgResult","nextLinkVal","proxy","reverse","Math","floor","_id","name","Tests","linkToFetch","Input","onChange","isMini","handleChange","e","autoComplete","htmlFor","BackLink","link","history","useHistory","goBack","faArrowLeft","TestInfo","testResults","usernames","errors","hasLiked","testId","match","params","likes","find","like","userId","sort","res1","res2","currentAccessKey","target","value","maxAttempts","usedAttemtps","accessKey","isProtected","field","document","querySelector","addEventListener","which","preventDefault","isIncrease","timeLimit","attemtpsLeft","description","setAccessKey","seconds","hrs","mins","secs","toString","convertTime","goToTest","setLike","faThumbsUp","faThumbsUpS","username","answers","CreateTest","createdTests","TestResult","resultId","questions","ans","isCorrect","correctAnswerId","parseInt","faCheckCircle","faTimesCircle","question","text","CreateTestForm","answerId","subject","creator","timeErrorMsg","isLimitedAttempts","isLimitedTime","x","i","selElmnt","a","b","c","getElementsByClassName","timeValues","setst","j","getElementsByTagName","createElement","setAttribute","innerHTML","options","selectedIndex","appendChild","y","k","s","h","parentNode","previousSibling","removeAttribute","click","stopPropagation","closeAllSelect","nextSibling","classList","toggle","elmnt","arrNo","remove","indexOf","add","quesId","len","index","min","max","quesIndex","ansId","newTest","ques","isErrors","success","isTimeErr","getElementById","splice","letters","setTestTitle","setTestSubject","setTestDescription","id","cols","rows","setProtectedState","faCheck","setAttemptsState","changeAttemptsNumber","setTimeLimitState","style","width","visibility","setQuestionTitle","setCorrectAnswerId","setAnswerText","deleteAnswer","handleAddAnswer","handleAddQuestion","handleAddTest","PassTest","answeredQuestions","isSubmitted","isTimeUp","time","setInterval","querySelectorAll","el","results","query","Date","now","toISOString","substr","onSubmit","finishTest","class","handleSelect","validate","data","trim","Login","email","password","isLongerExpiration","formEl","createRef","setToken","doesUserExist","handleSubmit","setCredential","setExpirationState","setLoading","AuthContext","Register","confirmPassword","newUser","notSuccess","strenth","hasNums","hasLetters","hasSymbols","toLowerCase","getPasswordStrenth","registerUser","MainPage","mainEl","lastScrollTime","getTime","contains","path","component","App","set","startsWith","process","basename","Fragment","Provider","Boolean","hostname","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4202f1bf.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport './Spinner.css'\r\n\r\nconst Spinner = ({ size }) => {\r\n    console.log(size);\r\n    const extraClassName = size === \"sm\" ? \"small\" : \"\";\r\n\r\n    return (\r\n        <div className={ \"loader-wrapper \" + extraClassName }>\r\n            <div className={ \"loader \" + extraClassName }></div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Spinner","import React from 'react';\r\n\r\nexport default React.createContext({\r\n    tests: [{ title: 'hello' }]\r\n})\r\n","import ls from 'local-storage'\r\n\r\nconst getHeaders = () => {\r\n    return {\r\n        'x-auth-token': ls.get('token')\r\n    }\r\n}\r\n\r\nexport {\r\n    getHeaders\r\n}","import React, { Component } from 'react'\r\n\r\nimport './css/style.css'\r\n\r\nexport default class PointsCard extends Component {\r\n    render() {\r\n        const { points, maxPoints } = this.props;\r\n\r\n        let result = points / maxPoints;\r\n        let extraClassName = '';\r\n\r\n        if (result >= .85)\r\n            extraClassName = 'excellent';\r\n        else if (result >= .65)\r\n            extraClassName = 'good';\r\n        else if (result >= .40)\r\n            extraClassName = 'satisfactory';\r\n        else extraClassName = 'bad';\r\n\r\n        return (\r\n            <span className={ `points-card ${ extraClassName }` }>\r\n                { points }<span className=\"divider\">/</span>{ maxPoints }\r\n            </span>\r\n        )\r\n    }\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/logo1.2ad03ba9.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo-light1.dc46d8b1.svg\";","module.exports = __webpack_public_path__ + \"static/media/hero.de877d3a.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.dc46d8b1.svg\";","import React, { Component, Suspense } from 'react'\r\n\r\nimport { Redirect } from 'react-router-dom'\r\nimport InfiniteScroll from 'react-infinite-scroller'\r\n\r\nimport Spinner from '../../Spinner/Spinner'\r\nimport { getHeaders } from '../../../middleware/authMiddleware';\r\n\r\nimport TestsContext from '../../../context/TestsContext'\r\n\r\nconst TestCard = React.lazy(() => import('./TestCard'));\r\n\r\nexport default class TestsComtainer extends Component {\r\n    state = {\r\n        tests: [],\r\n        left: 0,\r\n        right: 3,\r\n        isMoreTests: true,\r\n        isRedirectToLogin: false\r\n    }\r\n\r\n    static contextType = TestsContext;\r\n\r\n    loadMore() {\r\n        const { urlToFetch } = this.props;\r\n        const { left, right, tests } = this.state;\r\n        console.log(urlToFetch)\r\n\r\n        fetch(urlToFetch, {\r\n            method: 'POST',\r\n            headers: {\r\n                ...getHeaders(),\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                isLimited: true,\r\n                left,\r\n                right\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                if (res.isTokenError) {\r\n                    this.context.logout();\r\n                    this.setState({\r\n                        ...this.state,\r\n                        isRedirectToLogin: true\r\n                    })\r\n                    return true;\r\n                }\r\n                res.tests.forEach(test => tests.push(test));\r\n                this.setState({\r\n                    ...this.state,\r\n                    tests,\r\n                    left: left + 3,\r\n                    right: right + 3,\r\n                    isMoreTests: res.isMoreTests\r\n                }, () => console.log(this.state.tests))\r\n            });\r\n    }\r\n    \r\n\r\n    render() {\r\n        const { type, user } = this.props;\r\n\r\n        const { isLoading, tests, isRedirectToLogin, isMoreTests } = this.state;\r\n\r\n        if (isRedirectToLogin) return (\r\n            <Redirect to=\"/app/login\" />\r\n        )\r\n\r\n        if (isLoading || !tests) return (\r\n            <Spinner />\r\n        )\r\n\r\n        let items = [];\r\n        tests.map((test, inx) => {\r\n            return items.push (\r\n                <Suspense key={ inx } fallback={ <Spinner size=\"sm\" /> } >\r\n                    <TestCard key={ `${ inx }-${ inx }` } type={ type } test={ test } user={ user || null } />\r\n                </Suspense> \r\n            )\r\n        })\r\n\r\n        return (\r\n            <InfiniteScroll\r\n                pageStart={ \"0\" }\r\n                loadMore={ this.loadMore.bind(this) }\r\n                hasMore={ isMoreTests }\r\n                loader={ <Spinner /> }\r\n                useWindow={ false } >\r\n                <div className=\"tests-container\">\r\n                    { items.length === 0 ? <h3>Oops, no tests available yet!</h3> : items }\r\n                </div>\r\n                \r\n            </InfiniteScroll>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport Logo from './img/logo1.svg'\r\nimport LogoLight from './img/logo-light1.svg'\r\nimport Hero from './img/hero.svg'\r\n\r\nimport './css/style.css'\r\n\r\nexport default class LandingPage extends Component {\r\n    render() {\r\n        return (\r\n            <header>\r\n                {/* <div className=\"bg-circle-lg bg-circle\"></div> */}\r\n                <div className=\"bg-circle-md bg-circle\"></div>\r\n                <div className=\"bg-circle-dm bg-circle\"></div>\r\n                <div className=\"nav\">\r\n                    <div className=\"nav-left\">\r\n                        <img className=\"light\" src={ Logo } alt=\"\" />\r\n                        <img className=\"dark\" src={ LogoLight } alt=\"\" />\r\n                        <h1>EasyTest</h1>\r\n                    </div>\r\n                </div>\r\n                <div className=\"hero\">\r\n                    <div className=\"hero-left\">\r\n                        <h1>Get your experience in online testing to a whole new level!</h1>\r\n                        <Link className=\"cta\" to=\"/app/\">Try it out!</Link>\r\n                    </div>\r\n                    <div className=\"hero-right\">\r\n                        <img src={ Hero } alt=\"\" />\r\n                    </div>\r\n                </div>\r\n                <div className=\"copyright\">\r\n                    &copy; 2020 Yegor Trussov\r\n                </div>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { NavLink, Link } from 'react-router-dom'\r\nimport ls from 'local-storage'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faHome, faAlignLeft, faPenAlt, faSignInAlt, faSignOutAlt, faUserPlus } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport Logo from './img/logo.svg'\r\n\r\nimport TestsContext from '../../context/TestsContext'\r\n\r\nclass Navbar extends Component {\r\n    state = {\r\n        isLoggedIn: false\r\n    }\r\n\r\n    static contextType = TestsContext;\r\n\r\n    logout() {\r\n        this.context.logout();\r\n        window.location.href = process.env.PUBLIC_URL + '/app/login'\r\n    }\r\n\r\n    render() {\r\n        const token = ls.get('token');\r\n        console.log(token);\r\n        \r\n        let isLoggedIn = token !== '';\r\n\r\n        return (\r\n            <nav>\r\n                <div className=\"nav-item nav-top\">\r\n                    <Link to=\"/\">\r\n                        <h2 className=\"logo\"><img src={ Logo } alt=\"\"/> <span className=\"text\">EasyTest</span></h2>\r\n                    </Link>\r\n                </div>\r\n                { \r\n                    isLoggedIn && (\r\n                        <div className=\"nav-item nav-middle\">\r\n                            <NavLink exact className=\"nav-link\" to={\"/app/\"}><FontAwesomeIcon className=\"icon\" icon={ faHome } /> <span className=\"text\">Home</span></NavLink>\r\n                            <NavLink className=\"nav-link\" to={\"/app/allTests\"}><FontAwesomeIcon className=\"icon\" icon={ faAlignLeft } /><span className=\"text\"> Tests</span></NavLink>\r\n                            <NavLink className=\"nav-link\" to={\"/app/createTest\"}><FontAwesomeIcon className=\"icon\" icon={ faPenAlt } /> <span className=\"text\">Create Test</span></NavLink>\r\n                        </div>\r\n                    )\r\n                }\r\n                \r\n                <div className=\"nav-item nav-bottom\">\r\n                    { !isLoggedIn && (\r\n                        <>\r\n                            <NavLink className=\"nav-link\" to={\"/app/login\"}><FontAwesomeIcon className=\"icon\" icon={ faSignInAlt } /> <span className=\"text\">Login</span></NavLink>\r\n                            <NavLink className=\"nav-link\" to={\"/app/register\"}><FontAwesomeIcon className=\"icon\" icon={ faUserPlus } /> <span className=\"text\">Register</span></NavLink>\r\n                        </>\r\n                    ) }\r\n                    { isLoggedIn && (\r\n                        <button className=\"nav-link\" onClick={ this.logout.bind(this) } ><FontAwesomeIcon className=\"icon\" icon={ faSignOutAlt } /> <span className=\"text\">Logout</span></button>\r\n                    ) }                    \r\n                </div>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar","import React, { Component, Suspense } from 'react'\r\nimport Spinner from '../Spinner/Spinner'\r\nimport { getHeaders } from '../../middleware/authMiddleware'\r\n\r\nimport TestsContext from '../../context/TestsContext'\r\n\r\nimport './css/style.css'\r\n\r\nconst TestsContainer = React.lazy(() => import('../reusableComponents/tests/TestsContainer'))\r\n\r\nexport default class Profile extends Component {\r\n    state = {\r\n        user: null,\r\n        passedTests: [],\r\n        avgResult: null,\r\n        isLoading: true,\r\n        nextLinkVal: null\r\n    }\r\n\r\n    static contextType = TestsContext;\r\n\r\n    componentDidMount() {\r\n        fetch(`${ this.context.proxy }/api/users/user`, {\r\n            headers: getHeaders()\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                if (res.isTokenError) {\r\n                    this.context.logout();\r\n                    window.location.href = '/app/login';\r\n                }\r\n                console.log(res.passedTests);\r\n                \r\n                res.passedTests.reverse();\r\n\r\n                let avgResult = 0;\r\n                res.passedTests.forEach(test => {\r\n                    avgResult += test.points / test.maxPoints;\r\n                    console.log(avgResult)\r\n                })\r\n                avgResult /= res.passedTests.length;\r\n                avgResult = Math.floor(avgResult * 100);\r\n\r\n                this.setState({\r\n                    user: res,\r\n                    avgResult,\r\n                    isLoading: false,\r\n                })\r\n            })\r\n    }\r\n\r\n    render() {\r\n        const { user, isLoading, avgResult } = this.state;\r\n\r\n        console.log(user)\r\n\r\n        if (isLoading || !user) return (\r\n            <Spinner />\r\n        )\r\n\r\n        const urlToFetch = `${ this.context.proxy }/api/tests/passedTests/${ user._id }`;\r\n\r\n        return (\r\n            <>\r\n                <h1 className=\"heading\">\r\n                    Hello, { user.name }!\r\n                </h1>\r\n                <div className=\"profile-block\">\r\n                    <div className=\"profile-img\">\r\n                        <img src=\"/img/profile-img.svg\" alt=\"\"/>\r\n                    </div>\r\n                    <div className=\"profile-info\">\r\n                        <div className=\"profile-info__block\">\r\n                            <span className=\"info-text\">Name: { user.name }</span>\r\n                        </div>\r\n                        <div className=\"profile-info__block\">\r\n                            <span className=\"info-text\">Tests passed: { user.passedTests.length }</span>\r\n                        </div>\r\n                        <div className=\"profile-info__block\">\r\n                            <span className=\"info-text\">Average result: { avgResult }%</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                { user.passedTests.length > 0 ? ( <h2>Your recent tests: </h2> ) : ( <h2>You haven't passed any tests yet!</h2> ) }\r\n                { <Suspense fallback={ <Spinner /> }>\r\n                    <TestsContainer type=\"result\" urlToFetch={ urlToFetch } user={ user } />\r\n                </Suspense> }\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React, { Component, Suspense } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nimport TestsContext from '../../context/TestsContext'\r\nimport Spinner from '../Spinner/Spinner'\r\n\r\nimport './css/style.css'\r\n\r\nconst TestsContainer = React.lazy(() => import('../reusableComponents/tests/TestsContainer'))\r\n\r\nexport default class Tests extends Component {\r\n    state = {\r\n        isLoading: false,\r\n        tests: [],\r\n        isRedirectToLogin: false,\r\n        left: 0,\r\n        right: 3,\r\n        isMoreTests: true\r\n    }\r\n\r\n    static contextType = TestsContext;    \r\n\r\n    render() {\r\n        const { isLoading, isRedirectToLogin } = this.state;\r\n\r\n        const linkToFetch = `${ this.context.proxy }/api/tests/allTests`;\r\n\r\n        if (isRedirectToLogin) return (\r\n            <Redirect to=\"/app/login\" />\r\n        )\r\n\r\n        if (isLoading) return (\r\n            <Spinner />\r\n        )\r\n\r\n        return (\r\n            <>\r\n                <h1 className=\"heading\">Recent tests: </h1>\r\n                <Suspense fallback={ <Spinner /> }>\r\n                    <TestsContainer \r\n                        urlToFetch={ linkToFetch }\r\n                        type={ \"full\" } />\r\n                </Suspense>\r\n                \r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nimport './css/style.css'\r\n\r\nconst Input = ({ name, onChange, type, isMini }) => {\r\n    const handleChange = (e) => {\r\n        console.log(e);\r\n        onChange(e);\r\n    }\r\n\r\n    const extraClassName = isMini ? 'mini' : '';\r\n\r\n    return (\r\n        <div className={ \"input-group \" + extraClassName}>\r\n            <input autoComplete={ isMini ? \"off\" : \"on\" } className={ extraClassName } type={ type } name={ name } onChange={ (e) => handleChange(e) } />\r\n            <label htmlFor={ name }></label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input\r\n","import React from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport './css/style.css'\r\n\r\nconst BackLink = ({ link }) => {\r\n    let history = useHistory();\r\n\r\n    return (\r\n        <div className=\"page-top\">\r\n            <span onClick={ () => history.goBack() } className=\"a\">\r\n                <FontAwesomeIcon icon={ faArrowLeft } /> Back \r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BackLink;","import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport Spinner from '../Spinner/Spinner'\r\n\r\nimport PointsCard from '../reusableComponents/PointsCard'\r\nimport Input from '../reusableComponents/inputField/Input'\r\n\r\nimport { convertTime } from '../../middleware/convertTime'\r\n\r\nimport './css/style.css'\r\n\r\nimport TestsContext from '../../context/TestsContext'\r\nimport { getHeaders } from '../../middleware/authMiddleware';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faThumbsUp } from '@fortawesome/free-regular-svg-icons'\r\nimport { faThumbsUp as faThumbsUpS } from '@fortawesome/free-solid-svg-icons'\r\nimport BackLink from '../reusableComponents/backLink/BackLink';\r\n\r\nexport default class TestInfo extends Component {\r\n    state = {\r\n        isLoading: true,\r\n        test: null,\r\n        testResults: null,\r\n        usernames: null,\r\n        errors: [],\r\n        isRedirectToLogin: false,\r\n        hasLiked: false\r\n    };\r\n\r\n    static contextType = TestsContext;\r\n\r\n    componentDidMount() {\r\n        const testId = this.props.match.params.testId;\r\n        \r\n        fetch(`${ this.context.proxy }/api/tests/testInfo/${ testId }`, {\r\n            headers: {\r\n                ...getHeaders()\r\n            }\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                if (res.isTokenError) {\r\n                    this.context.logout();\r\n                    this.setState({\r\n                        ...this.state,\r\n                        isRedirectToLogin: true\r\n                    })\r\n                } else {\r\n                    let hasLiked = false;\r\n                    if (res.likes.find((like) => like === this.context.userId))\r\n                        hasLiked = true;\r\n                    this.setState({\r\n                        ...this.state,\r\n                        isLoading: false,\r\n                        test: res,\r\n                        hasLiked\r\n                    })\r\n                }\r\n            })\r\n        fetch(`${ this.context.proxy }/api/tests/testResults/${ testId }`)\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                res.testResults.sort((res1, res2) => {\r\n                    return res2.points - res1.points;\r\n                })\r\n                this.setState({\r\n                    isLoading: false,\r\n                    testResults: res.testResults,\r\n                    usernames: res.usernames\r\n                })\r\n            })\r\n    }\r\n\r\n    setAccessKey(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            currentAccessKey: e.target.value\r\n        })\r\n    }\r\n\r\n    goToTest() {\r\n        const { test, errors, testResults } = this.state;\r\n        const { maxAttempts } = test;\r\n        let usedAttemtps = 0;\r\n        testResults.forEach(res => {\r\n            if (res.userId === this.context.userId) \r\n                usedAttemtps++;\r\n        })\r\n        console.log(usedAttemtps, maxAttempts);\r\n        \r\n        if (maxAttempts && usedAttemtps >= maxAttempts) {\r\n            errors['attempts'] = 'You have not got any attempts left!';\r\n            this.setState({\r\n                ...this.state,\r\n                errors\r\n            })\r\n        } else {\r\n            const { currentAccessKey } = this.state;\r\n            const { accessKey, _id, isProtected } = test;\r\n            if (accessKey === currentAccessKey || !isProtected) {\r\n                window.location.href = `/app/passTest/${ _id }`\r\n            } else {\r\n                let { errors } = this.state;\r\n                errors['keyError'] = 'Incorrect access key!';\r\n                this.setState({\r\n                    ...this.state,\r\n                    errors\r\n                })\r\n            }\r\n        }\r\n        \r\n        \r\n    }   \r\n    \r\n    componentDidUpdate() {\r\n        let field = document.querySelector('span.field');\r\n        console.log(field);\r\n        \r\n        if (field && field !== null) field.addEventListener('keypress',function(e){ \r\n            if (e.which === 13) {\r\n                e.preventDefault();\r\n            }\r\n        });\r\n    }\r\n\r\n    setLike() {\r\n        const { test, hasLiked } = this.state;\r\n\r\n        fetch(`${ this.context.proxy }/api/tests/likeTest/${ test._id }`, {\r\n            method: 'POST',\r\n            headers: {\r\n                ...getHeaders,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                isIncrease: !hasLiked,\r\n                userId: this.context.userId\r\n            })\r\n        }) \r\n            .then(res => res.json())\r\n            .then(res => {\r\n                let { test } = this.state;\r\n                test.likes = res.likes;\r\n                console.log(test.likes.length)\r\n                this.setState({\r\n                    ...this.state,\r\n                    test,\r\n                    hasLiked: !hasLiked\r\n                }, () => console.log(this.state.hasLiked))\r\n            })\r\n    }\r\n\r\n    render() {\r\n        const { isLoading, test, testResults, errors, isRedirectToLogin, hasLiked } = this.state;\r\n\r\n        if (isRedirectToLogin) return (\r\n            <Redirect to='/app/login' />\r\n        )\r\n        \r\n        if (isLoading || test === null) return (\r\n            <Spinner />\r\n        )\r\n\r\n        const { maxAttempts, timeLimit } = test;\r\n        let usedAttemtps = 0;\r\n        if (testResults) testResults.forEach(res => {\r\n            if (res.userId === this.context.userId) \r\n                usedAttemtps++;\r\n        })\r\n        const attemtpsLeft = maxAttempts - usedAttemtps;\r\n\r\n        return (\r\n            <div>\r\n                <BackLink />\r\n                <h1>{ test.title }</h1>\r\n                <p>{ test.description }</p>\r\n                { test.isProtected && (\r\n                    //return (\r\n                        <>\r\n                            <br/>\r\n                            <label htmlFor=\"title\">To start the test, you need to type in the secret key!</label> <br/>\r\n                            <Input type=\"text\" name=\"secretKey\" isMini={ true } onChange={ (e) => this.setAccessKey(e) } />\r\n                            {/* <span id=\"field\" className=\"field\" contenteditable=\"true\" onInput={ (e) => this.setAccessKey(e) } type=\"text\" name=\"title\"></span> */}\r\n                            <span className=\"error-input\">{ errors['keyError'] }</span>\r\n                        </>\r\n                    //)\r\n                    \r\n                 ) }\r\n                 { maxAttempts && (\r\n                    <div className=\"attempts-block\">\r\n                        <span className=\"max-attemtts\">Attempts left: { attemtpsLeft }</span>\r\n                    </div>\r\n                 ) }\r\n                 { timeLimit && (\r\n                    <div className=\"attempts-block\">\r\n                        <span className=\"max-attemtts\">Time limit: { convertTime(timeLimit) }</span>\r\n                    </div>\r\n                 ) }\r\n                <br/>\r\n                {/* <Link class=\"btn btn-cta\" to={ `/app/passTest/${ test._id }` }>\r\n                    Pass test!\r\n                </Link> */}\r\n                <span className=\"error-input\">{ errors['attempts'] }</span>\r\n                <div className=\"btn-block\">\r\n                    <button onClick={ () => this.goToTest() } className=\"btn btn-cta\">Pass test!</button>\r\n                    <button className=\"btn like-btn\" onClick={ this.setLike.bind(this) } icon={ faThumbsUp }> \r\n                        <FontAwesomeIcon className=\"icon\" icon={ hasLiked ? faThumbsUpS : faThumbsUp } />\r\n                        <span>{ test.likes.length }</span>\r\n                    </button>\r\n                </div>\r\n                \r\n                <div className=\"results\">\r\n                    <h3>Results: </h3>\r\n                    <table>\r\n                        <col className=\"username\" />\r\n                        <col className=\"points\" />\r\n                        <tr>\r\n                            <th>User</th>\r\n                            <th className=\"points\">Points</th>\r\n                        </tr>\r\n                        { testResults === null ? () => {\r\n                            return (\r\n                                <Spinner />\r\n                            )\r\n                        } : testResults.map(res => {                            \r\n                            return (\r\n                                <tr className='resultTr' key={ res.userId + res.points }>\r\n                                    <td>{ res.username }</td>\r\n                                    <td className=\"points\">\r\n                                        <PointsCard points={ res.points } maxPoints={ res.answers.length } />\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        }) }\r\n                    </table>\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","export const convertTimeShort = seconds => {\r\n    return new Date(seconds * 1000).toISOString().substr(11, 8);\r\n};\r\n\r\nexport const convertTime = seconds => {\r\n    const hrs = Math.floor(seconds / 3600);\r\n    const mins = Math.floor((seconds - hrs * 3600) / 60);\r\n    const secs = seconds - hrs * 3600 - mins * 60;\r\n\r\n    let result = '';\r\n    if (hrs) \r\n        result += hrs.toString() + ` hour${ hrs !== 1 ? 's' : '' } `;\r\n    if (mins)\r\n        result += mins.toString() + ` minute${ mins !== 1 ? 's' : '' } `;\r\n    if (secs) \r\n        result += secs.toString() + ` second${ secs !== 1 ? 's' : '' } `;\r\n    \r\n    return result;\r\n};\r\n","import React, { Component, Suspense } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport TestsContext from '../../context/TestsContext'\r\nimport Spinner from '../Spinner/Spinner';\r\nimport TestsContainer from '../reusableComponents/tests/TestsContainer'\r\n\r\nexport default class CreateTest extends Component {\r\n    state = {\r\n        createdTests: [],\r\n        isLoading: false\r\n    }\r\n\r\n    static contextType = TestsContext;\r\n\r\n    componentDidMount() {\r\n        if (!this.context.userId) \r\n            window.location.href = '/app/login';\r\n        fetch(`${ this.context.proxy }/api/tests/createdTests/${ this.context.userId }`, {\r\n            method: 'POST'\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                \r\n                this.setState({\r\n                    createdTests: res.tests,\r\n                    isLoading: false\r\n                })\r\n            })\r\n    }\r\n    \r\n    render() {\r\n        const { createdTests, isLoading } = this.state;\r\n\r\n        if (isLoading) return (\r\n            <Spinner />\r\n        )\r\n\r\n        let urlToFetch = `${ this.context.proxy }/api/tests/createdTests/${ this.context.userId }`;\r\n\r\n        return (\r\n            <>\r\n                <h1 className=\"heading\">\r\n                    Currently, you have { createdTests.length } created tests\r\n                </h1>\r\n                <Link to=\"/app/createTestForm\" className=\"btn btn-cta\">\r\n                    New test\r\n                </Link>\r\n                { <Suspense fallback={ <Spinner /> }>\r\n                    <TestsContainer type=\"created\" urlToFetch={ urlToFetch } user={ null } />\r\n                </Suspense> }\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nimport Spinner from '../Spinner/Spinner'\r\n\r\nimport './css/style.css'\r\n\r\nimport TestsContext from '../../context/TestsContext'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCheckCircle, faTimesCircle } from '@fortawesome/free-regular-svg-icons'\r\nimport BackLink from '../reusableComponents/backLink/BackLink'\r\n\r\nexport default class TestResult extends Component {\r\n    state = {\r\n        isLoading: true,\r\n        test: null,\r\n        answers: null\r\n    }\r\n\r\n    static contextType = TestsContext;\r\n\r\n    componentDidMount() {\r\n        const userId = this.props.match.params.userId;\r\n        const resultId = this.props.match.params.resultId;\r\n        \r\n        fetch(`${ this.context.proxy }/api/tests/testResult/${ userId }/${ resultId }`)\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                \r\n                this.setState({\r\n                    isLoading: false,\r\n                    answers: res.answers,\r\n                    test: res.test\r\n                })\r\n            })\r\n    }\r\n    \r\n\r\n    render() {\r\n        const { isLoading, test, answers } = this.state;\r\n        if (test) console.log(test.questions[0]);\r\n        console.log(answers);\r\n        \r\n        \r\n\r\n        if (isLoading) return (\r\n            <Spinner />\r\n        )\r\n\r\n        return (\r\n            <div>\r\n                <BackLink />\r\n                <h1 className=\"heading\">\r\n                    Test result for \"{ test.title }\"\r\n                </h1>\r\n                <div className=\"result-table\">\r\n                    <table>\r\n                        <col className=\"main\" />\r\n                        { answers.map(ans => {\r\n                            return (\r\n                                <col className=\"answer\" />\r\n                            )\r\n                        }) }\r\n                        <tr className=\"first\">\r\n                            <th className=\"first main\">Question No.</th>\r\n                            { answers.map((ans, inx) => {\r\n                                return (\r\n                                    <th className=\"first ans\">{ inx + 1 }</th>\r\n                                )\r\n                            }) }\r\n                        </tr>\r\n                        <tr>\r\n                            <th className=\"main\">Result: </th>\r\n                            { answers.map((ans, inx) => {\r\n                                let extraClassName = '';\r\n                                console.log(toString(ans));\r\n                                \r\n                                let isCorrect = ans.toString() === test.questions[inx].correctAnswerId;\r\n                                \r\n                                if (parseInt(ans) === parseInt(test.questions[inx].correctAnswerId)) \r\n                                    extraClassName = 'correct';\r\n                                else \r\n                                    extraClassName = 'wrong'\r\n                                return (\r\n                                    <th className={ `answerr ans ${ extraClassName }` }>{ isCorrect ? (<FontAwesomeIcon className=\"icon\" icon={ faCheckCircle } /> ) : (<FontAwesomeIcon className=\"icon\" icon={ faTimesCircle } />) }</th>\r\n                                )\r\n                            }) }\r\n                        </tr>\r\n                    </table>\r\n                </div>\r\n                { answers.map((ans, inx) => {\r\n                    let isCorrect = ans.toString() === test.questions[inx].correctAnswerId;\r\n                    console.log(test.questions);\r\n                    \r\n                    let extraClassName = '';\r\n                    if (!isCorrect) extraClassName = 'wrong';\r\n                    let question = test.questions[inx];\r\n                    console.log(question.answers[parseInt(question.correctAnswerId)]);\r\n                    \r\n                    return (\r\n                        <div className=\"question-ans\">\r\n                            <h3>{ inx + 1 }. { question.title }</h3>\r\n                            { ans ===  0 ? (\r\n                                <span className={ \"ans-text \" + extraClassName}>\r\n                                    Your answer: -\r\n                                </span>\r\n                            ) : (\r\n                                <span className={ \"ans-text \" + extraClassName}>\r\n                                    Your answer: { ans }) { question.answers[ans - 1].text }\r\n                                </span>\r\n                            ) } \r\n                            <span className=\"ans-text\">\r\n                                Correct answer: { question.correctAnswerId }) { question.answers[parseInt(question.correctAnswerId) - 1].text }\r\n                            </span>                           \r\n                        </div>\r\n                    )\r\n                }) }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nimport Spinner from '../Spinner/Spinner'\r\nimport Input from '../reusableComponents/inputField/Input'\r\n\r\nimport TestsContext from '../../context/TestsContext'\r\n\r\nimport './css/style.css'\r\n\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCheck } from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport default class CreateTestForm extends Component {\r\n    state = {\r\n        questions: [{\r\n            title: '',\r\n            answers: [{\r\n                text: '',\r\n                answerId: '1'\r\n            }, {\r\n                text: '',\r\n                answerId: '2'\r\n            }],\r\n            correctAnswerId: '1'\r\n        }],\r\n        title: '',\r\n        description: '',\r\n        subject: '',\r\n        isProtected: false,\r\n        accessKey: '',\r\n        creator: this.context.userId,\r\n        timeErrorMsg: '',\r\n        isLoading: false,\r\n        errors: [],\r\n        maxAttempts: null,\r\n        isLimitedAttempts: false,\r\n        isLimitedTime: false,\r\n        timeLimit: null\r\n    }\r\n\r\n    static contextType = TestsContext;\r\n\r\n    componentDidMount() {\r\n                \r\n        var x, i, selElmnt, a, b, c;\r\n        /* Look for any elements with the class \"custom-select\": */\r\n        x = document.getElementsByClassName('custom-select');\r\n        console.log(x);\r\n\r\n        let timeValues = [5 * 60, 10 * 60, 20 * 60, 30 * 60, 1 * 60 * 60, 1.5 * 60 * 60];\r\n\r\n        const setst = (j) => {\r\n            console.log(\"hhhh\");\r\n            \r\n            this.setState({\r\n                ...this.state,\r\n                timeLimit: timeValues[j - 1]\r\n            }, () => console.log(this.state))\r\n        }\r\n\r\n        for (i = 0; i < x.length; i++) {\r\n            selElmnt = x[i].getElementsByTagName('select')[0];\r\n            /* For each element, create a new DIV that will act as the selected item: */\r\n            a = document.createElement('DIV');\r\n            a.setAttribute('class', 'select-selected');\r\n            a.innerHTML = selElmnt.options[selElmnt.selectedIndex].innerHTML;\r\n            x[i].appendChild(a);\r\n            /* For each element, create a new DIV that will contain the option list: */\r\n            b = document.createElement('DIV');\r\n            b.setAttribute('class', 'select-items select-hide');\r\n            for (let j = 1; j < selElmnt.length; j++) {\r\n                /* For each option in the original select element,\r\n            create a new DIV that will act as an option item: */\r\n                c = document.createElement('DIV');\r\n                c.innerHTML = selElmnt.options[j].innerHTML;\r\n                console.log(selElmnt);\r\n                \r\n                c.addEventListener('click', function(e) {\r\n                    /* When an item is clicked, update the original select box,\r\n                and the selected item: */\r\n                    \r\n                    var y, i, k, s, h;\r\n                    s = this.parentNode.parentNode.getElementsByTagName('select')[0];\r\n                    h = this.parentNode.previousSibling;\r\n                    console.log(timeValues[j - 1]);\r\n                    // this.setState({\r\n                    //     ...this.state,\r\n                    //     timeLimit: timeValues[j - 1]\r\n                    // })\r\n                    \r\n                    \r\n                    for (i = 0; i < s.length; i++) {\r\n                        if (s.options[i].innerHTML === this.innerHTML) {\r\n                            s.selectedIndex = i;\r\n\r\n                            h.innerHTML = this.innerHTML;\r\n                            y = this.parentNode.getElementsByClassName(\r\n                                'same-as-selected'\r\n                            );\r\n                            for (k = 0; k < y.length; k++) {\r\n                                y[k].removeAttribute('class');\r\n                            }\r\n                            this.setAttribute('class', 'same-as-selected');\r\n                            break;\r\n                        }\r\n                    }\r\n                    h.click();\r\n\r\n                    setst(j);\r\n                });\r\n                b.appendChild(c);\r\n            }\r\n            x[i].appendChild(b);\r\n            a.addEventListener('click', function(e) {\r\n                /* When the select box is clicked, close any other select boxes,\r\n            and open/close the current select box: */\r\n                e.stopPropagation();\r\n                closeAllSelect(this);\r\n                this.nextSibling.classList.toggle('select-hide');\r\n                this.classList.toggle('select-arrow-active');\r\n            });\r\n        }\r\n\r\n        function closeAllSelect(elmnt) {\r\n            /* A function that will close all select boxes in the document,\r\n        except the current select box: */\r\n            var x,\r\n                y,\r\n                i,\r\n                arrNo = [];\r\n            x = document.getElementsByClassName('select-items');\r\n            y = document.getElementsByClassName('select-selected');\r\n            for (i = 0; i < y.length; i++) {\r\n                if (elmnt === y[i]) {\r\n                    arrNo.push(i);\r\n                } else {\r\n                    y[i].classList.remove('select-arrow-active');\r\n                }\r\n            }\r\n            for (i = 0; i < x.length; i++) {\r\n                if (arrNo.indexOf(i)) {\r\n                    x[i].classList.add('select-hide');\r\n                }\r\n            }\r\n        }\r\n\r\n        document.addEventListener('click', closeAllSelect);\r\n\r\n    }\r\n    \r\n\r\n    handleAddAnswer(quesId) {\r\n        const { questions } = this.state;        \r\n        let len = questions[quesId].answers.length;\r\n        console.log(len.toString());\r\n        \r\n        if (questions[quesId].answers.length === 6) return;\r\n        questions[quesId].answers.push({\r\n            text: '',\r\n            answerId: (len + 1).toString()\r\n        })\r\n        console.log(questions[quesId].answers);\r\n        \r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        })\r\n    }\r\n\r\n    handleAddQuestion() {\r\n        const { questions } = this.state;\r\n        if (questions.length === 20) return;\r\n        questions.push({\r\n            title: '',\r\n            answers: [{\r\n                text: '',\r\n                answerId: '1'\r\n            }, {\r\n                text: '',\r\n                answerId: '2'\r\n            }],\r\n            correctAnswerId: '1'\r\n        }) \r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        })\r\n    }\r\n\r\n    setQuestionTitle(e, index) {\r\n        let { questions } = this.state;\r\n        questions[index].title = e.target.value;\r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        });\r\n    }\r\n\r\n    setAnswerText(e, index, inx) {\r\n        console.log(e.target.value);\r\n        \r\n        let { questions } = this.state;\r\n        console.log(questions[index].answers, inx);\r\n        questions[index].answers[inx].text = e.target.value;\r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        })\r\n    }\r\n\r\n    setTestTitle(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            title: e.target.value\r\n        })\r\n    }\r\n\r\n    setTestDescription(e) {        \r\n        this.setState({\r\n            ...this.state,\r\n            description: e.target.value\r\n        })\r\n    }\r\n\r\n    setTestSubject(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            subject: e.target.value\r\n        }, () => console.log(this.state.subject))\r\n    }\r\n\r\n    setProtectedState(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            isProtected: !this.state.isProtected,\r\n            accessKey: ''\r\n        })\r\n    }\r\n\r\n    setAttemptsState(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            isLimitedAttempts: !this.state.isLimitedAttempts,\r\n            maxAttempts: 1\r\n        })\r\n    }\r\n\r\n    setTimeLimitState(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            isLimitedTime: !this.state.isLimitedTime,\r\n            timeLimit: null\r\n        })\r\n    }\r\n\r\n    setAccessKey(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            accessKey: e.target.value\r\n        })\r\n    }\r\n\r\n    setAttemptsNumber(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            maxAttempts: parseInt(e.target.value)\r\n        })\r\n        console.log(this.state);\r\n        \r\n    }\r\n\r\n    changeAttemptsNumber(value) {\r\n        let { maxAttempts } = this.state;\r\n\r\n        if (value > 0) \r\n            maxAttempts = Math.min(maxAttempts + value, 10);\r\n        else \r\n            maxAttempts = Math.max(maxAttempts + value, 1);\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            maxAttempts\r\n        })\r\n    }\r\n\r\n    setCorrectAnswerId(quesIndex, ansId) {\r\n        let { questions } = this.state;\r\n        questions[quesIndex].correctAnswerId = ansId;\r\n        console.log(ansId);\r\n        \r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        })\r\n    }\r\n\r\n    handleAddTest() {\r\n        this.setState({\r\n            ...this.state,\r\n            isLoading: true\r\n        })\r\n\r\n        let newTest = this.state;\r\n        \r\n        console.log(this.state);\r\n        \r\n        let errors = [];\r\n\r\n        if (!newTest.title) \r\n            errors['title'] = 'The test must have a title'\r\n        if (!newTest.subject) \r\n            errors['subject'] = 'The test must have a subject'\r\n        newTest.questions.map(ques => {\r\n            if (!ques.title) \r\n                errors['questions'] = 'Questions must not be empty';\r\n            ques.answers.map(ans => {\r\n                if (!ans.text) \r\n                    errors['answers'] = 'Answers must not be empty';\r\n                return true;\r\n            })\r\n            return true;\r\n        })\r\n\r\n        if (errors['title'] || errors['subject'] || errors['questions'] || errors['answers']) {\r\n            this.setState({\r\n                ...this.state,\r\n                errors\r\n            });\r\n            return;\r\n        }\r\n\r\n        let isErrors = false;\r\n\r\n        if (newTest.title.length >= 30) {\r\n            errors['title'] = 'Title must not be longer than 30 syllables';\r\n            isErrors = true;\r\n        }\r\n        if (newTest.subject.length >= 18) {\r\n            errors['title'] = 'Title subject not be longer than 18 syllables';\r\n            isErrors = true;\r\n        }\r\n        if (newTest.description.length >= 400) {\r\n            errors['title'] = 'Title description not be longer than 400 syllables';\r\n            isErrors = true;\r\n        }\r\n\r\n        if (isErrors) {\r\n            this.setState({\r\n                ...this.state,\r\n                errors\r\n            })\r\n            return;\r\n        }\r\n\r\n        if (!this.context.userId) \r\n            window.location.href = '/app/login'\r\n        \r\n        fetch(`${ this.context.proxy }/api/tests/createTest`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'x-auth-token': this.context.token\r\n            },\r\n            body: JSON.stringify(this.state)\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                \r\n                if (!res.success) {\r\n                    if (res.isTimeErr) {\r\n                        this.setState({\r\n                            ...this.state,\r\n                            timeErrorMsg: 'You cannot create more than 1 test in 5 minutes!',\r\n                            isLoading: false\r\n                        })\r\n                    }\r\n                } else {\r\n                    window.location.href = '/app/allTests'\r\n                }\r\n            })\r\n    }\r\n\r\n    deleteAnswer(quesId, ansId) {\r\n        let { questions } = this.state;\r\n        if (questions[quesId].answers.length <= 2) return;\r\n\r\n        let inx = parseInt(ansId);\r\n        let corrAnswer = questions[quesId].correctAnswerId;\r\n        if (corrAnswer.toString() === (ansId + 1).toString()) {\r\n            if (ansId === 0) {\r\n                questions[quesId].correctAnswerId = '1';\r\n            } else {                \r\n                questions[quesId].correctAnswerId = (ansId).toString();\r\n            }\r\n        } \r\n        for (let i = inx; i < questions[quesId].answers.length; i++) {\r\n            questions[quesId].answers[i].answerId = (parseInt(questions[quesId].answers[i].answerId) - 1).toString();\r\n            if (i !== inx)\r\n                document.getElementById(`_${ quesId }-${ i - 1 }`).value = questions[quesId].answers[i].text;\r\n        }  \r\n        console.log(+questions[quesId].correctAnswerId, questions[quesId].answers.length)\r\n        if (+questions[quesId].correctAnswerId >= questions[quesId].answers.length) \r\n            questions[quesId].correctAnswerId =  (questions[quesId].answers.length - 1).toString();\r\n        console.log(questions[quesId]);\r\n         \r\n        questions[quesId].answers.splice(ansId, 1);\r\n\r\n        console.log(questions[quesId].answers);\r\n        \r\n\r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        })\r\n    }\r\n\r\n    deleteQuestion(quesId) {\r\n        let { questions } = this.state;\r\n        if (questions.length === 1) return;\r\n        \r\n        questions.splice(quesId, 1);\r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { questions, isProtected, timeErrorMsg, isLoading,  errors, isLimitedAttempts, isLimitedTime, maxAttempts } = this.state;\r\n        \r\n        const letters = ['A', 'B', 'C', 'D', 'E', 'F'];\r\n\r\n        return (\r\n            <div>\r\n                <h1 className=\"heading\">\r\n                    Create test \r\n                </h1>\r\n                <div className=\"test-basic-info\">\r\n                    <div className=\"info-group\">\r\n                        <label htmlFor=\"title\">Test name: </label>\r\n                        <Input type=\"text\" onChange={ (e) => this.setTestTitle(e) } isMini={ true } name=\"title\" />\r\n                        <span className=\"error-input\">{ errors['title'] }</span>\r\n                    </div>\r\n                    <div className=\"info-group\">\r\n                        <label htmlFor=\"subject\">Subject: </label>\r\n                        <Input type=\"text\" onChange={ (e) => this.setTestSubject(e) } isMini={ true } name=\"title\" />\r\n                        <span className=\"error-input\">{ errors['subject'] }</span>\r\n                    </div>\r\n                    <div className=\"info-group\">\r\n                        <label htmlFor=\"description\">Description: </label>\r\n                        <textarea className=\"\" onChange={ (e) => this.setTestDescription(e) } name=\"description\" id=\"\" cols=\"30\" rows=\"10\"></textarea>\r\n                    </div>\r\n                    <div className=\"info-group-checkbox\">\r\n                        <div className=\"pretty p-icon p-smooth p-thick p-curve\">\r\n                            <input type=\"checkbox\" onChange={ this.setProtectedState.bind(this) } />\r\n                            <div className=\"state p-success\">\r\n                                <i className=\"icon\">\r\n                                <FontAwesomeIcon className=\"check-icon\" icon={ faCheck } />\r\n                                </i>\r\n                                <label>Protected</label>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    { isProtected && (\r\n                        <div className=\"info-group\">\r\n                            <label htmlFor=\"key\">Secret key: </label>\r\n                            <Input onChange={ (e) => this.setAccessKey(e) } isMini={ true } name=\"accessKey\" type=\"text\" />\r\n                        </div>\r\n                    ) }\r\n                    <div className=\"info-group-checkbox\">\r\n                        <div className=\"pretty p-icon p-smooth p-thick p-curve\">\r\n                            <input type=\"checkbox\" onChange={ this.setAttemptsState.bind(this) } />\r\n                            <div className=\"state p-success\">\r\n                                <i className=\"icon\">\r\n                                <FontAwesomeIcon className=\"check-icon\" icon={ faCheck } />\r\n                                </i>\r\n                                <label>Limited attempts</label>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    { isLimitedAttempts && (\r\n                        <div className=\"info-group\">\r\n                            <label htmlFor=\"key\">Maximum attempts: </label>\r\n                            <div className=\"btn-group\">\r\n                                <button className=\"increment-btn\" onClick={ () => this.changeAttemptsNumber(-1) }> <span>-</span> </button>\r\n                                <span className=\"attempts-num\">{ maxAttempts }</span>\r\n                                <button className=\"increment-btn\" onClick={ () => this.changeAttemptsNumber(1) }> <span>+</span> </button>\r\n                            </div>\r\n                            \r\n                        </div>\r\n                    ) }\r\n                    <div className=\"info-group-checkbox\">\r\n                        <div className=\"pretty p-icon p-smooth p-thick p-curve\">\r\n                            <input type=\"checkbox\" onChange={ this.setTimeLimitState.bind(this) } />\r\n                            <div className=\"state p-success\">\r\n                                <i className=\"icon\">\r\n                                <FontAwesomeIcon className=\"check-icon\" icon={ faCheck } />\r\n                                </i>\r\n                                <label>Limited time</label>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    { isLimitedTime ? (\r\n                        <div className=\"custom-select\" style={{ width: 300 + 'px' }}>\r\n                            <select>\r\n                                <option value=\"0\">Select time limit:</option>\r\n                                <option value=\"1\">5 minutes</option>\r\n                                <option value=\"2\">10 minutes</option>\r\n                                <option value=\"3\">20 minuted</option>\r\n                                <option value=\"4\">30 minutes</option>\r\n                                <option value=\"5\">1 hour</option>\r\n                                <option value=\"6\">1.5 hours</option>\r\n                            </select>\r\n                        </div>\r\n                    ) : (\r\n                        <div className=\"custom-select\" style={{ width: 300 + 'px', visibility: 'hidden' }}>\r\n                            <select>\r\n                                <option value=\"0\">Select time limit:</option>\r\n                                <option value=\"1\">5 minutes</option>\r\n                                <option value=\"2\">10 minutes</option>\r\n                                <option value=\"3\">20 minuted</option>\r\n                                <option value=\"4\">30 minutes</option>\r\n                                <option value=\"5\">1 hour</option>\r\n                                <option value=\"6\">1.5 hours</option>\r\n                            </select>\r\n                        </div>\r\n                    ) }\r\n                    \r\n                </div>\r\n                <div className=\"questions\">\r\n                    { questions.map((ques, index) => {\r\n                        return (\r\n                            <div key={ index } className=\"question-container\">\r\n                                \r\n                                <h3 className=\"question-container__title\">\r\n                                    <div className=\"delete-question-btn\">\r\n                                        <span>&times;</span>\r\n                                    </div>\r\n                                    <span>{ index + 1 }.</span>  <Input type=\"text\" isMini={ true } onChange={ (e) => this.setQuestionTitle(e, index) } name=\"questionTitle\" />\r\n                                </h3>\r\n                                <div className=\"question-container__answers\">\r\n                                    { ques.answers.map((ans, inx) => {\r\n                                        let extraClassName = '';\r\n\r\n                                        console.log(ques.correctAnswerId.toString() ===(inx + 1).toString())\r\n                                        \r\n                                        if (ques.correctAnswerId.toString() === (inx + 1).toString()) \r\n                                            extraClassName = 'selected';\r\n                                        console.log(extraClassName)\r\n\r\n                                        return (\r\n                                            <div key={ `${ inx }-${ index }` } className={ \"answer-block \" + extraClassName }>\r\n                                                <div className=\"answer-block__letter\" onClick={ () => this.setCorrectAnswerId(index, ans.answerId) }><span>{ letters[inx] }</span></div>\r\n                                                <div className=\"answer-block__text\">\r\n                                                    <input autoComplete=\"off\" id={ `_${ index }-${ inx }` } type=\"text\" onChange={(e) => this.setAnswerText(e, index, inx) } />\r\n                                                    <button className=\"btn-delete\" onClick={ () => this.deleteAnswer(index, inx) }>\r\n                                                        <span>&times;</span>\r\n                                                    </button>\r\n                                                </div>\r\n                                            </div>\r\n                                        )\r\n                                    }) }\r\n                                    <button onClick={ this.handleAddAnswer.bind(this, index) } className=\"add-question\"><span>+</span></button>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    }) }\r\n                    <button onClick={ this.handleAddQuestion.bind(this) } className=\"new-question btn-secondary\">\r\n                        New question\r\n                    </button>\r\n                </div>\r\n                { timeErrorMsg && (\r\n                    <span className=\"error-msg\">\r\n                        { timeErrorMsg }\r\n                    </span>\r\n                ) }\r\n\r\n                { errors['questions'] && (\r\n                    <span className=\"error-msg\">\r\n                        { errors['questions'] }\r\n                    </span>\r\n                ) }\r\n                { errors['answers'] && (\r\n                    <span className=\"error-msg\">\r\n                        { errors['answers'] }\r\n                    </span>\r\n                ) }\r\n\r\n                <button onClick={ this.handleAddTest.bind(this) } className=\"btn btn-cta\">Create test!</button>\r\n                \r\n                { isLoading && <Spinner size=\"sm\" /> }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport TestsContext from '../../context/TestsContext'\r\n\r\nimport Spinner from '../Spinner/Spinner'\r\n\r\nimport './css/style.css'\r\nimport { convertTimeShort } from '../../middleware/convertTime'\r\nimport { getHeaders } from '../../middleware/authMiddleware'\r\n\r\nexport default class PassTest extends Component {\r\n    state = {\r\n        isLoading: true,\r\n        test: [],\r\n        answers: [],\r\n        answeredQuestions: 0,\r\n        isSubmitted: false,\r\n        isTimeUp: false,\r\n        time: null\r\n    }\r\n\r\n    static contextType = TestsContext;\r\n\r\n    componentDidMount() {\r\n        const testId = this.props.match.params.testId;\r\n\r\n        fetch(`${ this.context.proxy }/api/tests/testInfo/${ testId }`, {\r\n            headers: {\r\n                ...getHeaders()\r\n            }\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                let answers = [];\r\n                for (let i = 0; i < res.questions.length; i++) \r\n                    answers[i] = 0;\r\n                this.setState({\r\n                    isLoading: false,\r\n                    answers,\r\n                    test: res\r\n                })\r\n\r\n                if (res.timeLimit) {\r\n                    const { timeLimit } = res;\r\n                    let time = timeLimit;\r\n                    setInterval(() => {\r\n                        time = Math.max(time - 1, 0);\r\n                        let { isTimeUp } = this.state;\r\n                        if (!isTimeUp && time <= 0) {\r\n                            isTimeUp = true;\r\n                            let els = document.querySelectorAll(\"input[type='radio']\");\r\n                            els.forEach(el => {\r\n                                el.setAttribute('onChange', 'return false');\r\n                                el.setAttribute('onClick', 'return false');\r\n                            })\r\n                        }\r\n                        this.setState({\r\n                            ...this.state,\r\n                            isTimeUp,\r\n                            time\r\n                        });\r\n                        \r\n                    }, 1000)\r\n                }\r\n\r\n                \r\n            })\r\n    }\r\n\r\n    handleSelect(index, answerId) {\r\n        let { answers, answeredQuestions, isTimeUp } = this.state;\r\n        \r\n        if (isTimeUp) \r\n            return;\r\n        else {\r\n            if (!answers[index]) {\r\n                answeredQuestions++;\r\n            }\r\n            answers[index] = answerId;\r\n            this.setState({\r\n                ...this.state,\r\n                answers,\r\n                answeredQuestions\r\n            }, () => console.log(this.state) )\r\n        }\r\n        \r\n    }\r\n\r\n    finishTest(e) {\r\n        e.preventDefault();\r\n        let points = 0;\r\n        let results = [];\r\n        const { answers, test, isSubmitted } = this.state;\r\n\r\n        if (isSubmitted) \r\n            return;\r\n        \r\n        this.setState({\r\n            ...this.state,\r\n            isSubmitted: true\r\n        })\r\n\r\n        console.log('finish!');\r\n        \r\n\r\n        test.questions.map((ques, index) => {\r\n            if (ques.correctAnswerId === answers[index]) {\r\n                points++;\r\n                results.push(true);\r\n            } else {\r\n                results.push(false);\r\n            }\r\n            return ques;\r\n        })\r\n        const query = {\r\n            \"userId\": this.context.userId,\r\n            \"points\": points,\r\n            \"answers\": results,\r\n            \"title\": test.title,\r\n            \"maxPoints\": test.questions.length,\r\n            \"date\": Date.now(),\r\n            \"answersLetters\": answers\r\n        }\r\n        fetch(`${ this.context.proxy }/api/tests/saveResult/${ test._id }`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(query)\r\n        })\r\n            .then(() => {\r\n                console.log('result saved!');\r\n                window.location.href = `/app/testInfo/${ test._id }`\r\n            })\r\n    }\r\n\r\n    render() {\r\n        const { isLoading, test, answeredQuestions, time, answers } = this.state;\r\n        const { questions } = test;\r\n\r\n        const letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\r\n\r\n        if (isLoading) return (\r\n            <Spinner />\r\n        )\r\n\r\n        return (\r\n            <>\r\n                <div className=\"info-block\">\r\n                    <div>\r\n                        { test.timeLimit && (\r\n                            <span>Time left: { convertTimeShort(time) }</span>\r\n                        ) } \r\n                    </div>\r\n                    <div>\r\n                        Answered questions: { answeredQuestions } / { questions.length }\r\n                    </div>\r\n                </div>\r\n                <form className=\"test-form\" onSubmit={ e => this.finishTest(e) }>\r\n                    <h1 className=\"heading\">\r\n                        Pass test '{ test.title }'\r\n                    </h1>\r\n                    <div className=\"test-questions\">\r\n                        { questions.map((ques, index) => {\r\n                            return (\r\n                                <div className=\"question-container\">\r\n                                    <h3 class=\"question-container__title\">\r\n                                        { index + 1 }.  { ques.title }\r\n                                    </h3>\r\n                                    <div className=\"question-container__answers\">\r\n                                        { ques.answers.map((ans, inx) => {\r\n                                            let extraClassName = '';\r\n                                            \r\n                                            if (answers[index].toString() === (inx + 1).toString()) \r\n                                                extraClassName = 'selected';\r\n\r\n                                            return (\r\n                                                <div className={ \"answer-block \" + extraClassName } onClick={ this.handleSelect.bind(this, index, ans.answerId) }>\r\n                                                    <div className=\"answer-block__letter\"><span>{ letters[inx] }</span></div>\r\n                                                    <div className=\"answer-block__text\">\r\n                                                        <span>{ ans.text }</span>\r\n                                                    </div>\r\n                                                </div>\r\n                                            )\r\n                                        }) }\r\n                                        \r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        }) }\r\n                    </div>\r\n                    <input type=\"submit\" className=\"btn btn-cta\" value=\"Finish\" />\r\n                </form>\r\n            </>\r\n        )\r\n    }\r\n}\r\n","const validate = (data) => {\r\n    let errors = [];\r\n    data.forEach(field => {\r\n        if (field.name === 'email') {\r\n            if (!(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(field.value)) ) {\r\n                errors['email'] = 'Invalid email'\r\n            } \r\n        } \r\n        if (field.name === 'password') {\r\n            if (field.value.length < 6) {\r\n                errors['password'] = 'Password must be at least 6 characters'\r\n            }\r\n        }\r\n        if (field.name === 'fullName') {\r\n            if (field.value.trim().length <= 5) {\r\n                errors['fullName'] = 'Please enter a real full name'\r\n            }\r\n        }\r\n    })\r\n\r\n    return errors;\r\n}\r\n\r\nexport {\r\n    validate\r\n}","import React, { Component } from 'react'\r\n\r\nimport './css/style.css'\r\n\r\nimport Input from '../reusableComponents/inputField/Input'\r\nimport Spinner from '../Spinner/Spinner'\r\n\r\nimport { validate } from '../../middleware/validator'\r\nimport AuthContext from '../../context/TestsContext'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCheck } from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport default class Login extends Component {\r\n    state = {\r\n        email: '',\r\n        password: '',\r\n        errors: [],\r\n        isLongerExpiration: false,\r\n        isLoading: false\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.formEl = React.createRef();        \r\n    }\r\n\r\n    static contextType = AuthContext;\r\n\r\n    setCredential(e) {\r\n        console.log(e.target);\r\n        \r\n        this.setState({\r\n            ...this.state,\r\n            [e.target.name]: e.target.value\r\n        }, () => console.log(this.state)\r\n        )\r\n    }\r\n\r\n    setLoading(state) {\r\n        this.setState({\r\n            isLoading: state\r\n        }, () => console.log(this.state))\r\n    }\r\n\r\n    setExpirationState() {\r\n        this.setState({\r\n            ...this.state,\r\n            isLongerExpiration: !this.state.isLongerExpiration\r\n        })\r\n    } \r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        const { email, password, isLongerExpiration } = this.state;\r\n\r\n        let data = [\r\n            { name: 'email', value: email },\r\n            { name: 'password', value: password }\r\n        ];\r\n        let errors = validate(data);\r\n        \r\n        \r\n        if (errors['email'] || errors['password']) {\r\n            this.setState({\r\n                ...this.state,\r\n                errors: errors,\r\n                isLoading: false\r\n            })\r\n        } else {\r\n            errors = [];\r\n            const query = {\r\n                email,\r\n                password,\r\n                isLongerExpiration\r\n            }\r\n            fetch(`${ this.context.proxy }/api/users/login`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(query)\r\n            })\r\n                .then(res => res.json())\r\n                .then(res => {\r\n                    if (res.success) {\r\n                        this.context.setToken(res.token, res.user._id, res.user);\r\n                        window.location.href = '/app/'\r\n                    } else {\r\n                        if (res.doesUserExist) \r\n                            errors['password'] = 'Incorrect password';\r\n                        else \r\n                            errors['email'] = 'User does not exist!'\r\n                        this.setState({\r\n                            ...this.state,\r\n                            errors: errors,\r\n                            isLoading: false\r\n                        })\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { errors, isLoading } = this.state;\r\n        console.log(isLoading);\r\n        \r\n\r\n        return (\r\n            <div>\r\n                <h1 className=\"heading\">Log in</h1>\r\n                <form id=\"login-form\" onSubmit={ (e) => this.handleSubmit(e) }>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Email: </label>\r\n                        <Input name=\"email\" type=\"text\" onChange={ (e) => this.setCredential(e) } />\r\n                        <span className=\"error-input\">{ errors['email'] }</span>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Password</label>\r\n                        <Input name=\"password\" type=\"password\" onChange={ (e) => this.setCredential(e) } />\r\n                        <span className=\"error-input\">{ errors['password'] }</span>\r\n                    </div>\r\n\r\n                    <div className=\"checkbox-group pretty p-icon p-smooth p-thick p-curve\">\r\n                        <input type=\"checkbox\" onChange={ this.setExpirationState.bind(this) } />\r\n                        <div className=\"state p-success\">\r\n                            <i className=\"icon\">\r\n                            <FontAwesomeIcon className=\"check-icon\" icon={ faCheck } />\r\n                            </i>\r\n                            <label>Remember for a day</label>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <input onClick={ () => this.setLoading(true) } type=\"submit\" className=\"btn btn-cta\" value=\"Log in\" />\r\n                    { isLoading && <Spinner size=\"sm\" /> }\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","export const getPasswordStrenth = (password) => {\r\n    // password strenth points: \r\n    //  numbers + 1\r\n    //  letters + 1\r\n    //  symbols + 2\r\n    //  > 8 syllables + 1\r\n\r\n    // 1 - weak\r\n    // 2 - 3 - meduim\r\n    // 4 - strong\r\n    // 5 - ultra-strong\r\n\r\n    if (!password) return {\r\n        points: null,\r\n        strenth: null\r\n    }\r\n\r\n    let points = 0;\r\n    let hasNums = false,\r\n        hasLetters = false,\r\n        hasSymbols = false;\r\n    \r\n    if (password.length > 8) \r\n        points++;\r\n\r\n    for (let i of password) {\r\n        if (i >= '0' && i <= 9) {\r\n            if (!hasNums) {\r\n                hasNums = true;\r\n                points++;\r\n            }\r\n        } else if (i.toLowerCase(i) >= 'a' && i.toLowerCase(i) <= 'z') {\r\n            if (!hasLetters) {\r\n                hasLetters = true;\r\n                points++;\r\n            }\r\n        } else if (i !== ' ') {\r\n            if (!hasSymbols) {\r\n                hasSymbols = true;\r\n                points += 2;\r\n            }\r\n        }\r\n    }\r\n\r\n    let result = 'Weak',\r\n        className = \"weak\";\r\n\r\n    if (points >= 2) {\r\n        result = 'Medium';\r\n        className = 'medium';\r\n    }\r\n    if (points >= 4) {\r\n        result = 'Strong';\r\n        className = 'strong';\r\n    }\r\n    if (points >= 5) {\r\n        result = 'Ultra strong';\r\n        className = 'ultra-strong';\r\n    }\r\n        \r\n    \r\n    return {\r\n        points,\r\n        className,\r\n        strenth: result\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nimport './css/style.css'\r\n\r\nimport Spinner from '../Spinner/Spinner'\r\n\r\nimport { validate } from '../../middleware/validator'\r\nimport { getPasswordStrenth } from '../../middleware/passwordStrenth'\r\nimport TestsContext from '../../context/TestsContext'\r\nimport Input from '../reusableComponents/inputField/Input'\r\n\r\nexport default class Register extends Component {\r\n    state = {\r\n        email: '',\r\n        password: '',\r\n        confirmPassword: '',\r\n        name: '',\r\n        errors: [],\r\n        isLoading: false\r\n    }\r\n\r\n    static contextType = TestsContext;\r\n\r\n    setCredential(e) {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n    }\r\n\r\n    setLoading(state) {\r\n        this.setState({\r\n            isLoading: state\r\n        }, () => console.log(this.state))\r\n    }\r\n\r\n    registerUser(e) {\r\n        e.preventDefault();\r\n\r\n        let data = [\r\n            { name: 'email', value: this.state.email },\r\n            { name: 'password', value: this.state.password },\r\n            { name: 'fullName', value: this.state.name }\r\n        ];\r\n        let errors = validate(data);\r\n        if (this.state.password !== this.state.confirmPassword) {\r\n            errors['confirmPassword'] = 'Passwords do not match'\r\n        }\r\n        \r\n        if (errors['email'] || errors['password'] || errors['fullName'] || errors['confirmPassword']) {\r\n            this.setState({\r\n                ...this.state,\r\n                errors: errors,\r\n                isLoading: false\r\n            })\r\n        } else {\r\n            const newUser = {\r\n                email: this.state.email,\r\n                password: this.state.password,\r\n                name: this.state.name\r\n            };\r\n            if (this.state.confirmPassword !== newUser.password) {\r\n                return;\r\n            };\r\n            fetch(`${ this.context.proxy }/api/users/addUser`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(newUser)\r\n            })\r\n                .then(res => res.json())\r\n                .then(res => {\r\n                    console.log(res);\r\n                    \r\n                    if (res.notSuccess) {\r\n                        errors = [];\r\n                        errors['email'] = 'User with such email already exists';\r\n                        this.setState({\r\n                            ...this.state,\r\n                            errors,\r\n                            isLoading: false\r\n                        })\r\n                    } else {\r\n                        this.context.setToken(res.token, res.user._id);\r\n                        window.location.href = '/app/'\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { errors, isLoading, password } = this.state;\r\n\r\n        let { strenth, className } = getPasswordStrenth(password);\r\n\r\n        return (\r\n            <>\r\n                <h1 className=\"heading\">Register</h1>\r\n                <form onSubmit={ (e) => this.registerUser(e) }>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">E-mail: </label>\r\n                        <Input type=\"text\" name=\"email\" onChange={ (e) => this.setCredential(e) } />\r\n                        <span className=\"error-input\">{ errors['email'] }</span>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Full name: </label>\r\n                        <Input type=\"text\" name=\"name\" onChange={ (e) => this.setCredential(e) } />\r\n                        <span className=\"error-input\">{ errors['fullName'] }</span>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Password: { strenth && <span className={ \"strenth-text \" + className }>({ strenth })</span> } </label>\r\n                        <Input type=\"password\" name=\"password\" onChange={ (e) => this.setCredential(e) } />\r\n                        <span className=\"error-input\">{ errors['password'] }</span>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Confirm password: </label>\r\n                        <Input type=\"password\" name=\"confirmPassword\" onChange={ (e) => this.setCredential(e) } />\r\n                        <span className=\"error-input\">{ errors['confirmPassword'] }</span>\r\n                    </div>\r\n                    <input onClick={ () => this.setLoading(true) } type=\"submit\" className=\"btn btn-cta\" value=\"Create account\" />\r\n                    { isLoading && <Spinner size=\"sm\" /> }\r\n                </form>\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Switch, Route, BrowserRouter } from 'react-router-dom'\r\n\r\nimport Navbar from './Navbar/Navbar'\r\n\r\nimport Profile from './Profile/Profile'\r\nimport Tests from './Tests/Tests'\r\nimport TestInfo from './Tests/TestInfo'\r\nimport CreateTest from './CreateTest/CreateTest'\r\nimport TestResult from './TestResult/TestResult'\r\nimport CreateTestForm from './CreateTest/CreateTestForm'\r\nimport PassTest from './PassTest/PassTest'\r\nimport Login from './Auth/Login'\r\nimport Register from './Auth/Register'\r\n\r\nimport './css/MainPage.css'\r\nimport './css/GlobalStyles/style.css'\r\n\r\nexport default class MainPage extends Component {    \r\n\r\n    componentDidMount() {\r\n        let mainEl = document.querySelector('main')\r\n        console.log(\"Hello\");\r\n\r\n\r\n        setInterval(() => {\r\n            if (is_scrolling()) {\r\n                if (!mainEl.classList.contains(\"on-scroll-bar\")) {\r\n                    mainEl.classList.add(\"on-scroll-bar\");\r\n                }\r\n                \r\n            } else {\r\n                if (mainEl.classList.contains(\"on-scroll-bar\")) {\r\n                    mainEl.classList.remove(\"on-scroll-bar\");\r\n                }\r\n            }\r\n            \r\n        }, 10)\r\n\r\n        mainEl.addEventListener('scroll', (e) => {\r\n            window.lastScrollTime = new Date().getTime()\r\n        }, false)\r\n\r\n        function is_scrolling() {\r\n            return window.lastScrollTime && new Date().getTime() < window.lastScrollTime + 500\r\n        }\r\n    }\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <BrowserRouter>\r\n\r\n                <div className=\"app-container\">\r\n                    <Navbar />\r\n                    <main>\r\n                        <Switch>\r\n                            <Route exact path='/app/' component={ Profile } /> \r\n                            <Route path='/app/allTests' component={ Tests } /> \r\n                            <Route path='/app/testInfo/:testId' component={ TestInfo } /> \r\n                            <Route path='/app/testResult/:userId/:resultId' component={ TestResult } /> \r\n                            <Route path='/app/createTest' component={ CreateTest } /> \r\n                            <Route path='/app/createTestForm' component={ CreateTestForm } /> \r\n                            <Route path='/app/passTest/:testId' component={ PassTest } /> \r\n                            <Route path='/app/login' component={ Login } /> \r\n                            <Route path='/app/register' component={ Register } /> \r\n                        </Switch>\r\n                    </main>\r\n                </div>\r\n\r\n            </BrowserRouter>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport ls from 'local-storage'\r\n\r\nimport TestsContext from './context/TestsContext'\r\n\r\nimport LandingPage from './landingPage/LandingPage';\r\nimport MainPage from './components/MainPage';\r\n\r\nimport './App.css'\r\n\r\nclass App extends Component {\r\n    state = {\r\n        user: ls.get('user'),\r\n        userId: ls.get('userId'),\r\n        token: ls.get('token'),\r\n        proxy: ''\r\n    }\r\n\r\n    componentWillMount() {\r\n        let proxy = '';\r\n        if (process.env.NODE_ENV === 'production') {\r\n            if (window.location.href.startsWith('https'))\r\n                proxy = 'https://easytestapp.herokuapp.com';\r\n            else if (window.location.href.startsWith('http'))\r\n                proxy = 'http://easytestapp.herokuapp.com';\r\n            else \r\n                proxy = 'easytestapp.herokuapp.com';\r\n        } else \r\n            proxy = 'http://localhost:5000';\r\n        console.log(proxy)\r\n        this.setState({\r\n            ...this.state,\r\n            proxy\r\n        })\r\n    }\r\n    \r\n\r\n    setToken = (token, userId, user) => {\r\n        this.setState({\r\n            token: token,\r\n            userId: userId,\r\n            user\r\n        })\r\n        ls.set('token', token);\r\n        ls.set('userId', userId);\r\n        ls.set('user', user);\r\n    }\r\n\r\n    logout = () => {\r\n        this.setState({\r\n            token: '',\r\n            userId: ''\r\n        });\r\n        ls.set('token', '');\r\n        ls.set('userId', '');\r\n    }\r\n\r\n    render() {\r\n        const { token, userId, proxy, user } = this.state;\r\n        console.log(process.env);\r\n        console.log(window.location.href);\r\n        \r\n        \r\n\r\n        return (\r\n            <BrowserRouter basename={ process.env.PUBLIC_URL }>\r\n                <React.Fragment>\r\n                    <TestsContext.Provider value={{ token, userId, user, setToken: this.setToken, logout: this.logout, proxy  }}>\r\n                        <Switch>\r\n                            <Route exact path=\"/\" component={ LandingPage } />\r\n                            <Route path=\"/app\" component={ MainPage } />\r\n                        </Switch>\r\n                    </TestsContext.Provider>\r\n                </React.Fragment>\r\n            </BrowserRouter>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}