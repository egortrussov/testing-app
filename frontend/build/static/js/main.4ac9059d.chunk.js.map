{"version":3,"sources":["components/Spinner/Spinner.js","context/TestsContext.js","middleware/authMiddleware.js","components/reusableComponents/PointsCard.js","middleware/dateFormat.js","landingPage/img/logo1.svg","landingPage/img/logo-light1.svg","landingPage/img/hero.svg","components/Navbar/img/logo.svg","components/reusableComponents/tests/TestsContainer.js","landingPage/LandingPage.js","components/Navbar/Navbar.js","components/Profile/Profile.js","components/Tests/Tests.js","components/reusableComponents/inputField/Input.js","components/Tests/TestInfo.js","middleware/convertTime.js","components/CreateTest/CreateTest.js","components/TestResult/TestResult.js","components/CreateTest/CreateTestForm.js","components/PassTest/PassTest.js","middleware/validator.js","components/Auth/Login.js","components/Auth/Register.js","components/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["Spinner","size","console","log","extraClassName","className","React","createContext","tests","title","getHeaders","ls","get","PointsCard","this","props","points","maxPoints","result","Component","formatDate","date1","date","Date","day","getDate","monthIndex","getMonth","year","getFullYear","module","exports","TestCard","lazy","TestsComtainer","state","left","right","isMoreTests","isRedirectToLogin","urlToFetch","fetch","method","headers","body","JSON","stringify","isLimited","then","res","json","isTokenError","context","logout","setState","forEach","test","push","type","user","isLoading","to","items","map","fallback","pageStart","loadMore","bind","hasMore","preload","loader","useWindow","length","contextType","TestsContext","LandingPage","src","Logo","alt","LogoLight","Hero","Navbar","isLoggedIn","window","location","href","token","exact","icon","faHome","faAlignLeft","faPenAlt","faSignInAlt","faUserPlus","onClick","faSignOutAlt","TestsContainer","Profile","passedTests","avgResult","nextLinkVal","proxy","reverse","Math","floor","_id","name","Tests","linkToFetch","Input","onChange","isMini","handleChange","e","autoComplete","htmlFor","TestInfo","testResults","usernames","errors","hasLiked","testId","match","params","likes","find","like","userId","sort","res1","res2","currentAccessKey","target","value","maxAttempts","usedAttemtps","accessKey","isProtected","field","document","querySelector","addEventListener","which","preventDefault","isIncrease","timeLimit","attemtpsLeft","faArrowLeft","description","setAccessKey","seconds","hrs","mins","secs","toString","convertTime","goToTest","setLike","faThumbsUp","key","username","answers","CreateTest","createdTests","TestResult","resultId","questions","ans","inx","isCorrect","correctAnswerId","parseInt","faCheckCircle","faTimesCircle","question","text","CreateTestForm","answerId","subject","creator","timeErrorMsg","isLimitedAttempts","isLimitedTime","x","i","selElmnt","a","b","c","getElementsByClassName","timeValues","setst","j","getElementsByTagName","createElement","setAttribute","innerHTML","options","selectedIndex","appendChild","y","k","s","h","parentNode","previousSibling","removeAttribute","click","stopPropagation","closeAllSelect","nextSibling","classList","toggle","elmnt","arrNo","remove","indexOf","add","quesId","len","index","min","max","quesIndex","ansId","newTest","ques","success","isTimeErr","getElementById","splice","letters","setTestTitle","setTestSubject","setTestDescription","id","cols","rows","setProtectedState","setAttemptsState","changeAttemptsNumber","setTimeLimitState","style","width","visibility","class","setQuestionTitle","setCorrectAnswerId","setAnswerText","deleteAnswer","handleAddAnswer","handleAddQuestion","handleAddTest","PassTest","answeredQuestions","isSubmitted","isTimeUp","time","setInterval","querySelectorAll","el","results","query","now","toISOString","substr","onSubmit","finishTest","handleSelect","validate","data","trim","Login","email","password","formEl","createRef","setToken","doesUserExist","handleSubmit","setCredential","setLoading","AuthContext","Register","confirmPassword","newUser","notSuccess","registerUser","MainPage","mainEl","lastScrollTime","getTime","contains","path","component","App","set","startsWith","process","basename","Fragment","Provider","Boolean","hostname","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8GAAA,0BAgBeA,IAZC,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACfC,QAAQC,IAAIF,GACZ,IAAMG,EAA0B,OAATH,EAAgB,QAAU,GAEjD,OACI,yBAAKI,UAAY,kBAAoBD,GACjC,yBAAKC,UAAY,UAAYD,O,6BCVzC,oBAEeE,QAAMC,cAAc,CAC/BC,MAAO,CAAC,CAAEC,MAAO,a,sCCHrB,uDAEMC,EAAa,WACf,MAAO,CACH,eAAgBC,IAAGC,IAAI,Y,2HCAVC,G,uLACP,IAAD,EACyBC,KAAKC,MAA3BC,EADH,EACGA,OAAQC,EADX,EACWA,UAEZC,EAASF,EAASC,EAClBb,EAAiB,GAUrB,OAPIA,EADAc,GAAU,IACO,YACZA,GAAU,IACE,OACZA,GAAU,GACE,eACC,MAGlB,0BAAMb,UAAS,sBAAmBD,IAC5BY,EAAQ,0BAAMX,UAAU,WAAhB,KAAoCY,O,GAjBtBE,e,gCCJxC,sCAAMC,EAAa,SAAAC,GACf,IAAIC,EAAO,IAAIC,KAAKF,GAgBhBG,EAAMF,EAAKG,UACXC,EAAaJ,EAAKK,WAClBC,EAAON,EAAKO,cAEhB,OAAOL,EAAM,IAnBI,CACb,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAO0BE,GAAc,KAAOE,I,wDCrBvDE,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,kBCA3CD,EAAOC,QAAU,IAA0B,kC,yLCUrCC,EAAW1B,IAAM2B,MAAK,kBAAM,gCAEbC,E,2MACjBC,MAAQ,CACJ3B,MAAO,GACP4B,KAAM,EACNC,MAAO,EACPC,aAAa,EACbC,mBAAmB,G,0EAKX,IAAD,OACCC,EAAe1B,KAAKC,MAApByB,WADD,EAEwB1B,KAAKqB,MAA5BC,EAFD,EAECA,KAAMC,EAFP,EAEOA,MAAO7B,EAFd,EAEcA,MACrBN,QAAQC,IAAIqC,GAEZC,MAAMD,EAAY,CACdE,OAAQ,OACRC,QAAQ,eACDjC,cADA,CAEH,eAAgB,qBAEpBkC,KAAMC,KAAKC,UAAU,CACjBC,WAAW,EACXX,OACAC,YAGHW,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GAEF,GADA/C,QAAQC,IAAI8C,GACRA,EAAIE,aAMJ,OALA,EAAKC,QAAQC,SACb,EAAKC,SAAL,eACO,EAAKnB,MADZ,CAEII,mBAAmB,MAEhB,EAEXU,EAAIzC,MAAM+C,SAAQ,SAAAC,GAAI,OAAIhD,EAAMiD,KAAKD,MACrC,EAAKF,SAAL,eACO,EAAKnB,MADZ,CAEI3B,QACA4B,KAAMA,EAAO,EACbC,MAAOA,EAAQ,EACfC,YAAaW,EAAIX,eAClB,kBAAMpC,QAAQC,IAAI,EAAKgC,MAAM3B,e,+BAKlC,IAAD,EACkBM,KAAKC,MAApB2C,EADH,EACGA,KAAMC,EADT,EACSA,KADT,EAGwD7C,KAAKqB,MAA1DyB,EAHH,EAGGA,UAAWpD,EAHd,EAGcA,MAAO+B,EAHrB,EAGqBA,kBAAmBD,EAHxC,EAGwCA,YAK7C,GAFApC,QAAQC,IAAImC,GAERC,EAAmB,OACnB,kBAAC,IAAD,CAAUsB,GAAG,eAGjB,GAAID,IAAcpD,EAAO,OACrB,kBAAC,IAAD,MAGJ,IAAIsD,EAAQ,GASZ,OARAtD,EAAMuD,KAAI,SAAAP,GACNM,EAAML,KACF,kBAAC,WAAD,CAAUO,SAAW,kBAAC,IAAD,CAAS/D,KAAK,QAC/B,kBAAC+B,EAAD,CAAU0B,KAAOA,EAAOF,KAAOA,EAAOG,KAAOA,GAAQ,YAM7D,kBAAC,IAAD,CACIM,UAAY,IACZC,SAAWpD,KAAKoD,SAASC,KAAKrD,MAC9BsD,QAAU9B,EACV+B,SAAU,EACVC,OAAS,kBAAC,IAAD,MACTC,WAAY,GACZ,yBAAKlE,UAAU,mBACQ,IAAjByD,EAAMU,OAAe,6DAAyCV,Q,GArFxC3C,aAAvBe,EASVuC,YAAcC,K,ocCZJC,G,uLAEb,OACI,gCAEI,yBAAKtE,UAAU,2BACf,yBAAKA,UAAU,2BACf,yBAAKA,UAAU,OACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,QAAQuE,IAAMC,IAAOC,IAAI,KACxC,yBAAKzE,UAAU,OAAOuE,IAAMG,IAAYD,IAAI,KAC5C,0CAGR,yBAAKzE,UAAU,QACX,yBAAKA,UAAU,aACX,2FACA,kBAAC,IAAD,CAAMA,UAAU,MAAMwD,GAAG,SAAzB,gBAEJ,yBAAKxD,UAAU,cACX,yBAAKuE,IAAMI,IAAOF,IAAI,OAG9B,yBAAKzE,UAAU,aAAf,gC,GAvByBc,c,iCCEnC8D,E,2MACF9C,MAAQ,CACJ+C,YAAY,G,wEAMZpE,KAAKsC,QAAQC,SACb8B,OAAOC,SAASC,KAAgC,e,+BAIhD,IAAMC,EAAQ3E,IAAGC,IAAI,SACrBV,QAAQC,IAAImF,GAEZ,IAAIJ,EAAuB,KAAVI,EAEjB,OACI,6BACI,yBAAKjF,UAAU,oBACX,kBAAC,IAAD,CAAMwD,GAAG,KACL,wBAAIxD,UAAU,QAAO,yBAAKuE,IAAMC,IAAOC,IAAI,KAA3C,IAAgD,0BAAMzE,UAAU,QAAhB,eAIpD6E,GACI,yBAAK7E,UAAU,uBACX,kBAAC,IAAD,CAASkF,OAAK,EAAClF,UAAU,WAAWwD,GAAI,SAAS,kBAAC,IAAD,CAAiBxD,UAAU,OAAOmF,KAAOC,MAA1F,IAAsG,0BAAMpF,UAAU,QAAhB,SACtG,kBAAC,IAAD,CAASA,UAAU,WAAWwD,GAAI,iBAAiB,kBAAC,IAAD,CAAiBxD,UAAU,OAAOmF,KAAOE,MAAgB,0BAAMrF,UAAU,QAAhB,WAC5G,kBAAC,IAAD,CAASA,UAAU,WAAWwD,GAAI,mBAAmB,kBAAC,IAAD,CAAiBxD,UAAU,OAAOmF,KAAOG,MAA9F,IAA4G,0BAAMtF,UAAU,QAAhB,iBAKxH,yBAAKA,UAAU,wBACR6E,GACC,oCACI,kBAAC,IAAD,CAAS7E,UAAU,WAAWwD,GAAI,cAAc,kBAAC,IAAD,CAAiBxD,UAAU,OAAOmF,KAAOI,MAAzF,IAA0G,0BAAMvF,UAAU,QAAhB,UAC1G,kBAAC,IAAD,CAASA,UAAU,WAAWwD,GAAI,iBAAiB,kBAAC,IAAD,CAAiBxD,UAAU,OAAOmF,KAAOK,MAA5F,IAA4G,0BAAMxF,UAAU,QAAhB,cAGlH6E,GACE,4BAAQ7E,UAAU,WAAWyF,QAAUhF,KAAKuC,OAAOc,KAAKrD,OAAS,kBAAC,IAAD,CAAiBT,UAAU,OAAOmF,KAAOO,MAA1G,IAA4H,0BAAM1F,UAAU,QAAhB,iB,GA3C/Hc,aAAf8D,EAKKR,YAAcC,IA8CVO,Q,+BClDTe,G,MAAiB1F,IAAM2B,MAAK,kBAAM,4CAEnBgE,E,2MACjB9D,MAAQ,CACJwB,KAAM,KACNuC,YAAa,GACbC,UAAW,KACXvC,WAAW,EACXwC,YAAa,M,mFAKI,IAAD,OAChB3D,MAAM,GAAD,OAAK3B,KAAKsC,QAAQiD,MAAlB,mBAA2C,CAC5C1D,QAASjC,gBAERsC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACEA,EAAIE,eACJ,EAAKC,QAAQC,SACb8B,OAAOC,SAASC,KAAO,cAE3BnF,QAAQC,IAAI8C,EAAIiD,aAEhBjD,EAAIiD,YAAYI,UAEhB,IAAIH,EAAY,EAChBlD,EAAIiD,YAAY3C,SAAQ,SAAAC,GACpB2C,GAAa3C,EAAKxC,OAASwC,EAAKvC,UAChCf,QAAQC,IAAIgG,MAEhBA,GAAalD,EAAIiD,YAAY1B,OAC7B2B,EAAYI,KAAKC,MAAkB,IAAZL,GAEvB,EAAK7C,SAAS,CACVK,KAAMV,EACNkD,YACAvC,WAAW,S,+BAKjB,IAAD,EACkC9C,KAAKqB,MAApCwB,EADH,EACGA,KAAMC,EADT,EACSA,UAAWuC,EADpB,EACoBA,UAEzBjG,QAAQC,IAAIwD,GAIZ,GAAIC,IAAcD,EAAM,OACpB,kBAAC3D,EAAA,EAAD,MAGJ,IAAMwC,EAAU,UAAO1B,KAAKsC,QAAQiD,MAApB,kCAAqD1C,EAAK8C,KAE1E,OACI,oCACI,wBAAIpG,UAAU,WAAd,UACasD,EAAK+C,KADlB,KAGA,yBAAKrG,UAAU,iBACX,yBAAKA,UAAU,eACX,yBAAKuE,IAAI,uBAAuBE,IAAI,MAExC,yBAAKzE,UAAU,gBACX,yBAAKA,UAAU,uBACX,0BAAMA,UAAU,aAAhB,SAAoCsD,EAAK+C,OAE7C,yBAAKrG,UAAU,uBACX,0BAAMA,UAAU,aAAhB,iBAA4CsD,EAAKuC,YAAY1B,SAEjE,yBAAKnE,UAAU,uBACX,0BAAMA,UAAU,aAAhB,mBAA8C8F,EAA9C,QAIVxC,EAAKuC,YAAY1B,OAAS,EAAM,mDAAmC,iEACnE,kBAAC,WAAD,CAAUR,SAAW,kBAAChE,EAAA,EAAD,OACnB,kBAACgG,EAAD,CAAgBtC,KAAK,SAASlB,WAAaA,EAAamB,KAAOA,U,GA7E9CxC,aAAhB8E,EASVxB,YAAcC,I,UCfnBsB,EAAiB1F,IAAM2B,MAAK,kBAAM,2CAEnB0E,E,2MACjBxE,MAAQ,CACJyB,WAAW,EACXpD,MAAO,GACP+B,mBAAmB,EACnBH,KAAM,EACNC,MAAO,EACPC,aAAa,G,wEAKP,IAAD,EACwDxB,KAAKqB,MAA1DyB,EADH,EACGA,UAAkBrB,GADrB,EACc/B,MADd,EACqB+B,mBAAmBD,EADxC,EACwCA,YAG7CpC,QAAQC,IAAImC,GAEZ,IAAMsE,EAAW,UAAO9F,KAAKsC,QAAQiD,MAApB,uBAEjB,OAAI9D,EACA,kBAAC,IAAD,CAAUsB,GAAG,eAGbD,EACA,kBAAC5D,EAAA,EAAD,MAIA,oCACI,wBAAIK,UAAU,WAAd,kBACA,kBAAC,WAAD,CAAU2D,SAAW,kBAAChE,EAAA,EAAD,OACjB,kBAAC,EAAD,CACIwC,WAAaoE,EACblD,KAAO,e,GAlCIvC,aAAdwF,EAUVlC,YAAcC,I,YCAVmC,G,MAhBD,SAAC,GAAsC,IAAD,EAAnCH,EAAmC,EAAnCA,KAAMI,EAA6B,EAA7BA,SAAUpD,EAAmB,EAAnBA,KAAMqD,EAAa,EAAbA,OAC7BC,EAAe,SAACC,GAClB/G,QAAQC,IAAI8G,GACZH,EAASG,IAGP7G,EAAiB2G,EAAS,OAAS,GAEzC,OACI,yBAAK1G,UAAY,eAAiBD,GAC9B,8BAAO8G,aAAeH,EAAS,MAAQ,KAAO1G,UAAYD,EAAiBsD,KAAK,QAAhF,qBAA8FA,GAA9F,qBAA4GgD,GAA5G,0BAA8H,SAACO,GAAD,OAAOD,EAAaC,MAAlJ,IACA,2BAAOE,QAAUT,O,QCKRU,E,2MACjBjF,MAAQ,CACJyB,WAAW,EACXJ,KAAM,KACN6D,YAAa,KACbC,UAAW,KACXC,OAAQ,GACRhF,mBAAmB,EACnBiF,UAAU,G,mFAKO,IAAD,OACVC,EAAS3G,KAAKC,MAAM2G,MAAMC,OAAOF,OAEvChF,MAAM,GAAD,OAAK3B,KAAKsC,QAAQiD,MAAlB,+BAAgDoB,GAAW,CAC5D9E,QAAQ,eACDjC,iBAGNsC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACF,GAAIA,EAAIE,aACJ,EAAKC,QAAQC,SACb,EAAKC,SAAL,eACO,EAAKnB,MADZ,CAEII,mBAAmB,SAEpB,CACH,IAAIiF,GAAW,EACXvE,EAAI2E,MAAMC,MAAK,SAACC,GAAD,OAAUA,IAAS,EAAK1E,QAAQ2E,YAC/CP,GAAW,GACf,EAAKlE,SAAL,eACO,EAAKnB,MADZ,CAEIyB,WAAW,EACXJ,KAAMP,EACNuE,kBAIhB/E,MAAM,GAAD,OAAK3B,KAAKsC,QAAQiD,MAAlB,kCAAmDoB,IACnDzE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACF/C,QAAQC,IAAI8C,GACZA,EAAIoE,YAAYW,MAAK,SAACC,EAAMC,GACxB,OAAOA,EAAKlH,OAASiH,EAAKjH,UAE9B,EAAKsC,SAAS,CACVM,WAAW,EACXyD,YAAapE,EAAIoE,YACjBC,UAAWrE,EAAIqE,iB,mCAKlBL,GACTnG,KAAKwC,SAAL,eACOxC,KAAKqB,MADZ,CAEIgG,iBAAkBlB,EAAEmB,OAAOC,W,iCAIvB,IAAD,SAC+BvH,KAAKqB,MAAnCqB,EADD,EACCA,KAAM+D,EADP,EACOA,OAAQF,EADf,EACeA,YACdiB,EAAgB9E,EAAhB8E,YACJC,EAAe,EAOnB,GANAlB,EAAY9D,SAAQ,SAAAN,GACZA,EAAI8E,SAAW,EAAK3E,QAAQ2E,QAC5BQ,OAERrI,QAAQC,IAAIoI,EAAcD,GAEtBA,GAAeC,GAAgBD,EAC/Bf,EAAM,SAAe,sCACrBzG,KAAKwC,SAAL,eACOxC,KAAKqB,MADZ,CAEIoF,gBAED,CAAC,IACIY,EAAqBrH,KAAKqB,MAA1BgG,iBACAK,EAAgChF,EAAhCgF,UAAW/B,EAAqBjD,EAArBiD,IAAKgC,EAAgBjF,EAAhBiF,YACxB,GAAID,IAAcL,GAAqBM,EAEhC,CAAC,IACElB,EAAWzG,KAAKqB,MAAhBoF,OACNA,EAAM,SAAe,wBACrBzG,KAAKwC,SAAL,eACOxC,KAAKqB,MADZ,CAEIoF,iBANJpC,OAAOC,SAASC,KAAhB,wBAAyCoB,M,2CAejD,IAAIiC,EAAQC,SAASC,cAAc,cACnC1I,QAAQC,IAAIuI,GAERA,GAAmB,OAAVA,GAAgBA,EAAMG,iBAAiB,YAAW,SAAS5B,GACpD,KAAZA,EAAE6B,OACF7B,EAAE8B,sB,gCAKH,IAAD,SACqBjI,KAAKqB,MAAxBqB,EADF,EACEA,KAAMgE,EADR,EACQA,SAEd/E,MAAM,GAAD,OAAK3B,KAAKsC,QAAQiD,MAAlB,+BAAgD7C,EAAKiD,KAAQ,CAC9D/D,OAAQ,OACRC,QAAQ,eACDjC,IADA,CAEH,eAAgB,qBAEpBkC,KAAMC,KAAKC,UAAU,CACjBkG,YAAaxB,EACbO,OAAQjH,KAAKsC,QAAQ2E,WAGxB/E,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GAAQ,IACJO,EAAS,EAAKrB,MAAdqB,KACNA,EAAKoE,MAAQ3E,EAAI2E,MACjB1H,QAAQC,IAAIqD,EAAKoE,MAAMpD,QACvB,EAAKlB,SAAL,eACO,EAAKnB,MADZ,CAEIqB,OACAgE,UAAWA,KACZ,kBAAMtH,QAAQC,IAAI,EAAKgC,MAAMqF,kB,+BAIlC,IAAD,SACyE1G,KAAKqB,MAA3EyB,EADH,EACGA,UAAWJ,EADd,EACcA,KAAM6D,EADpB,EACoBA,YAAaE,EADjC,EACiCA,OAAQhF,EADzC,EACyCA,kBADzC,EAC4DiF,SAEjE,GAAIjF,EAAmB,OACnB,kBAAC,IAAD,CAAUsB,GAAG,eAGjB,GAAID,GAAsB,OAATJ,EAAe,OAC5B,kBAACxD,EAAA,EAAD,MARC,IAWGsI,EAA2B9E,EAA3B8E,YAAaW,EAAczF,EAAdyF,UACjBV,EAAe,EACflB,GAAaA,EAAY9D,SAAQ,SAAAN,GAC7BA,EAAI8E,SAAW,EAAK3E,QAAQ2E,QAC5BQ,OAER,IAAMW,EAAeZ,EAAcC,EAEnC,OACI,6BACI,yBAAKlI,UAAU,YACX,kBAAC,IAAD,CAAMwD,GAAG,iBACL,kBAAC,IAAD,CAAiB2B,KAAO2D,MAD5B,UAIJ,4BAAM3F,EAAK/C,OACX,2BAAK+C,EAAK4F,aACR5F,EAAKiF,aAEC,oCACI,6BACA,2BAAOtB,QAAQ,SAAf,0DAFJ,IAE0F,6BACtF,kBAAC,EAAD,CAAOzD,KAAK,OAAOgD,KAAK,YAAYK,QAAS,EAAOD,SAAW,SAACG,GAAD,OAAO,EAAKoC,aAAapC,MAExF,0BAAM5G,UAAU,eAAgBkH,EAAM,WAK/Ce,GACC,yBAAKjI,UAAU,kBACX,0BAAMA,UAAU,gBAAhB,kBAAgD6I,IAGrDD,GACC,yBAAK5I,UAAU,kBACX,0BAAMA,UAAU,gBAAhB,eCtMG,SAAAiJ,GACvB,IAAMC,EAAMhD,KAAKC,MAAM8C,EAAU,MAC3BE,EAAOjD,KAAKC,OAAO8C,EAAgB,KAANC,GAAc,IAC3CE,EAAOH,EAAgB,KAANC,EAAoB,GAAPC,EAEhCtI,EAAS,GAQb,OAPIqI,IACArI,GAAUqI,EAAIG,WAAJ,eAAkC,IAARH,EAAY,IAAM,GAA5C,MACVC,IACAtI,GAAUsI,EAAKE,WAAL,iBAAsC,IAATF,EAAa,IAAM,GAAhD,MACVC,IACAvI,GAAUuI,EAAKC,WAAL,iBAAsC,IAATD,EAAa,IAAM,GAAhD,MAEPvI,EDyL0DyI,CAAYV,KAGjE,6BAIA,0BAAM5I,UAAU,eAAgBkH,EAAM,UACtC,yBAAKlH,UAAU,aACX,4BAAQyF,QAAU,kBAAM,EAAK8D,YAAavJ,UAAU,eAApD,cACA,4BAAQA,UAAU,eAAeyF,QAAUhF,KAAK+I,QAAQ1F,KAAKrD,MAAQ0E,KAAOsE,KACxE,kBAAC,IAAD,CAAiBzJ,UAAU,OAAOmF,KAAOsE,MACzC,8BAAQtG,EAAKoE,MAAMpD,UAI3B,yBAAKnE,UAAU,WACX,yCACA,+BACI,yBAAKA,UAAU,aACf,yBAAKA,UAAU,WACf,4BACI,oCACA,wBAAIA,UAAU,UAAd,WAEc,OAAhBgH,EAAuB,WACrB,OACI,kBAACrH,EAAA,EAAD,OAEJqH,EAAYtD,KAAI,SAAAd,GAChB,OACI,wBAAI5C,UAAU,WAAW0J,IAAM9G,EAAI8E,OAAS9E,EAAIjC,QAC5C,4BAAMiC,EAAI+G,UACV,wBAAI3J,UAAU,UACV,kBAACQ,EAAA,EAAD,CAAYG,OAASiC,EAAIjC,OAASC,UAAYgC,EAAIgH,QAAQzF,qB,GAxN5DrD,aAAjBiG,EAWV3C,YAAcC,I,YEnBJwF,E,2MACjB/H,MAAQ,CACJgI,aAAc,GACdvG,WAAW,G,mFAMN9C,KAAKsC,QAAQ2E,SACd5C,OAAOC,SAASC,KAAO,gB,+BAarB,IAAD,EAC+BvE,KAAKqB,MAAjCgI,EADH,EACGA,aAER,GAHK,EACiBvG,UAEP,OACX,kBAAC5D,EAAA,EAAD,MAGJ,IAAIwC,EAAU,UAAO1B,KAAKsC,QAAQiD,MAApB,mCAAsDvF,KAAKsC,QAAQ2E,QAEjF,OACI,oCACI,wBAAI1H,UAAU,WAAd,uBAC0B8J,EAAa3F,OADvC,kBAGA,kBAAC,IAAD,CAAMX,GAAG,sBAAsBxD,UAAU,eAAzC,YAGE,kBAAC,WAAD,CAAU2D,SAAW,kBAAChE,EAAA,EAAD,OACnB,kBAAC,UAAD,CAAgB0D,KAAK,UAAUlB,WAAaA,EAAamB,KAAO,a,GAzC5CxC,aAAnB+I,EAMVzF,YAAcC,I,UCLJ0F,E,2MACjBjI,MAAQ,CACJyB,WAAW,EACXJ,KAAM,KACNyG,QAAS,M,mFAKQ,IAAD,OACVlC,EAASjH,KAAKC,MAAM2G,MAAMC,OAAOI,OACjCsC,EAAWvJ,KAAKC,MAAM2G,MAAMC,OAAO0C,SAEzC5H,MAAM,GAAD,OAAK3B,KAAKsC,QAAQiD,MAAlB,iCAAkD0B,EAAlD,YAA8DsC,IAC9DrH,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACF/C,QAAQC,IAAI8C,GAEZ,EAAKK,SAAS,CACVM,WAAW,EACXqG,QAAShH,EAAIgH,QACbzG,KAAMP,EAAIO,Y,+BAMhB,IAAD,EACgC1C,KAAKqB,MAAlCyB,EADH,EACGA,UAAWJ,EADd,EACcA,KAAMyG,EADpB,EACoBA,QAMzB,OALIzG,GAAMtD,QAAQC,IAAIqD,EAAK8G,UAAU,IACrCpK,QAAQC,IAAI8J,GAIRrG,EACA,kBAAC5D,EAAA,EAAD,MAIA,6BACI,yBAAKK,UAAU,YACX,kBAAC,IAAD,CAAMwD,GAAG,SACL,kBAAC,IAAD,CAAiBxD,UAAU,OAAOmF,KAAO2D,MAD7C,UAIJ,wBAAI9I,UAAU,WAAd,oBACuBmD,EAAK/C,MAD5B,KAGA,yBAAKJ,UAAU,gBACX,+BACI,yBAAKA,UAAU,SACb4J,EAAQlG,KAAI,SAAAwG,GACV,OACI,yBAAKlK,UAAU,cAGvB,wBAAIA,UAAU,SACV,wBAAIA,UAAU,cAAd,gBACE4J,EAAQlG,KAAI,SAACwG,EAAKC,GAChB,OACI,wBAAInK,UAAU,aAAcmK,EAAM,OAI9C,4BACI,wBAAInK,UAAU,QAAd,YACE4J,EAAQlG,KAAI,SAACwG,EAAKC,GAChB,IAAIpK,EAAiB,GACrBF,QAAQC,IAAIuJ,SAASa,IAErB,IAAIE,EAAYF,EAAIb,aAAelG,EAAK8G,UAAUE,GAAKE,gBAMvD,OAHItK,EADAuK,SAASJ,KAASI,SAASnH,EAAK8G,UAAUE,GAAKE,iBAC9B,UAEA,QAEjB,wBAAIrK,UAAS,sBAAmBD,IAAsBqK,EAAa,kBAAC,IAAD,CAAiBpK,UAAU,OAAOmF,KAAOoF,MAAwB,kBAAC,IAAD,CAAiBvK,UAAU,OAAOmF,KAAOqF,aAM/LZ,EAAQlG,KAAI,SAACwG,EAAKC,GAChB,IAAIC,EAAYF,EAAIb,aAAelG,EAAK8G,UAAUE,GAAKE,gBACvDxK,QAAQC,IAAIqD,EAAK8G,WAEjB,IAAIlK,EAAiB,GAChBqK,IAAWrK,EAAiB,SACjC,IAAI0K,EAAWtH,EAAK8G,UAAUE,GAG9B,OAFAtK,QAAQC,IAAI2K,EAASb,QAAQU,SAASG,EAASJ,mBAG3C,yBAAKrK,UAAU,gBACX,4BAAMmK,EAAM,EAAZ,KAAmBM,EAASrK,OACjB,IAAT8J,EACE,0BAAMlK,UAAY,YAAcD,GAAhC,kBAIA,0BAAMC,UAAY,YAAcD,GAAhC,gBACmBmK,EADnB,KAC4BO,EAASb,QAAQM,EAAM,GAAGQ,MAG1D,0BAAM1K,UAAU,YAAhB,mBACsByK,EAASJ,gBAD/B,KACoDI,EAASb,QAAQU,SAASG,EAASJ,iBAAmB,GAAGK,e,GAzGjG5J,aAAnBiJ,EAOV3F,YAAcC,I,UCXJsG,E,2MACjB7I,MAAQ,CACJmI,UAAW,CAAC,CACR7J,MAAO,GACPwJ,QAAS,CAAC,CACNc,KAAM,GACNE,SAAU,KACX,CACCF,KAAM,GACNE,SAAU,MAEdP,gBAAiB,MAErBjK,MAAO,GACP2I,YAAa,GACb8B,QAAS,GACTzC,aAAa,EACbD,UAAW,GACX2C,QAAS,EAAK/H,QAAQ2E,OACtBqD,aAAc,GACdxH,WAAW,EACX2D,OAAQ,GACRe,YAAa,KACb+C,mBAAmB,EACnBC,eAAe,EACfrC,UAAW,M,mFAKM,IAEbsC,EAAGC,EAAGC,EAAUC,EAAGC,EAAGC,EAFV,OAIhBL,EAAI5C,SAASkD,uBAAuB,iBACpC3L,QAAQC,IAAIoL,GAEZ,IAAIO,EAAa,CAAC,IAAQ,IAAS,KAAS,KAAS,KAAa,MAE5DC,EAAQ,SAACC,GACX9L,QAAQC,IAAI,QAEZ,EAAKmD,SAAL,eACO,EAAKnB,MADZ,CAEI8G,UAAW6C,EAAWE,EAAI,MAC3B,kBAAM9L,QAAQC,IAAI,EAAKgC,WAG9B,IAAKqJ,EAAI,EAAGA,EAAID,EAAE/G,OAAQgH,IAAK,CAC3BC,EAAWF,EAAEC,GAAGS,qBAAqB,UAAU,IAE/CP,EAAI/C,SAASuD,cAAc,QACzBC,aAAa,QAAS,mBACxBT,EAAEU,UAAYX,EAASY,QAAQZ,EAASa,eAAeF,UACvDb,EAAEC,GAAGe,YAAYb,IAEjBC,EAAIhD,SAASuD,cAAc,QACzBC,aAAa,QAAS,4BACxB,IAV2B,eAUlBH,IAGLJ,EAAIjD,SAASuD,cAAc,QACzBE,UAAYX,EAASY,QAAQL,GAAGI,UAClClM,QAAQC,IAAIsL,GAEZG,EAAE/C,iBAAiB,SAAS,SAAS5B,GAIjC,IAAIuF,EAAGhB,EAAGiB,EAAGC,EAAGC,EAUhB,IATAD,EAAI5L,KAAK8L,WAAWA,WAAWX,qBAAqB,UAAU,GAC9DU,EAAI7L,KAAK8L,WAAWC,gBACpB3M,QAAQC,IAAI2L,EAAWE,EAAI,IAOtBR,EAAI,EAAGA,EAAIkB,EAAElI,OAAQgH,IACtB,GAAIkB,EAAEL,QAAQb,GAAGY,YAActL,KAAKsL,UAAW,CAO3C,IANAM,EAAEJ,cAAgBd,EAElBmB,EAAEP,UAAYtL,KAAKsL,UACnBI,EAAI1L,KAAK8L,WAAWf,uBAChB,oBAECY,EAAI,EAAGA,EAAID,EAAEhI,OAAQiI,IACtBD,EAAEC,GAAGK,gBAAgB,SAEzBhM,KAAKqL,aAAa,QAAS,oBAC3B,MAGRQ,EAAEI,QAEFhB,EAAMC,MAEVL,EAAEY,YAAYX,IAxCTI,EAAI,EAAGA,EAAIP,EAASjH,OAAQwH,IAAM,EAAlCA,GA0CTT,EAAEC,GAAGe,YAAYZ,GACjBD,EAAE7C,iBAAiB,SAAS,SAAS5B,GAGjCA,EAAE+F,kBACFC,EAAenM,MACfA,KAAKoM,YAAYC,UAAUC,OAAO,eAClCtM,KAAKqM,UAAUC,OAAO,0BAI9B,SAASH,EAAeI,GAGpB,IAAI9B,EACAiB,EACAhB,EACA8B,EAAQ,GAGZ,IAFA/B,EAAI5C,SAASkD,uBAAuB,gBACpCW,EAAI7D,SAASkD,uBAAuB,mBAC/BL,EAAI,EAAGA,EAAIgB,EAAEhI,OAAQgH,IAClB6B,IAAUb,EAAEhB,GACZ8B,EAAM7J,KAAK+H,GAEXgB,EAAEhB,GAAG2B,UAAUI,OAAO,uBAG9B,IAAK/B,EAAI,EAAGA,EAAID,EAAE/G,OAAQgH,IAClB8B,EAAME,QAAQhC,IACdD,EAAEC,GAAG2B,UAAUM,IAAI,eAK/B9E,SAASE,iBAAiB,QAASoE,K,sCAKvBS,GAAS,IACbpD,EAAcxJ,KAAKqB,MAAnBmI,UACJqD,EAAMrD,EAAUoD,GAAQzD,QAAQzF,OACpCtE,QAAQC,IAAIwN,EAAIjE,YAEyB,IAArCY,EAAUoD,GAAQzD,QAAQzF,SAC9B8F,EAAUoD,GAAQzD,QAAQxG,KAAK,CAC3BsH,KAAM,GACNE,UAAW0C,EAAM,GAAGjE,aAExBxJ,QAAQC,IAAImK,EAAUoD,GAAQzD,SAE9BnJ,KAAKwC,SAAL,eACOxC,KAAKqB,MADZ,CAEImI,kB,0CAIa,IACTA,EAAcxJ,KAAKqB,MAAnBmI,UACiB,KAArBA,EAAU9F,SACd8F,EAAU7G,KAAK,CACXhD,MAAO,GACPwJ,QAAS,CAAC,CACNc,KAAM,GACNE,SAAU,KACX,CACCF,KAAM,GACNE,SAAU,MAEdP,gBAAiB,MAErB5J,KAAKwC,SAAL,eACOxC,KAAKqB,MADZ,CAEImI,kB,uCAISrD,EAAG2G,GAAQ,IAClBtD,EAAcxJ,KAAKqB,MAAnBmI,UACNA,EAAUsD,GAAOnN,MAAQwG,EAAEmB,OAAOC,MAClCvH,KAAKwC,SAAL,eACOxC,KAAKqB,MADZ,CAEImI,iB,oCAIMrD,EAAG2G,EAAOpD,GACpBtK,QAAQC,IAAI8G,EAAEmB,OAAOC,OADI,IAGnBiC,EAAcxJ,KAAKqB,MAAnBmI,UACNpK,QAAQC,IAAImK,EAAUsD,GAAO3D,QAASO,GACtCF,EAAUsD,GAAO3D,QAAQO,GAAKO,KAAO9D,EAAEmB,OAAOC,MAC9CvH,KAAKwC,SAAL,eACOxC,KAAKqB,MADZ,CAEImI,iB,mCAIKrD,GACTnG,KAAKwC,SAAL,eACOxC,KAAKqB,MADZ,CAEI1B,MAAOwG,EAAEmB,OAAOC,W,yCAILpB,GACfnG,KAAKwC,SAAL,eACOxC,KAAKqB,MADZ,CAEIiH,YAAanC,EAAEmB,OAAOC,W,qCAIfpB,GAAI,IAAD,OACdnG,KAAKwC,SAAL,eACOxC,KAAKqB,MADZ,CAEI+I,QAASjE,EAAEmB,OAAOC,SACnB,kBAAMnI,QAAQC,IAAI,EAAKgC,MAAM+I,c,wCAGlBjE,GACdnG,KAAKwC,SAAL,eACOxC,KAAKqB,MADZ,CAEIsG,aAAc3H,KAAKqB,MAAMsG,YACzBD,UAAW,Q,uCAIFvB,GACbnG,KAAKwC,SAAL,eACOxC,KAAKqB,MADZ,CAEIkJ,mBAAoBvK,KAAKqB,MAAMkJ,kBAC/B/C,YAAa,O,wCAIHrB,GACdnG,KAAKwC,SAAL,eACOxC,KAAKqB,MADZ,CAEImJ,eAAgBxK,KAAKqB,MAAMmJ,cAC3BrC,UAAW,U,mCAINhC,GACTnG,KAAKwC,SAAL,eACOxC,KAAKqB,MADZ,CAEIqG,UAAWvB,EAAEmB,OAAOC,W,wCAIVpB,GACdnG,KAAKwC,SAAL,eACOxC,KAAKqB,MADZ,CAEImG,YAAaqC,SAAS1D,EAAEmB,OAAOC,UAEnCnI,QAAQC,IAAIW,KAAKqB,S,2CAIAkG,GAAQ,IACnBC,EAAgBxH,KAAKqB,MAArBmG,YAGFA,EADAD,EAAQ,EACM9B,KAAKsH,IAAIvF,EAAcD,EAAO,IAE9B9B,KAAKuH,IAAIxF,EAAcD,EAAO,GAEhDvH,KAAKwC,SAAL,eACOxC,KAAKqB,MADZ,CAEImG,mB,yCAIWyF,EAAWC,GAAQ,IAC5B1D,EAAcxJ,KAAKqB,MAAnBmI,UACNA,EAAUyD,GAAWrD,gBAAkBsD,EACvC9N,QAAQC,IAAI6N,GAEZlN,KAAKwC,SAAL,eACOxC,KAAKqB,MADZ,CAEImI,iB,sCAIS,IAAD,OACZxJ,KAAKwC,SAAL,eACOxC,KAAKqB,MADZ,CAEIyB,WAAW,KAGf,IAAIqK,EAAUnN,KAAKqB,MAEnBjC,QAAQC,IAAIW,KAAKqB,OAEjB,IAAIoF,EAAS,GAER0G,EAAQxN,QACT8G,EAAM,MAAY,8BACjB0G,EAAQ/C,UACT3D,EAAM,QAAc,gCACxB0G,EAAQ3D,UAAUvG,KAAI,SAAAmK,GAQlB,OAPKA,EAAKzN,QACN8G,EAAM,UAAgB,+BAC1B2G,EAAKjE,QAAQlG,KAAI,SAAAwG,GAGb,OAFKA,EAAIQ,OACLxD,EAAM,QAAc,8BACjB,MAEJ,KAGPA,EAAM,OAAaA,EAAM,SAAeA,EAAM,WAAiBA,EAAM,QACrEzG,KAAKwC,SAAL,eACOxC,KAAKqB,MADZ,CAEIoF,aAKHzG,KAAKsC,QAAQ2E,SACd5C,OAAOC,SAASC,KAAO,cAE3B5C,MAAM,GAAD,OAAK3B,KAAKsC,QAAQiD,MAAlB,yBAAiD,CAClD3D,OAAQ,OACRC,QAAS,CACL,eAAgB,mBAChB,eAAgB7B,KAAKsC,QAAQkC,OAEjC1C,KAAMC,KAAKC,UAAUhC,KAAKqB,SAEzBa,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACF/C,QAAQC,IAAI8C,GAEPA,EAAIkL,QASLhJ,OAAOC,SAASC,KAAO,gBARnBpC,EAAImL,WACJ,EAAK9K,SAAL,eACO,EAAKnB,MADZ,CAEIiJ,aAAc,mDACdxH,WAAW,W,mCAStB8J,EAAQM,GAAQ,IACnB1D,EAAcxJ,KAAKqB,MAAnBmI,UACN,KAAIA,EAAUoD,GAAQzD,QAAQzF,QAAU,GAAxC,CAEA,IAAIgG,EAAMG,SAASqD,GACF1D,EAAUoD,GAAQhD,gBACpBhB,cAAgBsE,EAAQ,GAAGtE,aAElCY,EAAUoD,GAAQhD,gBADR,IAAVsD,EACoC,IAECA,EAAOtE,YAGpD,IAAK,IAAI8B,EAAIhB,EAAKgB,EAAIlB,EAAUoD,GAAQzD,QAAQzF,OAAQgH,IACpDlB,EAAUoD,GAAQzD,QAAQuB,GAAGP,UAAYN,SAASL,EAAUoD,GAAQzD,QAAQuB,GAAGP,UAAY,GAAGvB,WAC1F8B,IAAMhB,IACN7B,SAAS0F,eAAT,WAA6BX,EAA7B,YAAyClC,EAAI,IAAMnD,MAAQiC,EAAUoD,GAAQzD,QAAQuB,GAAGT,MAEhG7K,QAAQC,KAAKmK,EAAUoD,GAAQhD,gBAAiBJ,EAAUoD,GAAQzD,QAAQzF,SACrE8F,EAAUoD,GAAQhD,iBAAmBJ,EAAUoD,GAAQzD,QAAQzF,SAChE8F,EAAUoD,GAAQhD,iBAAoBJ,EAAUoD,GAAQzD,QAAQzF,OAAS,GAAGkF,YAChFxJ,QAAQC,IAAImK,EAAUoD,IAEtBpD,EAAUoD,GAAQzD,QAAQqE,OAAON,EAAO,GAExC9N,QAAQC,IAAImK,EAAUoD,GAAQzD,SAG9BnJ,KAAKwC,SAAL,eACOxC,KAAKqB,MADZ,CAEImI,kB,qCAIOoD,GAAS,IACdpD,EAAcxJ,KAAKqB,MAAnBmI,UACmB,IAArBA,EAAU9F,SAEd8F,EAAUgE,OAAOZ,EAAQ,GACzB5M,KAAKwC,SAAL,eACOxC,KAAKqB,MADZ,CAEImI,kB,+BAIE,IAAD,SACqHxJ,KAAKqB,MAAvHmI,EADH,EACGA,UAAW7B,EADd,EACcA,YAAa2C,EAD3B,EAC2BA,aAAcxH,EADzC,EACyCA,UAAkB2D,GAD3D,EACoD9G,MADpD,EAC2D8G,QAAQ8D,EADnE,EACmEA,kBAAmBC,EADtF,EACsFA,cAAehD,EADrG,EACqGA,YAEpGiG,EAAU,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,KAE1C,OACI,6BACI,wBAAIlO,UAAU,WAAd,eAGA,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,cACX,2BAAO8G,QAAQ,SAAf,eACA,kBAAC,EAAD,CAAOzD,KAAK,OAAOoD,SAAW,SAACG,GAAD,OAAO,EAAKuH,aAAavH,IAAKF,QAAS,EAAOL,KAAK,UACjF,0BAAMrG,UAAU,eAAgBkH,EAAM,QAE1C,yBAAKlH,UAAU,cACX,2BAAO8G,QAAQ,WAAf,aACA,kBAAC,EAAD,CAAOzD,KAAK,OAAOoD,SAAW,SAACG,GAAD,OAAO,EAAKwH,eAAexH,IAAKF,QAAS,EAAOL,KAAK,UACnF,0BAAMrG,UAAU,eAAgBkH,EAAM,UAE1C,yBAAKlH,UAAU,cACX,2BAAO8G,QAAQ,eAAf,iBACA,8BAAU9G,UAAU,GAAGyG,SAAW,SAACG,GAAD,OAAO,EAAKyH,mBAAmBzH,IAAKP,KAAK,cAAciI,GAAG,GAAGC,KAAK,KAAKC,KAAK,QAElH,yBAAKxO,UAAU,uBACX,2BAAOyG,SAAWhG,KAAKgO,kBAAkB3K,KAAKrD,MAAQ4C,KAAK,WAAWgD,KAAK,gBAC3E,2BAAOS,QAAQ,cAAcT,KAAK,eAAlC,cAEF+B,GACE,yBAAKpI,UAAU,cACX,2BAAO8G,QAAQ,OAAf,gBACA,kBAAC,EAAD,CAAOL,SAAW,SAACG,GAAD,OAAO,EAAKoC,aAAapC,IAAKF,QAAS,EAAOL,KAAK,YAAYhD,KAAK,UAG9F,yBAAKrD,UAAU,uBACX,2BAAOyG,SAAWhG,KAAKiO,iBAAiB5K,KAAKrD,MAAQ4C,KAAK,WAAWgD,KAAK,sBAC1E,2BAAOS,QAAQ,oBAAoBT,KAAK,qBAAxC,qBAEF2E,GACE,yBAAKhL,UAAU,cACX,2BAAO8G,QAAQ,OAAf,sBACA,yBAAK9G,UAAU,aACX,4BAAQA,UAAU,gBAAgByF,QAAU,kBAAM,EAAKkJ,sBAAsB,KAA7E,IAAmF,mCAAnF,KACA,0BAAM3O,UAAU,gBAAiBiI,GACjC,4BAAQjI,UAAU,gBAAgByF,QAAU,kBAAM,EAAKkJ,qBAAqB,KAA5E,IAAkF,mCAAlF,OAKZ,yBAAK3O,UAAU,uBACX,2BAAOyG,SAAWhG,KAAKmO,kBAAkB9K,KAAKrD,MAAQ4C,KAAK,WAAWgD,KAAK,kBAC3E,2BAAOS,QAAQ,gBAAgBT,KAAK,iBAApC,iBAEF4E,EACE,yBAAKjL,UAAU,gBAAgB6O,MAAO,CAAEC,MAAO,UAC3C,gCACI,4BAAQ9G,MAAM,KAAd,sBACA,4BAAQA,MAAM,KAAd,aACA,4BAAQA,MAAM,KAAd,cACA,4BAAQA,MAAM,KAAd,cACA,4BAAQA,MAAM,KAAd,cACA,4BAAQA,MAAM,KAAd,UACA,4BAAQA,MAAM,KAAd,eAIR,yBAAKhI,UAAU,gBAAgB6O,MAAO,CAAEC,MAAO,QAAYC,WAAY,WACnE,gCACI,4BAAQ/G,MAAM,KAAd,sBACA,4BAAQA,MAAM,KAAd,aACA,4BAAQA,MAAM,KAAd,cACA,4BAAQA,MAAM,KAAd,cACA,4BAAQA,MAAM,KAAd,cACA,4BAAQA,MAAM,KAAd,UACA,4BAAQA,MAAM,KAAd,gBAMhB,yBAAKhI,UAAU,aACTiK,EAAUvG,KAAI,SAACmK,EAAMN,GACnB,OACI,yBAAKvN,UAAU,sBAEX,wBAAIgP,MAAM,6BACN,yBAAKhP,UAAU,uBACX,uCAEJ,8BAAQuN,EAAQ,EAAhB,KAJJ,KAIiC,kBAAC,EAAD,CAAOlK,KAAK,OAAOqD,QAAS,EAAOD,SAAW,SAACG,GAAD,OAAO,EAAKqI,iBAAiBrI,EAAG2G,IAASlH,KAAK,mBAE7H,yBAAKrG,UAAU,+BACT6N,EAAKjE,QAAQlG,KAAI,SAACwG,EAAKC,GACZ,UAAO0D,EAAP,YAAiB1D,GAA1B,IACIpK,EAAiB,GAQrB,OANAF,QAAQC,IAAI+N,EAAKxD,gBAAgBhB,cAAec,EAAM,GAAGd,YAErDwE,EAAKxD,gBAAgBhB,cAAgBc,EAAM,GAAGd,aAC9CtJ,EAAiB,YACrBF,QAAQC,IAAIC,GAGR,yBAAKC,UAAY,gBAAkBD,GAC/B,yBAAKC,UAAU,uBAAuByF,QAAU,kBAAM,EAAKyJ,mBAAmB3B,EAAOrD,EAAIU,YAAY,8BAAQsD,EAAQ/D,KACrH,yBAAKnK,UAAU,sBACX,2BAAO6G,aAAa,MAAMyH,GAAE,WAAQf,EAAR,YAAmBpD,GAAS9G,KAAK,OAAOoD,SAAU,SAACG,GAAD,OAAO,EAAKuI,cAAcvI,EAAG2G,EAAOpD,MAClH,4BAAQnK,UAAU,aAAayF,QAAU,kBAAM,EAAK2J,aAAa7B,EAAOpD,KACpE,4CAMpB,4BAAQ1E,QAAU,EAAK4J,gBAAgBvL,KAAK,EAAMyJ,GAASvN,UAAU,gBAAe,yCAKpG,4BAAQyF,QAAUhF,KAAK6O,kBAAkBxL,KAAKrD,MAAQT,UAAU,8BAAhE,iBAIF+K,GACE,0BAAM/K,UAAU,aACV+K,GAIR7D,EAAM,WACJ,0BAAMlH,UAAU,aACVkH,EAAM,WAGdA,EAAM,SACJ,0BAAMlH,UAAU,aACVkH,EAAM,SAIhB,4BAAQzB,QAAUhF,KAAK8O,cAAczL,KAAKrD,MAAQT,UAAU,eAA5D,gBAEEuD,GAAa,kBAAC5D,EAAA,EAAD,CAASC,KAAK,Y,GAxhBDkB,aAAvB6J,EA4BVvG,YAAcC,I,UC5BJmL,E,2MACjB1N,MAAQ,CACJyB,WAAW,EACXJ,KAAM,GACNyG,QAAS,GACT6F,kBAAmB,EACnBC,aAAa,EACbC,UAAU,EACVC,KAAM,M,mFAKW,IAAD,OACVxI,EAAS3G,KAAKC,MAAM2G,MAAMC,OAAOF,OAEvChF,MAAM,GAAD,OAAK3B,KAAKsC,QAAQiD,MAAlB,+BAAgDoB,GAAW,CAC5D9E,QAAQ,eACDjC,iBAGNsC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACF/C,QAAQC,IAAI8C,GAEZ,IADA,IAAIgH,EAAU,GACLuB,EAAI,EAAGA,EAAIvI,EAAIqH,UAAU9F,OAAQgH,IACtCvB,EAAQuB,GAAK,EAOjB,GANA,EAAKlI,SAAS,CACVM,WAAW,EACXqG,UACAzG,KAAMP,IAGNA,EAAIgG,UAAW,CAAC,IAEZgH,EADkBhN,EAAdgG,UAERiH,aAAY,WACRD,EAAO1J,KAAKuH,IAAImC,EAAO,EAAG,GADZ,IAERD,EAAa,EAAK7N,MAAlB6N,UACDA,GAAYC,GAAQ,IACrBD,GAAW,EACDrH,SAASwH,iBAAiB,uBAChC5M,SAAQ,SAAA6M,GACRA,EAAGjE,aAAa,WAAY,gBAC5BiE,EAAGjE,aAAa,UAAW,oBAGnC,EAAK7I,SAAL,eACO,EAAKnB,MADZ,CAEI6N,WACAC,YAGL,W,mCAONrC,EAAO3C,GAAW,IAAD,SACqBnK,KAAKqB,MAA9C8H,EADoB,EACpBA,QAAS6F,EADW,EACXA,kBADW,EACQE,WAKzB/F,EAAQ2D,IACTkC,IAEJ7F,EAAQ2D,GAAS3C,EACjBnK,KAAKwC,SAAL,eACOxC,KAAKqB,MADZ,CAEI8H,UACA6F,uBACD,kBAAM5P,QAAQC,IAAI,EAAKgC,a,iCAKvB8E,GACPA,EAAE8B,iBACF,IAAI/H,EAAS,EACTqP,EAAU,GAHJ,EAI6BvP,KAAKqB,MAApC8H,EAJE,EAIFA,QAASzG,EAJP,EAIOA,KAEjB,IANU,EAIauM,YAEvB,CAGAjP,KAAKwC,SAAL,eACOxC,KAAKqB,MADZ,CAEI4N,aAAa,KAGjB7P,QAAQC,IAAI,WAGZqD,EAAK8G,UAAUvG,KAAI,SAACmK,EAAMN,GAOtB,OANIM,EAAKxD,kBAAoBT,EAAQ2D,IACjC5M,IACAqP,EAAQ5M,MAAK,IAEb4M,EAAQ5M,MAAK,GAEVyK,KAEX,IAAMoC,EAAQ,CACV,OAAUxP,KAAKsC,QAAQ2E,OACvB,OAAU/G,EACV,QAAWqP,EACX,MAAS7M,EAAK/C,MACd,UAAa+C,EAAK8G,UAAU9F,OAC5B,KAAQjD,KAAKgP,MACb,eAAkBtG,GAEtBxH,MAAM,GAAD,OAAK3B,KAAKsC,QAAQiD,MAAlB,iCAAkD7C,EAAKiD,KAAQ,CAChE/D,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUwN,KAEpBtN,MAAK,WACF9C,QAAQC,IAAI,iBACZgF,OAAOC,SAASC,KAAhB,wBAAyC7B,EAAKiD,W,+BAIhD,IAAD,SACyD3F,KAAKqB,MAA3DyB,EADH,EACGA,UAAWJ,EADd,EACcA,KAAMsM,EADpB,EACoBA,kBAAmBG,EADvC,EACuCA,KAAMhG,EAD7C,EAC6CA,QAC1CK,EAAc9G,EAAd8G,UAEFiE,EAAU,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAEpD,OAAI3K,EACA,kBAAC5D,EAAA,EAAD,MAIA,oCACI,yBAAKK,UAAU,cACX,6BACMmD,EAAKyF,WACH,4CJtJjB,IAAI1H,KAAe,IIsJkC0O,GJtJ5BO,cAAcC,OAAO,GAAI,KIyJzC,oDAC0BX,EAD1B,MACkDxF,EAAU9F,SAGhE,0BAAMnE,UAAU,YAAYqQ,SAAW,SAAAzJ,GAAC,OAAI,EAAK0J,WAAW1J,KACxD,wBAAI5G,UAAU,WAAd,cACiBmD,EAAK/C,MADtB,KAGA,yBAAKJ,UAAU,kBACTiK,EAAUvG,KAAI,SAACmK,EAAMN,GACnB,OACI,yBAAKvN,UAAU,sBACX,wBAAIgP,MAAM,6BACJzB,EAAQ,EADd,MACsBM,EAAKzN,OAE3B,yBAAKJ,UAAU,+BACT6N,EAAKjE,QAAQlG,KAAI,SAACwG,EAAKC,GACZ,UAAO0D,EAAP,YAAiB1D,GAA1B,IACIpK,EAAiB,GAKrB,OAHI6J,EAAQ2D,GAAOlE,cAAgBc,EAAM,GAAGd,aACxCtJ,EAAiB,YAGjB,yBAAKC,UAAY,gBAAkBD,EAAiB0F,QAAU,EAAK8K,aAAazM,KAAK,EAAMyJ,EAAOrD,EAAIU,WAClG,yBAAK5K,UAAU,wBAAuB,8BAAQkO,EAAQ/D,KACtD,yBAAKnK,UAAU,sBACX,8BAAQkK,EAAIQ,iBA4BhD,2BAAOrH,KAAK,SAASrD,UAAU,cAAcgI,MAAM,iB,GAxMjClH,aAAjB0O,EAWVpL,YAAcC,I,UCpBnBmM,EAAW,SAACC,GACd,IAAIvJ,EAAS,GAmBb,OAlBAuJ,EAAKvN,SAAQ,SAAAmF,GACU,UAAfA,EAAMhC,OACA,4CAA4ClD,KAAKkF,EAAML,SACzDd,EAAM,MAAY,kBAGP,aAAfmB,EAAMhC,MACFgC,EAAML,MAAM7D,OAAS,IACrB+C,EAAM,SAAe,0CAGV,aAAfmB,EAAMhC,MACFgC,EAAML,MAAM0I,OAAOvM,QAAU,IAC7B+C,EAAM,SAAe,oCAK1BA,GCVUyJ,E,YAQjB,WAAYjQ,GAAQ,IAAD,8BACf,4CAAMA,KARVoB,MAAQ,CACJ8O,MAAO,GACPC,SAAU,GACV3J,OAAQ,GACR3D,WAAW,GAKX,EAAKuN,OAAS7Q,IAAM8Q,YAFL,E,wHA4BLnK,GAAI,IAAD,OACb/G,QAAQC,IAAI8G,EAAEmB,QAEdtH,KAAKwC,SAAL,eACOxC,KAAKqB,MADZ,eAEK8E,EAAEmB,OAAO1B,KAAOO,EAAEmB,OAAOC,SAC3B,kBAAMnI,QAAQC,IAAI,EAAKgC,Y,iCAInBA,GAAQ,IAAD,OACdrB,KAAKwC,SAAS,CACVM,UAAWzB,IACZ,kBAAMjC,QAAQC,IAAI,EAAKgC,Y,mCAGjB8E,GAAI,IAAD,OACZA,EAAE8B,iBAEF,IAAI+H,EAAO,CACP,CAAEpK,KAAM,QAAS2B,MAAOvH,KAAKqB,MAAM8O,OACnC,CAAEvK,KAAM,WAAY2B,MAAOvH,KAAKqB,MAAM+O,WAEtC3J,EAASsJ,EAASC,GAGtB,GAFA5Q,QAAQC,IAAIoH,EAAM,OAEdA,EAAM,OAAaA,EAAM,SACzBzG,KAAKwC,SAAL,eACOxC,KAAKqB,MADZ,CAEIoF,OAAQA,EACR3D,WAAW,SAEZ,CACH2D,EAAS,GACT,IAAM+I,EAAQ,CACVW,MAAOnQ,KAAKqB,MAAM8O,MAClBC,SAAUpQ,KAAKqB,MAAM+O,UAEzBzO,MAAM,GAAD,OAAK3B,KAAKsC,QAAQiD,MAAlB,oBAA4C,CAC7C3D,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUwN,KAEpBtN,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACEA,EAAIkL,SACJ,EAAK/K,QAAQiO,SAASpO,EAAIqC,MAAOrC,EAAIU,KAAK8C,KAC1CtB,OAAOC,SAASC,KAAO,UAEnBpC,EAAIqO,cACJ/J,EAAM,SAAe,qBAErBA,EAAM,MAAY,uBACtB,EAAKjE,SAAL,eACO,EAAKnB,MADZ,CAEIoF,OAAQA,EACR3D,WAAW,Y,+BAOzB,IAAD,SACyB9C,KAAKqB,MAA3BoF,EADH,EACGA,OAAQ3D,EADX,EACWA,UAIhB,OAHA1D,QAAQC,IAAIyD,GAIR,6BACI,wBAAIvD,UAAU,WAAd,UACA,0BAAMsO,GAAG,aAAa+B,SAAW,SAACzJ,GAAD,OAAO,EAAKsK,aAAatK,KACtD,yBAAK5G,UAAU,cACX,2BAAO8G,QAAQ,IAAf,WACA,kBAAC,EAAD,CAAOT,KAAK,QAAQhD,KAAK,OAAOoD,SAAW,SAACG,GAAD,OAAO,EAAKuK,cAAcvK,MACrE,0BAAM5G,UAAU,eAAgBkH,EAAM,QAE1C,yBAAKlH,UAAU,cACX,2BAAO8G,QAAQ,IAAf,YACA,kBAAC,EAAD,CAAOT,KAAK,WAAWhD,KAAK,WAAWoD,SAAW,SAACG,GAAD,OAAO,EAAKuK,cAAcvK,MAC5E,0BAAM5G,UAAU,eAAgBkH,EAAM,WAe1C,2BAAOzB,QAAU,kBAAM,EAAK2L,YAAW,IAAQ/N,KAAK,SAASrD,UAAU,cAAcgI,MAAM,WACzFzE,GAAa,kBAAC5D,EAAA,EAAD,CAASC,KAAK,a,GAtIdkB,aAAd6P,EAaVvM,YAAciN,I,ICbJC,E,2MACjBxP,MAAQ,CACJ8O,MAAO,GACPC,SAAU,GACVU,gBAAiB,GACjBlL,KAAM,GACNa,OAAQ,GACR3D,WAAW,G,6EAKDqD,GACVnG,KAAKwC,SAAL,eACK2D,EAAEmB,OAAO1B,KAAOO,EAAEmB,OAAOC,U,iCAIvBlG,GAAQ,IAAD,OACdrB,KAAKwC,SAAS,CACVM,UAAWzB,IACZ,kBAAMjC,QAAQC,IAAI,EAAKgC,Y,mCAGjB8E,GAAI,IAAD,OACZA,EAAE8B,iBAEF,IAAI+H,EAAO,CACP,CAAEpK,KAAM,QAAS2B,MAAOvH,KAAKqB,MAAM8O,OACnC,CAAEvK,KAAM,WAAY2B,MAAOvH,KAAKqB,MAAM+O,UACtC,CAAExK,KAAM,WAAY2B,MAAOvH,KAAKqB,MAAMuE,OAEtCa,EAASsJ,EAASC,GAKtB,GAJIhQ,KAAKqB,MAAM+O,WAAapQ,KAAKqB,MAAMyP,kBACnCrK,EAAM,gBAAsB,0BAG5BA,EAAM,OAAaA,EAAM,UAAgBA,EAAM,UAAgBA,EAAM,gBACrEzG,KAAKwC,SAAL,eACOxC,KAAKqB,MADZ,CAEIoF,OAAQA,EACR3D,WAAW,SAEZ,CACH,IAAMiO,EAAU,CACZZ,MAAOnQ,KAAKqB,MAAM8O,MAClBC,SAAUpQ,KAAKqB,MAAM+O,SACrBxK,KAAM5F,KAAKqB,MAAMuE,MAErB,GAAI5F,KAAKqB,MAAMyP,kBAAoBC,EAAQX,SACvC,OAEJzO,MAAM,GAAD,OAAK3B,KAAKsC,QAAQiD,MAAlB,sBAA8C,CAC/C3D,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU+O,KAEpB7O,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACF/C,QAAQC,IAAI8C,GAERA,EAAI6O,aACJvK,EAAS,IACH,MAAY,sCAClB,EAAKjE,SAAL,eACO,EAAKnB,MADZ,CAEIoF,SACA3D,WAAW,OAGf,EAAKR,QAAQiO,SAASpO,EAAIqC,MAAOrC,EAAIU,KAAK8C,KAC1CtB,OAAOC,SAASC,KAAO,e,+BAMjC,IAAD,SACyBvE,KAAKqB,MAA3BoF,EADH,EACGA,OAAQ3D,EADX,EACWA,UAEhB,OACI,oCACI,wBAAIvD,UAAU,WAAd,YACA,0BAAMqQ,SAAW,SAACzJ,GAAD,OAAO,EAAK8K,aAAa9K,KACtC,yBAAK5G,UAAU,cACX,2BAAO8G,QAAQ,IAAf,YACA,kBAAC,EAAD,CAAOzD,KAAK,OAAOgD,KAAK,QAAQI,SAAW,SAACG,GAAD,OAAO,EAAKuK,cAAcvK,MACrE,0BAAM5G,UAAU,eAAgBkH,EAAM,QAE1C,yBAAKlH,UAAU,cACX,2BAAO8G,QAAQ,IAAf,eACA,kBAAC,EAAD,CAAOzD,KAAK,OAAOgD,KAAK,OAAOI,SAAW,SAACG,GAAD,OAAO,EAAKuK,cAAcvK,MACpE,0BAAM5G,UAAU,eAAgBkH,EAAM,OAE1C,yBAAKlH,UAAU,cACX,2BAAO8G,QAAQ,IAAf,cACA,kBAAC,EAAD,CAAOzD,KAAK,WAAWgD,KAAK,WAAWI,SAAW,SAACG,GAAD,OAAO,EAAKuK,cAAcvK,MAC5E,0BAAM5G,UAAU,eAAgBkH,EAAM,WAE1C,yBAAKlH,UAAU,cACX,2BAAO8G,QAAQ,IAAf,sBACA,kBAAC,EAAD,CAAOzD,KAAK,WAAWgD,KAAK,kBAAkBI,SAAW,SAACG,GAAD,OAAO,EAAKuK,cAAcvK,MACnF,0BAAM5G,UAAU,eAAgBkH,EAAM,kBAE1C,2BAAOzB,QAAU,kBAAM,EAAK2L,YAAW,IAAQ/N,KAAK,SAASrD,UAAU,cAAcgI,MAAM,mBACzFzE,GAAa,kBAAC5D,EAAA,EAAD,CAASC,KAAK,a,GA3GXkB,aAAjBwQ,EAUVlN,YAAcC,I,gBCFJsN,E,4LAGb,IAAIC,EAAStJ,SAASC,cAAc,QACpC1I,QAAQC,IAAI,SAGZ+P,aAAY,WAmBD/K,OAAO+M,iBAAkB,IAAI3Q,MAAO4Q,UAAYhN,OAAO+M,eAAiB,IAjBtED,EAAO9E,UAAUiF,SAAS,kBAC3BH,EAAO9E,UAAUM,IAAI,iBAIrBwE,EAAO9E,UAAUiF,SAAS,kBAC1BH,EAAO9E,UAAUI,OAAO,mBAIjC,IAEH0E,EAAOpJ,iBAAiB,UAAU,SAAC5B,GAC/B9B,OAAO+M,gBAAiB,IAAI3Q,MAAO4Q,aACpC,K,+BASH,OACI,kBAAC,IAAD,KAEI,yBAAK9R,UAAU,iBACX,kBAAC,EAAD,MACA,8BACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOkF,OAAK,EAAC8M,KAAK,QAAQC,UAAYrM,IACtC,kBAAC,IAAD,CAAOoM,KAAK,gBAAgBC,UAAY3L,IACxC,kBAAC,IAAD,CAAO0L,KAAK,wBAAwBC,UAAYlL,IAChD,kBAAC,IAAD,CAAOiL,KAAK,oCAAoCC,UAAYlI,IAC5D,kBAAC,IAAD,CAAOiI,KAAK,kBAAkBC,UAAYpI,IAC1C,kBAAC,IAAD,CAAOmI,KAAK,sBAAsBC,UAAYtH,IAC9C,kBAAC,IAAD,CAAOqH,KAAK,wBAAwBC,UAAYzC,IAChD,kBAAC,IAAD,CAAOwC,KAAK,aAAaC,UAAYtB,IACrC,kBAAC,IAAD,CAAOqB,KAAK,gBAAgBC,UAAYX,Y,GA/C9BxQ,aC4DvBoR,G,iNAjEXpQ,MAAQ,CACJ4F,OAAQpH,IAAGC,IAAI,UACf0E,MAAO3E,IAAGC,IAAI,SACdyF,MAAO,I,EAsBXgL,SAAW,SAAC/L,EAAOyC,GACf,EAAKzE,SAAS,CACVgC,MAAOA,EACPyC,OAAQA,IAEZpH,IAAG6R,IAAI,QAASlN,GAChB3E,IAAG6R,IAAI,SAAUzK,I,EAGrB1E,OAAS,WACL,EAAKC,SAAS,CACVgC,MAAO,GACPyC,OAAQ,KAEZpH,IAAG6R,IAAI,QAAS,IAChB7R,IAAG6R,IAAI,SAAU,K,oFAjCjB,IAAInM,EAAQ,GAGJA,EADAlB,OAAOC,SAASC,KAAKoN,WAAW,SACxB,oCACHtN,OAAOC,SAASC,KAAKoN,WAAW,QAC7B,mCAEA,4BAGhBvS,QAAQC,IAAIkG,GACZvF,KAAKwC,SAAL,eACOxC,KAAKqB,MADZ,CAEIkE,a,+BAuBE,IAAD,EAC4BvF,KAAKqB,MAA9BmD,EADH,EACGA,MAAOyC,EADV,EACUA,OAAQ1B,EADlB,EACkBA,MAMvB,OALAnG,QAAQC,IAAIuS,+CACZxS,QAAQC,IAAIgF,OAAOC,SAASC,MAKxB,kBAAC,IAAD,CAAesN,SAAWD,IACtB,kBAAC,IAAME,SAAP,KACI,kBAAClO,EAAA,EAAamO,SAAd,CAAuBxK,MAAO,CAAE/C,QAAOyC,SAAQsJ,SAAUvQ,KAAKuQ,SAAUhO,OAAQvC,KAAKuC,OAAQgD,UACzF,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOd,OAAK,EAAC8M,KAAK,IAAIC,UAAY3N,IAClC,kBAAC,IAAD,CAAO0N,KAAK,OAAOC,UAAYN,Y,GAzDzC7Q,cCAE2R,QACW,cAA7B3N,OAAOC,SAAS2N,UAEe,UAA7B5N,OAAOC,SAAS2N,UAEhB5N,OAAOC,SAAS2N,SAASrL,MACvB,2DCbNsL,IAASC,OAAO,kBAAC,EAAD,MAAStK,SAAS0F,eAAe,SD8H3C,kBAAmB6E,WACrBA,UAAUC,cAAcC,MAAMpQ,MAAK,SAAAqQ,GACjCA,EAAaC,kB","file":"static/js/main.4ac9059d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport './Spinner.css'\r\n\r\nconst Spinner = ({ size }) => {\r\n    console.log(size);\r\n    const extraClassName = size === \"sm\" ? \"small\" : \"\";\r\n\r\n    return (\r\n        <div className={ \"loader-wrapper \" + extraClassName }>\r\n            <div className={ \"loader \" + extraClassName }></div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Spinner","import React from 'react';\r\n\r\nexport default React.createContext({\r\n    tests: [{ title: 'hello' }]\r\n})\r\n","import ls from 'local-storage'\r\n\r\nconst getHeaders = () => {\r\n    return {\r\n        'x-auth-token': ls.get('token')\r\n    }\r\n}\r\n\r\nexport {\r\n    getHeaders\r\n}","import React, { Component } from 'react'\r\n\r\nimport './css/style.css'\r\n\r\nexport default class PointsCard extends Component {\r\n    render() {\r\n        const { points, maxPoints } = this.props;\r\n\r\n        let result = points / maxPoints;\r\n        let extraClassName = '';\r\n\r\n        if (result >= .85)\r\n            extraClassName = 'excellent';\r\n        else if (result >= .65)\r\n            extraClassName = 'good';\r\n        else if (result >= .40)\r\n            extraClassName = 'satisfactory';\r\n        else extraClassName = 'bad';\r\n\r\n        return (\r\n            <span className={ `points-card ${ extraClassName }` }>\r\n                { points }<span className=\"divider\">/</span>{ maxPoints }\r\n            </span>\r\n        )\r\n    }\r\n}\r\n","const formatDate = date1 => {\r\n    let date = new Date(date1);\r\n    let monthNames = [\r\n        'January',\r\n        'February',\r\n        'March',\r\n        'April',\r\n        'May',\r\n        'June',\r\n        'July',\r\n        'August',\r\n        'September',\r\n        'October',\r\n        'November',\r\n        'December'\r\n    ];\r\n\r\n    let day = date.getDate();\r\n    let monthIndex = date.getMonth();\r\n    let year = date.getFullYear();\r\n\r\n    return day + ' ' + monthNames[monthIndex] + ', ' + year;\r\n};\r\n\r\nexport {\r\n    formatDate\r\n}","module.exports = __webpack_public_path__ + \"static/media/logo1.2ad03ba9.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo-light1.dc46d8b1.svg\";","module.exports = __webpack_public_path__ + \"static/media/hero.de877d3a.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.dc46d8b1.svg\";","import React, { Component, Suspense } from 'react'\r\n\r\nimport { Redirect } from 'react-router-dom'\r\nimport InfiniteScroll from 'react-infinite-scroller'\r\n\r\nimport Spinner from '../../Spinner/Spinner'\r\nimport { getHeaders } from '../../../middleware/authMiddleware';\r\n\r\nimport TestsContext from '../../../context/TestsContext'\r\n\r\nconst TestCard = React.lazy(() => import('./TestCard'));\r\n\r\nexport default class TestsComtainer extends Component {\r\n    state = {\r\n        tests: [],\r\n        left: 0,\r\n        right: 3,\r\n        isMoreTests: true,\r\n        isRedirectToLogin: false\r\n    }\r\n\r\n    static contextType = TestsContext;\r\n\r\n    loadMore() {\r\n        const { urlToFetch } = this.props;\r\n        const { left, right, tests } = this.state;\r\n        console.log(urlToFetch)\r\n\r\n        fetch(urlToFetch, {\r\n            method: 'POST',\r\n            headers: {\r\n                ...getHeaders(),\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                isLimited: true,\r\n                left,\r\n                right\r\n            })\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                if (res.isTokenError) {\r\n                    this.context.logout();\r\n                    this.setState({\r\n                        ...this.state,\r\n                        isRedirectToLogin: true\r\n                    })\r\n                    return true;\r\n                }\r\n                res.tests.forEach(test => tests.push(test));\r\n                this.setState({\r\n                    ...this.state,\r\n                    tests,\r\n                    left: left + 3,\r\n                    right: right + 3,\r\n                    isMoreTests: res.isMoreTests\r\n                }, () => console.log(this.state.tests))\r\n            });\r\n    }\r\n    \r\n\r\n    render() {\r\n        const { type, user } = this.props;\r\n\r\n        const { isLoading, tests, isRedirectToLogin, isMoreTests } = this.state;\r\n\r\n        let tempTests = [];\r\n        console.log(isMoreTests)\r\n\r\n        if (isRedirectToLogin) return (\r\n            <Redirect to=\"/app/login\" />\r\n        )\r\n\r\n        if (isLoading || !tests) return (\r\n            <Spinner />\r\n        )\r\n\r\n        let items = [];\r\n        tests.map(test => {\r\n            items.push (\r\n                <Suspense fallback={ <Spinner size=\"sm\" /> } >\r\n                    <TestCard type={ type } test={ test } user={ user || null } />\r\n                </Suspense> \r\n            )\r\n        })\r\n\r\n        return (\r\n            <InfiniteScroll\r\n                pageStart={ \"0\" }\r\n                loadMore={ this.loadMore.bind(this) }\r\n                hasMore={ isMoreTests }\r\n                preload={ false }\r\n                loader={ <Spinner /> }\r\n                useWindow={ false } >\r\n                <div className=\"tests-container\">\r\n                    { items.length === 0 ? <h3>Oops, no tests available yet!</h3> : items }\r\n                </div>\r\n                \r\n            </InfiniteScroll>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport Logo from './img/logo1.svg'\r\nimport LogoLight from './img/logo-light1.svg'\r\nimport Hero from './img/hero.svg'\r\n\r\nimport './css/style.css'\r\n\r\nexport default class LandingPage extends Component {\r\n    render() {\r\n        return (\r\n            <header>\r\n                {/* <div className=\"bg-circle-lg bg-circle\"></div> */}\r\n                <div className=\"bg-circle-md bg-circle\"></div>\r\n                <div className=\"bg-circle-dm bg-circle\"></div>\r\n                <div className=\"nav\">\r\n                    <div className=\"nav-left\">\r\n                        <img className=\"light\" src={ Logo } alt=\"\" />\r\n                        <img className=\"dark\" src={ LogoLight } alt=\"\" />\r\n                        <h1>EasyTest</h1>\r\n                    </div>\r\n                </div>\r\n                <div className=\"hero\">\r\n                    <div className=\"hero-left\">\r\n                        <h1>Get your experience in online testing to a whole new level!</h1>\r\n                        <Link className=\"cta\" to=\"/app/\">Try it out!</Link>\r\n                    </div>\r\n                    <div className=\"hero-right\">\r\n                        <img src={ Hero } alt=\"\" />\r\n                    </div>\r\n                </div>\r\n                <div className=\"copyright\">\r\n                    &copy; 2020 Yegor Trussov\r\n                </div>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { NavLink, Link } from 'react-router-dom'\r\nimport ls from 'local-storage'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faHome, faAlignLeft, faPenAlt, faSignInAlt, faSignOutAlt, faUserPlus } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport Logo from './img/logo.svg'\r\n\r\nimport TestsContext from '../../context/TestsContext'\r\n\r\nclass Navbar extends Component {\r\n    state = {\r\n        isLoggedIn: false\r\n    }\r\n\r\n    static contextType = TestsContext;\r\n\r\n    logout() {\r\n        this.context.logout();\r\n        window.location.href = process.env.PUBLIC_URL + '/app/login'\r\n    }\r\n\r\n    render() {\r\n        const token = ls.get('token');\r\n        console.log(token);\r\n        \r\n        let isLoggedIn = token !== '';\r\n\r\n        return (\r\n            <nav>\r\n                <div className=\"nav-item nav-top\">\r\n                    <Link to=\"/\">\r\n                        <h2 className=\"logo\"><img src={ Logo } alt=\"\"/> <span className=\"text\">EasyTest</span></h2>\r\n                    </Link>\r\n                </div>\r\n                { \r\n                    isLoggedIn && (\r\n                        <div className=\"nav-item nav-middle\">\r\n                            <NavLink exact className=\"nav-link\" to={\"/app/\"}><FontAwesomeIcon className=\"icon\" icon={ faHome } /> <span className=\"text\">Home</span></NavLink>\r\n                            <NavLink className=\"nav-link\" to={\"/app/allTests\"}><FontAwesomeIcon className=\"icon\" icon={ faAlignLeft } /><span className=\"text\"> Tests</span></NavLink>\r\n                            <NavLink className=\"nav-link\" to={\"/app/createTest\"}><FontAwesomeIcon className=\"icon\" icon={ faPenAlt } /> <span className=\"text\">Create Test</span></NavLink>\r\n                        </div>\r\n                    )\r\n                }\r\n                \r\n                <div className=\"nav-item nav-bottom\">\r\n                    { !isLoggedIn && (\r\n                        <>\r\n                            <NavLink className=\"nav-link\" to={\"/app/login\"}><FontAwesomeIcon className=\"icon\" icon={ faSignInAlt } /> <span className=\"text\">Login</span></NavLink>\r\n                            <NavLink className=\"nav-link\" to={\"/app/register\"}><FontAwesomeIcon className=\"icon\" icon={ faUserPlus } /> <span className=\"text\">Register</span></NavLink>\r\n                        </>\r\n                    ) }\r\n                    { isLoggedIn && (\r\n                        <button className=\"nav-link\" onClick={ this.logout.bind(this) } ><FontAwesomeIcon className=\"icon\" icon={ faSignOutAlt } /> <span className=\"text\">Logout</span></button>\r\n                    ) }                    \r\n                </div>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar","import React, { Component, Suspense } from 'react'\r\nimport Spinner from '../Spinner/Spinner'\r\nimport { getHeaders } from '../../middleware/authMiddleware'\r\nimport { formatDate } from '../../middleware/dateFormat'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport PointsCard from '../reusableComponents/PointsCard'\r\n\r\nimport TestsContext from '../../context/TestsContext'\r\n\r\nimport './css/style.css'\r\n\r\nconst TestsContainer = React.lazy(() => import('../reusableComponents/tests/TestsContainer'))\r\n\r\nexport default class Profile extends Component {\r\n    state = {\r\n        user: null,\r\n        passedTests: [],\r\n        avgResult: null,\r\n        isLoading: true,\r\n        nextLinkVal: null\r\n    }\r\n\r\n    static contextType = TestsContext;\r\n\r\n    componentDidMount() {\r\n        fetch(`${ this.context.proxy }/api/users/user`, {\r\n            headers: getHeaders()\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                if (res.isTokenError) {\r\n                    this.context.logout();\r\n                    window.location.href = '/app/login';\r\n                }\r\n                console.log(res.passedTests);\r\n                \r\n                res.passedTests.reverse();\r\n\r\n                let avgResult = 0;\r\n                res.passedTests.forEach(test => {\r\n                    avgResult += test.points / test.maxPoints;\r\n                    console.log(avgResult)\r\n                })\r\n                avgResult /= res.passedTests.length;\r\n                avgResult = Math.floor(avgResult * 100);\r\n\r\n                this.setState({\r\n                    user: res,\r\n                    avgResult,\r\n                    isLoading: false,\r\n                })\r\n            })\r\n    }\r\n\r\n    render() {\r\n        const { user, isLoading, avgResult } = this.state;\r\n\r\n        console.log(user)\r\n\r\n        let tempTests = [];\r\n\r\n        if (isLoading || !user) return (\r\n            <Spinner />\r\n        )\r\n\r\n        const urlToFetch = `${ this.context.proxy }/api/tests/passedTests/${ user._id }`;\r\n\r\n        return (\r\n            <>\r\n                <h1 className=\"heading\">\r\n                    Hello, { user.name }!\r\n                </h1>\r\n                <div className=\"profile-block\">\r\n                    <div className=\"profile-img\">\r\n                        <img src=\"/img/profile-img.svg\" alt=\"\"/>\r\n                    </div>\r\n                    <div className=\"profile-info\">\r\n                        <div className=\"profile-info__block\">\r\n                            <span className=\"info-text\">Name: { user.name }</span>\r\n                        </div>\r\n                        <div className=\"profile-info__block\">\r\n                            <span className=\"info-text\">Tests passed: { user.passedTests.length }</span>\r\n                        </div>\r\n                        <div className=\"profile-info__block\">\r\n                            <span className=\"info-text\">Average result: { avgResult }%</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                { user.passedTests.length > 0 ? ( <h2>Your recent tests: </h2> ) : ( <h2>You haven't passed any tests yet!</h2> ) }\r\n                { <Suspense fallback={ <Spinner /> }>\r\n                    <TestsContainer type=\"result\" urlToFetch={ urlToFetch } user={ user } />\r\n                </Suspense> }\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React, { Component, Suspense } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nimport TestsContext from '../../context/TestsContext'\r\nimport Spinner from '../Spinner/Spinner'\r\n\r\nimport './css/style.css'\r\n\r\nconst TestsContainer = React.lazy(() => import('../reusableComponents/tests/TestsContainer'))\r\n\r\nexport default class Tests extends Component {\r\n    state = {\r\n        isLoading: false,\r\n        tests: [],\r\n        isRedirectToLogin: false,\r\n        left: 0,\r\n        right: 3,\r\n        isMoreTests: true\r\n    }\r\n\r\n    static contextType = TestsContext;    \r\n\r\n    render() {\r\n        const { isLoading, tests, isRedirectToLogin, isMoreTests } = this.state;\r\n\r\n        let tempTests = [];\r\n        console.log(isMoreTests)\r\n\r\n        const linkToFetch = `${ this.context.proxy }/api/tests/allTests`;\r\n\r\n        if (isRedirectToLogin) return (\r\n            <Redirect to=\"/app/login\" />\r\n        )\r\n\r\n        if (isLoading) return (\r\n            <Spinner />\r\n        )\r\n\r\n        return (\r\n            <>\r\n                <h1 className=\"heading\">Recent tests: </h1>\r\n                <Suspense fallback={ <Spinner /> }>\r\n                    <TestsContainer \r\n                        urlToFetch={ linkToFetch }\r\n                        type={ \"full\" } />\r\n                </Suspense>\r\n                \r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nimport './css/style.css'\r\n\r\nconst Input = ({ name, onChange, type, isMini }) => {\r\n    const handleChange = (e) => {\r\n        console.log(e);\r\n        onChange(e);\r\n    }\r\n\r\n    const extraClassName = isMini ? 'mini' : '';\r\n\r\n    return (\r\n        <div className={ \"input-group \" + extraClassName}>\r\n            <input autoComplete={ isMini ? \"off\" : \"on\" } className={ extraClassName } type=\"text\" type={ type } name={ name } onChange={ (e) => handleChange(e) } />\r\n            <label htmlFor={ name }></label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input\r\n","import React, { Component } from 'react';\r\nimport { Link, Redirect } from 'react-router-dom';\r\n\r\n\r\nimport Spinner from '../Spinner/Spinner'\r\n\r\nimport PointsCard from '../reusableComponents/PointsCard'\r\nimport Input from '../reusableComponents/inputField/Input'\r\n\r\nimport { convertTime } from '../../middleware/convertTime'\r\n\r\nimport './css/style.css'\r\n\r\nimport TestsContext from '../../context/TestsContext'\r\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons';\r\nimport { getHeaders } from '../../middleware/authMiddleware';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faUser, faThumbsUp } from '@fortawesome/free-regular-svg-icons'\r\n\r\nexport default class TestInfo extends Component {\r\n    state = {\r\n        isLoading: true,\r\n        test: null,\r\n        testResults: null,\r\n        usernames: null,\r\n        errors: [],\r\n        isRedirectToLogin: false,\r\n        hasLiked: false\r\n    };\r\n\r\n    static contextType = TestsContext;\r\n\r\n    componentDidMount() {\r\n        const testId = this.props.match.params.testId;\r\n        \r\n        fetch(`${ this.context.proxy }/api/tests/testInfo/${ testId }`, {\r\n            headers: {\r\n                ...getHeaders()\r\n            }\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                if (res.isTokenError) {\r\n                    this.context.logout();\r\n                    this.setState({\r\n                        ...this.state,\r\n                        isRedirectToLogin: true\r\n                    })\r\n                } else {\r\n                    let hasLiked = false;\r\n                    if (res.likes.find((like) => like === this.context.userId))\r\n                        hasLiked = true;\r\n                    this.setState({\r\n                        ...this.state,\r\n                        isLoading: false,\r\n                        test: res,\r\n                        hasLiked\r\n                    })\r\n                }\r\n            })\r\n        fetch(`${ this.context.proxy }/api/tests/testResults/${ testId }`)\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                res.testResults.sort((res1, res2) => {\r\n                    return res2.points - res1.points;\r\n                })\r\n                this.setState({\r\n                    isLoading: false,\r\n                    testResults: res.testResults,\r\n                    usernames: res.usernames\r\n                })\r\n            })\r\n    }\r\n\r\n    setAccessKey(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            currentAccessKey: e.target.value\r\n        })\r\n    }\r\n\r\n    goToTest() {\r\n        const { test, errors, testResults } = this.state;\r\n        const { maxAttempts } = test;\r\n        let usedAttemtps = 0;\r\n        testResults.forEach(res => {\r\n            if (res.userId === this.context.userId) \r\n                usedAttemtps++;\r\n        })\r\n        console.log(usedAttemtps, maxAttempts);\r\n        \r\n        if (maxAttempts && usedAttemtps >= maxAttempts) {\r\n            errors['attempts'] = 'You have not got any attempts left!';\r\n            this.setState({\r\n                ...this.state,\r\n                errors\r\n            })\r\n        } else {\r\n            const { currentAccessKey } = this.state;\r\n            const { accessKey, _id, isProtected } = test;\r\n            if (accessKey === currentAccessKey || !isProtected) {\r\n                window.location.href = `/app/passTest/${ _id }`\r\n            } else {\r\n                let { errors } = this.state;\r\n                errors['keyError'] = 'Incorrect access key!';\r\n                this.setState({\r\n                    ...this.state,\r\n                    errors\r\n                })\r\n            }\r\n        }\r\n        \r\n        \r\n    }   \r\n    \r\n    componentDidUpdate() {\r\n        let field = document.querySelector('span.field');\r\n        console.log(field);\r\n        \r\n        if (field && field !== null) field.addEventListener('keypress',function(e){ \r\n            if (e.which === 13) {\r\n                e.preventDefault();\r\n            }\r\n        });\r\n    }\r\n\r\n    setLike() {\r\n        const { test, hasLiked } = this.state;\r\n\r\n        fetch(`${ this.context.proxy }/api/tests/likeTest/${ test._id }`, {\r\n            method: 'POST',\r\n            headers: {\r\n                ...getHeaders,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                isIncrease: !hasLiked,\r\n                userId: this.context.userId\r\n            })\r\n        }) \r\n            .then(res => res.json())\r\n            .then(res => {\r\n                let { test } = this.state;\r\n                test.likes = res.likes;\r\n                console.log(test.likes.length)\r\n                this.setState({\r\n                    ...this.state,\r\n                    test,\r\n                    hasLiked: !hasLiked\r\n                }, () => console.log(this.state.hasLiked))\r\n            })\r\n    }\r\n\r\n    render() {\r\n        const { isLoading, test, testResults, errors, isRedirectToLogin, hasLiked } = this.state;\r\n\r\n        if (isRedirectToLogin) return (\r\n            <Redirect to='/app/login' />\r\n        )\r\n        \r\n        if (isLoading || test === null) return (\r\n            <Spinner />\r\n        )\r\n\r\n        const { maxAttempts, timeLimit } = test;\r\n        let usedAttemtps = 0;\r\n        if (testResults) testResults.forEach(res => {\r\n            if (res.userId === this.context.userId) \r\n                usedAttemtps++;\r\n        })\r\n        const attemtpsLeft = maxAttempts - usedAttemtps;\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"page-top\">\r\n                    <Link to=\"/app/allTests\">\r\n                        <FontAwesomeIcon icon={ faArrowLeft } /> Back \r\n                    </Link>\r\n                </div>\r\n                <h1>{ test.title }</h1>\r\n                <p>{ test.description }</p>\r\n                { test.isProtected && (\r\n                    //return (\r\n                        <>\r\n                            <br/>\r\n                            <label htmlFor=\"title\">To start the test, you need to type in the secret key!</label> <br/>\r\n                            <Input type=\"text\" name=\"secretKey\" isMini={ true } onChange={ (e) => this.setAccessKey(e) } />\r\n                            {/* <span id=\"field\" className=\"field\" contenteditable=\"true\" onInput={ (e) => this.setAccessKey(e) } type=\"text\" name=\"title\"></span> */}\r\n                            <span className=\"error-input\">{ errors['keyError'] }</span>\r\n                        </>\r\n                    //)\r\n                    \r\n                 ) }\r\n                 { maxAttempts && (\r\n                    <div className=\"attempts-block\">\r\n                        <span className=\"max-attemtts\">Attempts left: { attemtpsLeft }</span>\r\n                    </div>\r\n                 ) }\r\n                 { timeLimit && (\r\n                    <div className=\"attempts-block\">\r\n                        <span className=\"max-attemtts\">Time limit: { convertTime(timeLimit) }</span>\r\n                    </div>\r\n                 ) }\r\n                <br/>\r\n                {/* <Link class=\"btn btn-cta\" to={ `/app/passTest/${ test._id }` }>\r\n                    Pass test!\r\n                </Link> */}\r\n                <span className=\"error-input\">{ errors['attempts'] }</span>\r\n                <div className=\"btn-block\">\r\n                    <button onClick={ () => this.goToTest() } className=\"btn btn-cta\">Pass test!</button>\r\n                    <button className=\"btn like-btn\" onClick={ this.setLike.bind(this) } icon={ faThumbsUp }> \r\n                        <FontAwesomeIcon className=\"icon\" icon={ faThumbsUp } />\r\n                        <span>{ test.likes.length }</span>\r\n                    </button>\r\n                </div>\r\n                \r\n                <div className=\"results\">\r\n                    <h3>Results: </h3>\r\n                    <table>\r\n                        <col className=\"username\" />\r\n                        <col className=\"points\" />\r\n                        <tr>\r\n                            <th>User</th>\r\n                            <th className=\"points\">Points</th>\r\n                        </tr>\r\n                        { testResults === null ? () => {\r\n                            return (\r\n                                <Spinner />\r\n                            )\r\n                        } : testResults.map(res => {                            \r\n                            return (\r\n                                <tr className='resultTr' key={ res.userId + res.points }>\r\n                                    <td>{ res.username }</td>\r\n                                    <td className=\"points\">\r\n                                        <PointsCard points={ res.points } maxPoints={ res.answers.length } />\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        }) }\r\n                    </table>\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","export const convertTimeShort = seconds => {\r\n    return new Date(seconds * 1000).toISOString().substr(11, 8);\r\n};\r\n\r\nexport const convertTime = seconds => {\r\n    const hrs = Math.floor(seconds / 3600);\r\n    const mins = Math.floor((seconds - hrs * 3600) / 60);\r\n    const secs = seconds - hrs * 3600 - mins * 60;\r\n\r\n    let result = '';\r\n    if (hrs) \r\n        result += hrs.toString() + ` hour${ hrs !== 1 ? 's' : '' } `;\r\n    if (mins)\r\n        result += mins.toString() + ` minute${ mins !== 1 ? 's' : '' } `;\r\n    if (secs) \r\n        result += secs.toString() + ` second${ secs !== 1 ? 's' : '' } `;\r\n    \r\n    return result;\r\n};\r\n","import React, { Component, Suspense } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport TestsContext from '../../context/TestsContext'\r\nimport Spinner from '../Spinner/Spinner';\r\nimport TestsContainer from '../reusableComponents/tests/TestsContainer'\r\n\r\nimport { formatDate } from '../../middleware/dateFormat'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faUser, faThumbsUp } from '@fortawesome/free-regular-svg-icons'\r\n\r\nexport default class CreateTest extends Component {\r\n    state = {\r\n        createdTests: [],\r\n        isLoading: false\r\n    }\r\n\r\n    static contextType = TestsContext;\r\n\r\n    componentDidMount() {\r\n        if (!this.context.userId) \r\n            window.location.href = '/app/login';\r\n        // fetch(`${ this.context.proxy }/api/tests/createdTests/${ this.context.userId }`)\r\n        //     .then(res => res.json())\r\n        //     .then(res => {\r\n        //         console.log(res);\r\n                \r\n        //         this.setState({\r\n        //             createdTests: res,\r\n        //             isLoading: false\r\n        //         })\r\n        //     })\r\n    }\r\n    \r\n    render() {\r\n        const { createdTests, isLoading } = this.state;\r\n\r\n        if (isLoading) return (\r\n            <Spinner />\r\n        )\r\n\r\n        let urlToFetch = `${ this.context.proxy }/api/tests/createdTests/${ this.context.userId }`;\r\n\r\n        return (\r\n            <>\r\n                <h1 className=\"heading\">\r\n                    Currently, you have { createdTests.length } created tests\r\n                </h1>\r\n                <Link to=\"/app/createTestForm\" className=\"btn btn-cta\">\r\n                    New test\r\n                </Link>\r\n                { <Suspense fallback={ <Spinner /> }>\r\n                    <TestsContainer type=\"created\" urlToFetch={ urlToFetch } user={ null } />\r\n                </Suspense> }\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport Spinner from '../Spinner/Spinner'\r\n\r\nimport './css/style.css'\r\n\r\nimport TestsContext from '../../context/TestsContext'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCheckCircle, faTimesCircle } from '@fortawesome/free-regular-svg-icons'\r\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport default class TestResult extends Component {\r\n    state = {\r\n        isLoading: true,\r\n        test: null,\r\n        answers: null\r\n    }\r\n\r\n    static contextType = TestsContext;\r\n\r\n    componentDidMount() {\r\n        const userId = this.props.match.params.userId;\r\n        const resultId = this.props.match.params.resultId;\r\n        \r\n        fetch(`${ this.context.proxy }/api/tests/testResult/${ userId }/${ resultId }`)\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                \r\n                this.setState({\r\n                    isLoading: false,\r\n                    answers: res.answers,\r\n                    test: res.test\r\n                })\r\n            })\r\n    }\r\n    \r\n\r\n    render() {\r\n        const { isLoading, test, answers } = this.state;\r\n        if (test) console.log(test.questions[0]);\r\n        console.log(answers);\r\n        \r\n        \r\n\r\n        if (isLoading) return (\r\n            <Spinner />\r\n        )\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"page-top\">\r\n                    <Link to=\"/app/\">\r\n                        <FontAwesomeIcon className=\"icon\" icon={ faArrowLeft } /> Back\r\n                    </Link>\r\n                </div>\r\n                <h1 className=\"heading\">\r\n                    Test result for \"{ test.title }\"\r\n                </h1>\r\n                <div className=\"result-table\">\r\n                    <table>\r\n                        <col className=\"main\" />\r\n                        { answers.map(ans => {\r\n                            return (\r\n                                <col className=\"answer\" />\r\n                            )\r\n                        }) }\r\n                        <tr className=\"first\">\r\n                            <th className=\"first main\">Question No.</th>\r\n                            { answers.map((ans, inx) => {\r\n                                return (\r\n                                    <th className=\"first ans\">{ inx + 1 }</th>\r\n                                )\r\n                            }) }\r\n                        </tr>\r\n                        <tr>\r\n                            <th className=\"main\">Result: </th>\r\n                            { answers.map((ans, inx) => {\r\n                                let extraClassName = '';\r\n                                console.log(toString(ans));\r\n                                \r\n                                let isCorrect = ans.toString() === test.questions[inx].correctAnswerId;\r\n                                \r\n                                if (parseInt(ans) === parseInt(test.questions[inx].correctAnswerId)) \r\n                                    extraClassName = 'correct';\r\n                                else \r\n                                    extraClassName = 'wrong'\r\n                                return (\r\n                                    <th className={ `answerr ans ${ extraClassName }` }>{ isCorrect ? (<FontAwesomeIcon className=\"icon\" icon={ faCheckCircle } /> ) : (<FontAwesomeIcon className=\"icon\" icon={ faTimesCircle } />) }</th>\r\n                                )\r\n                            }) }\r\n                        </tr>\r\n                    </table>\r\n                </div>\r\n                { answers.map((ans, inx) => {\r\n                    let isCorrect = ans.toString() === test.questions[inx].correctAnswerId;\r\n                    console.log(test.questions);\r\n                    \r\n                    let extraClassName = '';\r\n                    if (!isCorrect) extraClassName = 'wrong';\r\n                    let question = test.questions[inx];\r\n                    console.log(question.answers[parseInt(question.correctAnswerId)]);\r\n                    \r\n                    return (\r\n                        <div className=\"question-ans\">\r\n                            <h3>{ inx + 1 }. { question.title }</h3>\r\n                            { ans ===  0 ? (\r\n                                <span className={ \"ans-text \" + extraClassName}>\r\n                                    Your answer: -\r\n                                </span>\r\n                            ) : (\r\n                                <span className={ \"ans-text \" + extraClassName}>\r\n                                    Your answer: { ans }) { question.answers[ans - 1].text }\r\n                                </span>\r\n                            ) } \r\n                            <span className=\"ans-text\">\r\n                                Correct answer: { question.correctAnswerId }) { question.answers[parseInt(question.correctAnswerId) - 1].text }\r\n                            </span>                           \r\n                        </div>\r\n                    )\r\n                }) }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nimport Spinner from '../Spinner/Spinner'\r\nimport Input from '../reusableComponents/inputField/Input'\r\n\r\nimport TestsContext from '../../context/TestsContext'\r\n\r\nimport './css/style.css'\r\n\r\nexport default class CreateTestForm extends Component {\r\n    state = {\r\n        questions: [{\r\n            title: '',\r\n            answers: [{\r\n                text: '',\r\n                answerId: '1'\r\n            }, {\r\n                text: '',\r\n                answerId: '2'\r\n            }],\r\n            correctAnswerId: '1'\r\n        }],\r\n        title: '',\r\n        description: '',\r\n        subject: '',\r\n        isProtected: false,\r\n        accessKey: '',\r\n        creator: this.context.userId,\r\n        timeErrorMsg: '',\r\n        isLoading: false,\r\n        errors: [],\r\n        maxAttempts: null,\r\n        isLimitedAttempts: false,\r\n        isLimitedTime: false,\r\n        timeLimit: null\r\n    }\r\n\r\n    static contextType = TestsContext;\r\n\r\n    componentDidMount() {\r\n                \r\n        var x, i, selElmnt, a, b, c;\r\n        /* Look for any elements with the class \"custom-select\": */\r\n        x = document.getElementsByClassName('custom-select');\r\n        console.log(x);\r\n\r\n        let timeValues = [5 * 60, 10 * 60, 20 * 60, 30 * 60, 1 * 60 * 60, 1.5 * 60 * 60];\r\n\r\n        const setst = (j) => {\r\n            console.log(\"hhhh\");\r\n            \r\n            this.setState({\r\n                ...this.state,\r\n                timeLimit: timeValues[j - 1]\r\n            }, () => console.log(this.state))\r\n        }\r\n\r\n        for (i = 0; i < x.length; i++) {\r\n            selElmnt = x[i].getElementsByTagName('select')[0];\r\n            /* For each element, create a new DIV that will act as the selected item: */\r\n            a = document.createElement('DIV');\r\n            a.setAttribute('class', 'select-selected');\r\n            a.innerHTML = selElmnt.options[selElmnt.selectedIndex].innerHTML;\r\n            x[i].appendChild(a);\r\n            /* For each element, create a new DIV that will contain the option list: */\r\n            b = document.createElement('DIV');\r\n            b.setAttribute('class', 'select-items select-hide');\r\n            for (let j = 1; j < selElmnt.length; j++) {\r\n                /* For each option in the original select element,\r\n            create a new DIV that will act as an option item: */\r\n                c = document.createElement('DIV');\r\n                c.innerHTML = selElmnt.options[j].innerHTML;\r\n                console.log(selElmnt);\r\n                \r\n                c.addEventListener('click', function(e) {\r\n                    /* When an item is clicked, update the original select box,\r\n                and the selected item: */\r\n                    \r\n                    var y, i, k, s, h;\r\n                    s = this.parentNode.parentNode.getElementsByTagName('select')[0];\r\n                    h = this.parentNode.previousSibling;\r\n                    console.log(timeValues[j - 1]);\r\n                    // this.setState({\r\n                    //     ...this.state,\r\n                    //     timeLimit: timeValues[j - 1]\r\n                    // })\r\n                    \r\n                    \r\n                    for (i = 0; i < s.length; i++) {\r\n                        if (s.options[i].innerHTML === this.innerHTML) {\r\n                            s.selectedIndex = i;\r\n\r\n                            h.innerHTML = this.innerHTML;\r\n                            y = this.parentNode.getElementsByClassName(\r\n                                'same-as-selected'\r\n                            );\r\n                            for (k = 0; k < y.length; k++) {\r\n                                y[k].removeAttribute('class');\r\n                            }\r\n                            this.setAttribute('class', 'same-as-selected');\r\n                            break;\r\n                        }\r\n                    }\r\n                    h.click();\r\n\r\n                    setst(j);\r\n                });\r\n                b.appendChild(c);\r\n            }\r\n            x[i].appendChild(b);\r\n            a.addEventListener('click', function(e) {\r\n                /* When the select box is clicked, close any other select boxes,\r\n            and open/close the current select box: */\r\n                e.stopPropagation();\r\n                closeAllSelect(this);\r\n                this.nextSibling.classList.toggle('select-hide');\r\n                this.classList.toggle('select-arrow-active');\r\n            });\r\n        }\r\n\r\n        function closeAllSelect(elmnt) {\r\n            /* A function that will close all select boxes in the document,\r\n        except the current select box: */\r\n            var x,\r\n                y,\r\n                i,\r\n                arrNo = [];\r\n            x = document.getElementsByClassName('select-items');\r\n            y = document.getElementsByClassName('select-selected');\r\n            for (i = 0; i < y.length; i++) {\r\n                if (elmnt === y[i]) {\r\n                    arrNo.push(i);\r\n                } else {\r\n                    y[i].classList.remove('select-arrow-active');\r\n                }\r\n            }\r\n            for (i = 0; i < x.length; i++) {\r\n                if (arrNo.indexOf(i)) {\r\n                    x[i].classList.add('select-hide');\r\n                }\r\n            }\r\n        }\r\n\r\n        document.addEventListener('click', closeAllSelect);\r\n\r\n    }\r\n    \r\n\r\n    handleAddAnswer(quesId) {\r\n        const { questions } = this.state;        \r\n        let len = questions[quesId].answers.length;\r\n        console.log(len.toString());\r\n        \r\n        if (questions[quesId].answers.length === 6) return;\r\n        questions[quesId].answers.push({\r\n            text: '',\r\n            answerId: (len + 1).toString()\r\n        })\r\n        console.log(questions[quesId].answers);\r\n        \r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        })\r\n    }\r\n\r\n    handleAddQuestion() {\r\n        const { questions } = this.state;\r\n        if (questions.length === 20) return;\r\n        questions.push({\r\n            title: '',\r\n            answers: [{\r\n                text: '',\r\n                answerId: '1'\r\n            }, {\r\n                text: '',\r\n                answerId: '2'\r\n            }],\r\n            correctAnswerId: '1'\r\n        }) \r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        })\r\n    }\r\n\r\n    setQuestionTitle(e, index) {\r\n        let { questions } = this.state;\r\n        questions[index].title = e.target.value;\r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        });\r\n    }\r\n\r\n    setAnswerText(e, index, inx) {\r\n        console.log(e.target.value);\r\n        \r\n        let { questions } = this.state;\r\n        console.log(questions[index].answers, inx);\r\n        questions[index].answers[inx].text = e.target.value;\r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        })\r\n    }\r\n\r\n    setTestTitle(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            title: e.target.value\r\n        })\r\n    }\r\n\r\n    setTestDescription(e) {        \r\n        this.setState({\r\n            ...this.state,\r\n            description: e.target.value\r\n        })\r\n    }\r\n\r\n    setTestSubject(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            subject: e.target.value\r\n        }, () => console.log(this.state.subject))\r\n    }\r\n\r\n    setProtectedState(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            isProtected: !this.state.isProtected,\r\n            accessKey: ''\r\n        })\r\n    }\r\n\r\n    setAttemptsState(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            isLimitedAttempts: !this.state.isLimitedAttempts,\r\n            maxAttempts: 1\r\n        })\r\n    }\r\n\r\n    setTimeLimitState(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            isLimitedTime: !this.state.isLimitedTime,\r\n            timeLimit: null\r\n        })\r\n    }\r\n\r\n    setAccessKey(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            accessKey: e.target.value\r\n        })\r\n    }\r\n\r\n    setAttemptsNumber(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            maxAttempts: parseInt(e.target.value)\r\n        })\r\n        console.log(this.state);\r\n        \r\n    }\r\n\r\n    changeAttemptsNumber(value) {\r\n        let { maxAttempts } = this.state;\r\n\r\n        if (value > 0) \r\n            maxAttempts = Math.min(maxAttempts + value, 10);\r\n        else \r\n            maxAttempts = Math.max(maxAttempts + value, 1);\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            maxAttempts\r\n        })\r\n    }\r\n\r\n    setCorrectAnswerId(quesIndex, ansId) {\r\n        let { questions } = this.state;\r\n        questions[quesIndex].correctAnswerId = ansId;\r\n        console.log(ansId);\r\n        \r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        })\r\n    }\r\n\r\n    handleAddTest() {\r\n        this.setState({\r\n            ...this.state,\r\n            isLoading: true\r\n        })\r\n\r\n        let newTest = this.state;\r\n        \r\n        console.log(this.state);\r\n        \r\n        let errors = [];\r\n\r\n        if (!newTest.title) \r\n            errors['title'] = 'The test must have a title'\r\n        if (!newTest.subject) \r\n            errors['subject'] = 'The test must have a subject'\r\n        newTest.questions.map(ques => {\r\n            if (!ques.title) \r\n                errors['questions'] = 'Questions must not be empty';\r\n            ques.answers.map(ans => {\r\n                if (!ans.text) \r\n                    errors['answers'] = 'Answers must not be empty';\r\n                return true;\r\n            })\r\n            return true;\r\n        })\r\n\r\n        if (errors['title'] || errors['subject'] || errors['questions'] || errors['answers']) {\r\n            this.setState({\r\n                ...this.state,\r\n                errors\r\n            });\r\n            return;\r\n        }\r\n\r\n        if (!this.context.userId) \r\n            window.location.href = '/app/login'\r\n        \r\n        fetch(`${ this.context.proxy }/api/tests/createTest`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'x-auth-token': this.context.token\r\n            },\r\n            body: JSON.stringify(this.state)\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                \r\n                if (!res.success) {\r\n                    if (res.isTimeErr) {\r\n                        this.setState({\r\n                            ...this.state,\r\n                            timeErrorMsg: 'You cannot create more than 1 test in 5 minutes!',\r\n                            isLoading: false\r\n                        })\r\n                    }\r\n                } else {\r\n                    window.location.href = '/app/allTests'\r\n                }\r\n            })\r\n    }\r\n\r\n    deleteAnswer(quesId, ansId) {\r\n        let { questions } = this.state;\r\n        if (questions[quesId].answers.length <= 2) return;\r\n\r\n        let inx = parseInt(ansId);\r\n        let corrAnswer = questions[quesId].correctAnswerId;\r\n        if (corrAnswer.toString() === (ansId + 1).toString()) {\r\n            if (ansId === 0) {\r\n                questions[quesId].correctAnswerId = '1';\r\n            } else {                \r\n                questions[quesId].correctAnswerId = (ansId).toString();\r\n            }\r\n        } \r\n        for (let i = inx; i < questions[quesId].answers.length; i++) {\r\n            questions[quesId].answers[i].answerId = (parseInt(questions[quesId].answers[i].answerId) - 1).toString();\r\n            if (i !== inx)\r\n                document.getElementById(`_${ quesId }-${ i - 1 }`).value = questions[quesId].answers[i].text;\r\n        }  \r\n        console.log(+questions[quesId].correctAnswerId, questions[quesId].answers.length)\r\n        if (+questions[quesId].correctAnswerId >= questions[quesId].answers.length) \r\n            questions[quesId].correctAnswerId =  (questions[quesId].answers.length - 1).toString();\r\n        console.log(questions[quesId]);\r\n        \r\n        questions[quesId].answers.splice(ansId, 1);\r\n\r\n        console.log(questions[quesId].answers);\r\n        \r\n\r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        })\r\n    }\r\n\r\n    deleteQuestion(quesId) {\r\n        let { questions } = this.state;\r\n        if (questions.length === 1) return;\r\n        \r\n        questions.splice(quesId, 1);\r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { questions, isProtected, timeErrorMsg, isLoading, title, errors, isLimitedAttempts, isLimitedTime, maxAttempts } = this.state;\r\n        \r\n        const letters = ['A', 'B', 'C', 'D', 'E', 'F'];\r\n\r\n        return (\r\n            <div>\r\n                <h1 className=\"heading\">\r\n                    Create test \r\n                </h1>\r\n                <div className=\"test-basic-info\">\r\n                    <div className=\"info-group\">\r\n                        <label htmlFor=\"title\">Test name: </label>\r\n                        <Input type=\"text\" onChange={ (e) => this.setTestTitle(e) } isMini={ true } name=\"title\" />\r\n                        <span className=\"error-input\">{ errors['title'] }</span>\r\n                    </div>\r\n                    <div className=\"info-group\">\r\n                        <label htmlFor=\"subject\">Subject: </label>\r\n                        <Input type=\"text\" onChange={ (e) => this.setTestSubject(e) } isMini={ true } name=\"title\" />\r\n                        <span className=\"error-input\">{ errors['subject'] }</span>\r\n                    </div>\r\n                    <div className=\"info-group\">\r\n                        <label htmlFor=\"description\">Description: </label>\r\n                        <textarea className=\"\" onChange={ (e) => this.setTestDescription(e) } name=\"description\" id=\"\" cols=\"30\" rows=\"10\"></textarea>\r\n                    </div>\r\n                    <div className=\"info-group-checkbox\">\r\n                        <input onChange={ this.setProtectedState.bind(this) } type=\"checkbox\" name=\"isProtected\" />\r\n                        <label htmlFor=\"isProtected\" name=\"isProtected\">Protected</label>\r\n                    </div>\r\n                    { isProtected && (\r\n                        <div className=\"info-group\">\r\n                            <label htmlFor=\"key\">Secret key: </label>\r\n                            <Input onChange={ (e) => this.setAccessKey(e) } isMini={ true } name=\"accessKey\" type=\"text\" />\r\n                        </div>\r\n                    ) }\r\n                    <div className=\"info-group-checkbox\">\r\n                        <input onChange={ this.setAttemptsState.bind(this) } type=\"checkbox\" name=\"isLimitedAttempts\" />\r\n                        <label htmlFor=\"isLimitedAttempts\" name=\"isLimitedAttempts\">Limited attempts</label>\r\n                    </div>\r\n                    { isLimitedAttempts && (\r\n                        <div className=\"info-group\">\r\n                            <label htmlFor=\"key\">Maximum attempts: </label>\r\n                            <div className=\"btn-group\">\r\n                                <button className=\"increment-btn\" onClick={ () => this.changeAttemptsNumber(-1) }> <span>-</span> </button>\r\n                                <span className=\"attempts-num\">{ maxAttempts }</span>\r\n                                <button className=\"increment-btn\" onClick={ () => this.changeAttemptsNumber(1) }> <span>+</span> </button>\r\n                            </div>\r\n                            \r\n                        </div>\r\n                    ) }\r\n                    <div className=\"info-group-checkbox\">\r\n                        <input onChange={ this.setTimeLimitState.bind(this) } type=\"checkbox\" name=\"isLimitedTime\" />\r\n                        <label htmlFor=\"isLimitedTime\" name=\"isLimitedTime\">Limited time</label>\r\n                    </div>\r\n                    { isLimitedTime ? (\r\n                        <div className=\"custom-select\" style={{ width: 300 + 'px' }}>\r\n                            <select>\r\n                                <option value=\"0\">Select time limit:</option>\r\n                                <option value=\"1\">5 minutes</option>\r\n                                <option value=\"2\">10 minutes</option>\r\n                                <option value=\"3\">20 minuted</option>\r\n                                <option value=\"4\">30 minutes</option>\r\n                                <option value=\"5\">1 hour</option>\r\n                                <option value=\"6\">1.5 hours</option>\r\n                            </select>\r\n                        </div>\r\n                    ) : (\r\n                        <div className=\"custom-select\" style={{ width: 300 + 'px', visibility: 'hidden' }}>\r\n                            <select>\r\n                                <option value=\"0\">Select time limit:</option>\r\n                                <option value=\"1\">5 minutes</option>\r\n                                <option value=\"2\">10 minutes</option>\r\n                                <option value=\"3\">20 minuted</option>\r\n                                <option value=\"4\">30 minutes</option>\r\n                                <option value=\"5\">1 hour</option>\r\n                                <option value=\"6\">1.5 hours</option>\r\n                            </select>\r\n                        </div>\r\n                    ) }\r\n                    \r\n                </div>\r\n                <div className=\"questions\">\r\n                    { questions.map((ques, index) => {\r\n                        return (\r\n                            <div className=\"question-container\">\r\n                                \r\n                                <h3 class=\"question-container__title\">\r\n                                    <div className=\"delete-question-btn\">\r\n                                        <span>&times;</span>\r\n                                    </div>\r\n                                    <span>{ index + 1 }.</span>  <Input type=\"text\" isMini={ true } onChange={ (e) => this.setQuestionTitle(e, index) } name=\"questionTitle\" />\r\n                                </h3>\r\n                                <div className=\"question-container__answers\">\r\n                                    { ques.answers.map((ans, inx) => {\r\n                                        const uid = `${ ques }-${ inx }`;\r\n                                        let extraClassName = '';\r\n\r\n                                        console.log(ques.correctAnswerId.toString() ===(inx + 1).toString())\r\n                                        \r\n                                        if (ques.correctAnswerId.toString() === (inx + 1).toString()) \r\n                                            extraClassName = 'selected';\r\n                                        console.log(extraClassName)\r\n\r\n                                        return (\r\n                                            <div className={ \"answer-block \" + extraClassName }>\r\n                                                <div className=\"answer-block__letter\" onClick={ () => this.setCorrectAnswerId(index, ans.answerId) }><span>{ letters[inx] }</span></div>\r\n                                                <div className=\"answer-block__text\">\r\n                                                    <input autoComplete=\"off\" id={ `_${ index }-${ inx }` } type=\"text\" onChange={(e) => this.setAnswerText(e, index, inx) } />\r\n                                                    <button className=\"btn-delete\" onClick={ () => this.deleteAnswer(index, inx) }>\r\n                                                        <span>&times;</span>\r\n                                                    </button>\r\n                                                </div>\r\n                                            </div>\r\n                                        )\r\n                                    }) }\r\n                                    <button onClick={ this.handleAddAnswer.bind(this, index) } className=\"add-question\"><span>+</span></button>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    }) }\r\n                    <button onClick={ this.handleAddQuestion.bind(this) } className=\"new-question btn-secondary\">\r\n                        New question\r\n                    </button>\r\n                </div>\r\n                { timeErrorMsg && (\r\n                    <span className=\"error-msg\">\r\n                        { timeErrorMsg }\r\n                    </span>\r\n                ) }\r\n\r\n                { errors['questions'] && (\r\n                    <span className=\"error-msg\">\r\n                        { errors['questions'] }\r\n                    </span>\r\n                ) }\r\n                { errors['answers'] && (\r\n                    <span className=\"error-msg\">\r\n                        { errors['answers'] }\r\n                    </span>\r\n                ) }\r\n\r\n                <button onClick={ this.handleAddTest.bind(this) } className=\"btn btn-cta\">Create test!</button>\r\n                \r\n                { isLoading && <Spinner size=\"sm\" /> }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport TestsContext from '../../context/TestsContext'\r\n\r\nimport Spinner from '../Spinner/Spinner'\r\n\r\nimport './css/style.css'\r\nimport { convertTimeShort } from '../../middleware/convertTime'\r\nimport { getHeaders } from '../../middleware/authMiddleware'\r\n\r\nexport default class PassTest extends Component {\r\n    state = {\r\n        isLoading: true,\r\n        test: [],\r\n        answers: [],\r\n        answeredQuestions: 0,\r\n        isSubmitted: false,\r\n        isTimeUp: false,\r\n        time: null\r\n    }\r\n\r\n    static contextType = TestsContext;\r\n\r\n    componentDidMount() {\r\n        const testId = this.props.match.params.testId;\r\n\r\n        fetch(`${ this.context.proxy }/api/tests/testInfo/${ testId }`, {\r\n            headers: {\r\n                ...getHeaders()\r\n            }\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                let answers = [];\r\n                for (let i = 0; i < res.questions.length; i++) \r\n                    answers[i] = 0;\r\n                this.setState({\r\n                    isLoading: false,\r\n                    answers,\r\n                    test: res\r\n                })\r\n\r\n                if (res.timeLimit) {\r\n                    const { timeLimit } = res;\r\n                    let time = timeLimit;\r\n                    setInterval(() => {\r\n                        time = Math.max(time - 1, 0);\r\n                        let { isTimeUp } = this.state;\r\n                        if (!isTimeUp && time <= 0) {\r\n                            isTimeUp = true;\r\n                            let els = document.querySelectorAll(\"input[type='radio']\");\r\n                            els.forEach(el => {\r\n                                el.setAttribute('onChange', 'return false');\r\n                                el.setAttribute('onClick', 'return false');\r\n                            })\r\n                        }\r\n                        this.setState({\r\n                            ...this.state,\r\n                            isTimeUp,\r\n                            time\r\n                        });\r\n                        \r\n                    }, 1000)\r\n                }\r\n\r\n                \r\n            })\r\n    }\r\n\r\n    handleSelect(index, answerId) {\r\n        let { answers, answeredQuestions, isTimeUp } = this.state;\r\n        \r\n        if (isTimeUp) \r\n            return;\r\n        else {\r\n            if (!answers[index]) {\r\n                answeredQuestions++;\r\n            }\r\n            answers[index] = answerId;\r\n            this.setState({\r\n                ...this.state,\r\n                answers,\r\n                answeredQuestions\r\n            }, () => console.log(this.state) )\r\n        }\r\n        \r\n    }\r\n\r\n    finishTest(e) {\r\n        e.preventDefault();\r\n        let points = 0;\r\n        let results = [];\r\n        const { answers, test, isSubmitted } = this.state;\r\n\r\n        if (isSubmitted) \r\n            return;\r\n        \r\n        this.setState({\r\n            ...this.state,\r\n            isSubmitted: true\r\n        })\r\n\r\n        console.log('finish!');\r\n        \r\n\r\n        test.questions.map((ques, index) => {\r\n            if (ques.correctAnswerId === answers[index]) {\r\n                points++;\r\n                results.push(true);\r\n            } else {\r\n                results.push(false);\r\n            }\r\n            return ques;\r\n        })\r\n        const query = {\r\n            \"userId\": this.context.userId,\r\n            \"points\": points,\r\n            \"answers\": results,\r\n            \"title\": test.title,\r\n            \"maxPoints\": test.questions.length,\r\n            \"date\": Date.now(),\r\n            \"answersLetters\": answers\r\n        }\r\n        fetch(`${ this.context.proxy }/api/tests/saveResult/${ test._id }`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(query)\r\n        })\r\n            .then(() => {\r\n                console.log('result saved!');\r\n                window.location.href = `/app/testInfo/${ test._id }`\r\n            })\r\n    }\r\n\r\n    render() {\r\n        const { isLoading, test, answeredQuestions, time, answers } = this.state;\r\n        const { questions } = test;\r\n\r\n        const letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\r\n\r\n        if (isLoading) return (\r\n            <Spinner />\r\n        )\r\n\r\n        return (\r\n            <>\r\n                <div className=\"info-block\">\r\n                    <div>\r\n                        { test.timeLimit && (\r\n                            <span>Time left: { convertTimeShort(time) }</span>\r\n                        ) } \r\n                    </div>\r\n                    <div>\r\n                        Answered questions: { answeredQuestions } / { questions.length }\r\n                    </div>\r\n                </div>\r\n                <form className=\"test-form\" onSubmit={ e => this.finishTest(e) }>\r\n                    <h1 className=\"heading\">\r\n                        Pass test '{ test.title }'\r\n                    </h1>\r\n                    <div className=\"test-questions\">\r\n                        { questions.map((ques, index) => {\r\n                            return (\r\n                                <div className=\"question-container\">\r\n                                    <h3 class=\"question-container__title\">\r\n                                        { index + 1 }.  { ques.title }\r\n                                    </h3>\r\n                                    <div className=\"question-container__answers\">\r\n                                        { ques.answers.map((ans, inx) => {\r\n                                            const uid = `${ ques }-${ inx }`;\r\n                                            let extraClassName = '';\r\n                                            \r\n                                            if (answers[index].toString() === (inx + 1).toString()) \r\n                                                extraClassName = 'selected';\r\n\r\n                                            return (\r\n                                                <div className={ \"answer-block \" + extraClassName } onClick={ this.handleSelect.bind(this, index, ans.answerId) }>\r\n                                                    <div className=\"answer-block__letter\"><span>{ letters[inx] }</span></div>\r\n                                                    <div className=\"answer-block__text\">\r\n                                                        <span>{ ans.text }</span>\r\n                                                    </div>\r\n                                                </div>\r\n                                            )\r\n                                        }) }\r\n                                        \r\n                                    </div>\r\n                                </div>\r\n                            )\r\n\r\n                                {/* <div className=\"question-card\">\r\n                                    <h3 className=\"question-title\">\r\n                                        { index + 1 }.  { ques.title }\r\n                                    </h3>\r\n                                    <div className=\"answers\">\r\n                                        { ques.answers.map(ans => {\r\n                                            return (\r\n                                                <div className=\"answer\">\r\n                                                    <input onChange={ this.handleSelect.bind(this, index, ans.answerId) } id={ ans._id } type=\"radio\" name={ index } />\r\n                                                    <label htmlFor={ ans._id }>{ ans.text }</label>\r\n                                                </div>\r\n                                            )\r\n                                        }) }\r\n                                    </div>\r\n                                </div> */}\r\n                            \r\n                        }) }\r\n                    </div>\r\n                    <input type=\"submit\" className=\"btn btn-cta\" value=\"Finish\" />\r\n                </form>\r\n            </>\r\n        )\r\n    }\r\n}\r\n","const validate = (data) => {\r\n    let errors = [];\r\n    data.forEach(field => {\r\n        if (field.name === 'email') {\r\n            if (!(/^\\w+([-]?\\w+)*@\\w+([-]?\\w+)*(\\.\\w{2,3})+$/.test(field.value)) ) {\r\n                errors['email'] = 'Invalid email'\r\n            } \r\n        } \r\n        if (field.name === 'password') {\r\n            if (field.value.length < 6) {\r\n                errors['password'] = 'Password must be at least 6 characters'\r\n            }\r\n        }\r\n        if (field.name === 'fullName') {\r\n            if (field.value.trim().length <= 5) {\r\n                errors['fullName'] = 'Please enter a real full name'\r\n            }\r\n        }\r\n    })\r\n\r\n    return errors;\r\n}\r\n\r\nexport {\r\n    validate\r\n}","import React, { Component } from 'react'\r\n\r\nimport './css/style.css'\r\n\r\nimport Input from '../reusableComponents/inputField/Input'\r\nimport Spinner from '../Spinner/Spinner'\r\n\r\nimport { validate } from '../../middleware/validator'\r\nimport AuthContext from '../../context/TestsContext'\r\n\r\nexport default class Login extends Component {\r\n    state = {\r\n        email: '',\r\n        password: '',\r\n        errors: [],\r\n        isLoading: false\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.formEl = React.createRef();        \r\n    }\r\n\r\n    static contextType = AuthContext;\r\n\r\n    componentDidMount() {\r\n        // const psw = document.querySelector('#psw');\r\n        // const email = document.querySelector('#email');\r\n        // psw.addEventListener('focus',function(e){ /*yourcode*/ },false);\r\n        // psw.addEventListener('keyup',function(e){ console.log(e.keyCode) },false);\r\n        // email.addEventListener('keypress',function(e){ \r\n        //     if (e.which === 13) {\r\n        //         e.preventDefault();\r\n        //         // let form = document.querySelector('form#login-form');\r\n        //         // form.submit()\r\n        //     }\r\n        //  },false);\r\n        // psw.addEventListener('keypress',function(e){ \r\n        //     if (e.which === 13) {\r\n        //         e.preventDefault();\r\n        //         // let form = document.querySelector('form#login-form');\r\n        //         // form.submit()\r\n        //     }\r\n        //  },false);\r\n    }\r\n\r\n    setCredential(e) {\r\n        console.log(e.target);\r\n        \r\n        this.setState({\r\n            ...this.state,\r\n            [e.target.name]: e.target.value\r\n        }, () => console.log(this.state)\r\n        )\r\n    }\r\n\r\n    setLoading(state) {\r\n        this.setState({\r\n            isLoading: state\r\n        }, () => console.log(this.state))\r\n    }\r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        let data = [\r\n            { name: 'email', value: this.state.email },\r\n            { name: 'password', value: this.state.password }\r\n        ];\r\n        let errors = validate(data);\r\n        console.log(errors['email']);\r\n        \r\n        if (errors['email'] || errors['password']) {\r\n            this.setState({\r\n                ...this.state,\r\n                errors: errors,\r\n                isLoading: false\r\n            })\r\n        } else {\r\n            errors = [];\r\n            const query = {\r\n                email: this.state.email,\r\n                password: this.state.password\r\n            }\r\n            fetch(`${ this.context.proxy }/api/users/login`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(query)\r\n            })\r\n                .then(res => res.json())\r\n                .then(res => {\r\n                    if (res.success) {\r\n                        this.context.setToken(res.token, res.user._id);\r\n                        window.location.href = '/app/'\r\n                    } else {\r\n                        if (res.doesUserExist) \r\n                            errors['password'] = 'Incorrect password';\r\n                        else \r\n                            errors['email'] = 'User does not exist!'\r\n                        this.setState({\r\n                            ...this.state,\r\n                            errors: errors,\r\n                            isLoading: false\r\n                        })\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { errors, isLoading } = this.state;\r\n        console.log(isLoading);\r\n        \r\n\r\n        return (\r\n            <div>\r\n                <h1 className=\"heading\">Log in</h1>\r\n                <form id=\"login-form\" onSubmit={ (e) => this.handleSubmit(e) }>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Email: </label>\r\n                        <Input name=\"email\" type=\"text\" onChange={ (e) => this.setCredential(e) } />\r\n                        <span className=\"error-input\">{ errors['email'] }</span>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Password</label>\r\n                        <Input name=\"password\" type=\"password\" onChange={ (e) => this.setCredential(e) } />\r\n                        <span className=\"error-input\">{ errors['password'] }</span>\r\n                    </div>\r\n                    \r\n                    \r\n                    {/* <div className=\"form-group\">\r\n                        <label htmlFor=\"\">E-mail: </label>\r\n                        <span data-name=\"email\" onInput={ (e) => this.setCredential(e) } className=\"field\" contentEditable=\"true\" id=\"email\"></span>\r\n                        <span className=\"error-input\">{ errors['email'] }</span>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Password: </label>\r\n                        <span data-name=\"password\" onInput={ (e) => this.setCredential(e) } id=\"psw\" className=\"field with-input\" contentEditable=\"true\">\r\n                        </span>\r\n                        <span className=\"error-input\">{ errors['password'] }</span>\r\n                    </div> */}\r\n                    <input onClick={ () => this.setLoading(true) } type=\"submit\" className=\"btn btn-cta\" value=\"Log in\" />\r\n                    { isLoading && <Spinner size=\"sm\" /> }\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nimport './css/style.css'\r\n\r\nimport Spinner from '../Spinner/Spinner'\r\n\r\nimport { validate } from '../../middleware/validator'\r\nimport TestsContext from '../../context/TestsContext'\r\nimport Input from '../reusableComponents/inputField/Input'\r\n\r\nexport default class Register extends Component {\r\n    state = {\r\n        email: '',\r\n        password: '',\r\n        confirmPassword: '',\r\n        name: '',\r\n        errors: [],\r\n        isLoading: false\r\n    }\r\n\r\n    static contextType = TestsContext;\r\n\r\n    setCredential(e) {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n    }\r\n\r\n    setLoading(state) {\r\n        this.setState({\r\n            isLoading: state\r\n        }, () => console.log(this.state))\r\n    }\r\n\r\n    registerUser(e) {\r\n        e.preventDefault();\r\n\r\n        let data = [\r\n            { name: 'email', value: this.state.email },\r\n            { name: 'password', value: this.state.password },\r\n            { name: 'fullName', value: this.state.name }\r\n        ];\r\n        let errors = validate(data);\r\n        if (this.state.password !== this.state.confirmPassword) {\r\n            errors['confirmPassword'] = 'Passwords do not match'\r\n        }\r\n        \r\n        if (errors['email'] || errors['password'] || errors['fullName'] || errors['confirmPassword']) {\r\n            this.setState({\r\n                ...this.state,\r\n                errors: errors,\r\n                isLoading: false\r\n            })\r\n        } else {\r\n            const newUser = {\r\n                email: this.state.email,\r\n                password: this.state.password,\r\n                name: this.state.name\r\n            };\r\n            if (this.state.confirmPassword !== newUser.password) {\r\n                return;\r\n            };\r\n            fetch(`${ this.context.proxy }/api/users/addUser`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(newUser)\r\n            })\r\n                .then(res => res.json())\r\n                .then(res => {\r\n                    console.log(res);\r\n                    \r\n                    if (res.notSuccess) {\r\n                        errors = [];\r\n                        errors['email'] = 'User with such email already exists';\r\n                        this.setState({\r\n                            ...this.state,\r\n                            errors,\r\n                            isLoading: false\r\n                        })\r\n                    } else {\r\n                        this.context.setToken(res.token, res.user._id);\r\n                        window.location.href = '/app/'\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { errors, isLoading } = this.state;\r\n\r\n        return (\r\n            <>\r\n                <h1 className=\"heading\">Register</h1>\r\n                <form onSubmit={ (e) => this.registerUser(e) }>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">E-mail: </label>\r\n                        <Input type=\"text\" name=\"email\" onChange={ (e) => this.setCredential(e) } />\r\n                        <span className=\"error-input\">{ errors['email'] }</span>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Full name: </label>\r\n                        <Input type=\"text\" name=\"name\" onChange={ (e) => this.setCredential(e) } />\r\n                        <span className=\"error-input\">{ errors['name'] }</span>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Password: </label>\r\n                        <Input type=\"password\" name=\"password\" onChange={ (e) => this.setCredential(e) } />\r\n                        <span className=\"error-input\">{ errors['password'] }</span>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Confirm password: </label>\r\n                        <Input type=\"password\" name=\"confirmPassword\" onChange={ (e) => this.setCredential(e) } />\r\n                        <span className=\"error-input\">{ errors['confirmPassword'] }</span>\r\n                    </div>\r\n                    <input onClick={ () => this.setLoading(true) } type=\"submit\" className=\"btn btn-cta\" value=\"Create account\" />\r\n                    { isLoading && <Spinner size=\"sm\" /> }\r\n                </form>\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Switch, Route, BrowserRouter } from 'react-router-dom'\r\n\r\nimport Navbar from './Navbar/Navbar'\r\n\r\nimport Profile from './Profile/Profile'\r\nimport Tests from './Tests/Tests'\r\nimport TestInfo from './Tests/TestInfo'\r\nimport CreateTest from './CreateTest/CreateTest'\r\nimport TestResult from './TestResult/TestResult'\r\nimport CreateTestForm from './CreateTest/CreateTestForm'\r\nimport PassTest from './PassTest/PassTest'\r\nimport Login from './Auth/Login'\r\nimport Register from './Auth/Register'\r\n\r\nimport './css/MainPage.css'\r\nimport './css/GlobalStyles/style.css'\r\n\r\nexport default class MainPage extends Component {    \r\n\r\n    componentDidMount() {\r\n        let mainEl = document.querySelector('main')\r\n        console.log(\"Hello\");\r\n\r\n\r\n        setInterval(() => {\r\n            if (is_scrolling()) {\r\n                if (!mainEl.classList.contains(\"on-scroll-bar\")) {\r\n                    mainEl.classList.add(\"on-scroll-bar\");\r\n                }\r\n                \r\n            } else {\r\n                if (mainEl.classList.contains(\"on-scroll-bar\")) {\r\n                    mainEl.classList.remove(\"on-scroll-bar\");\r\n                }\r\n            }\r\n            \r\n        }, 10)\r\n\r\n        mainEl.addEventListener('scroll', (e) => {\r\n            window.lastScrollTime = new Date().getTime()\r\n        }, false)\r\n\r\n        function is_scrolling() {\r\n            return window.lastScrollTime && new Date().getTime() < window.lastScrollTime + 500\r\n        }\r\n    }\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <BrowserRouter>\r\n\r\n                <div className=\"app-container\">\r\n                    <Navbar />\r\n                    <main>\r\n                        <Switch>\r\n                            <Route exact path='/app/' component={ Profile } /> \r\n                            <Route path='/app/allTests' component={ Tests } /> \r\n                            <Route path='/app/testInfo/:testId' component={ TestInfo } /> \r\n                            <Route path='/app/testResult/:userId/:resultId' component={ TestResult } /> \r\n                            <Route path='/app/createTest' component={ CreateTest } /> \r\n                            <Route path='/app/createTestForm' component={ CreateTestForm } /> \r\n                            <Route path='/app/passTest/:testId' component={ PassTest } /> \r\n                            <Route path='/app/login' component={ Login } /> \r\n                            <Route path='/app/register' component={ Register } /> \r\n                        </Switch>\r\n                    </main>\r\n                </div>\r\n\r\n            </BrowserRouter>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport ls from 'local-storage'\r\n\r\nimport TestsContext from './context/TestsContext'\r\n\r\nimport LandingPage from './landingPage/LandingPage';\r\nimport MainPage from './components/MainPage';\r\n\r\nimport './App.css'\r\n\r\nclass App extends Component {\r\n    state = {\r\n        userId: ls.get('userId'),\r\n        token: ls.get('token'),\r\n        proxy: ''\r\n    }\r\n\r\n    componentWillMount() {\r\n        let proxy = '';\r\n        if (process.env.NODE_ENV === 'production') {\r\n            if (window.location.href.startsWith('https'))\r\n                proxy = 'https://easytestapp.herokuapp.com';\r\n            else if (window.location.href.startsWith('http'))\r\n                proxy = 'http://easytestapp.herokuapp.com';\r\n            else \r\n                proxy = 'easytestapp.herokuapp.com';\r\n        } else \r\n            proxy = 'http://localhost:5000';\r\n        console.log(proxy)\r\n        this.setState({\r\n            ...this.state,\r\n            proxy\r\n        })\r\n    }\r\n    \r\n\r\n    setToken = (token, userId) => {\r\n        this.setState({\r\n            token: token,\r\n            userId: userId\r\n        })\r\n        ls.set('token', token);\r\n        ls.set('userId', userId);\r\n    }\r\n\r\n    logout = () => {\r\n        this.setState({\r\n            token: '',\r\n            userId: ''\r\n        });\r\n        ls.set('token', '');\r\n        ls.set('userId', '');\r\n    }\r\n\r\n    render() {\r\n        const { token, userId, proxy } = this.state;\r\n        console.log(process.env);\r\n        console.log(window.location.href);\r\n        \r\n        \r\n\r\n        return (\r\n            <BrowserRouter basename={ process.env.PUBLIC_URL }>\r\n                <React.Fragment>\r\n                    <TestsContext.Provider value={{ token, userId, setToken: this.setToken, logout: this.logout, proxy  }}>\r\n                        <Switch>\r\n                            <Route exact path=\"/\" component={ LandingPage } />\r\n                            <Route path=\"/app\" component={ MainPage } />\r\n                        </Switch>\r\n                    </TestsContext.Provider>\r\n                </React.Fragment>\r\n            </BrowserRouter>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}