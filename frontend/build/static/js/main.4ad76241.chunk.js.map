{"version":3,"sources":["context/TestsContext.js","components/Spinner/Spinner.js","middleware/dateFormat.js","components/reusableComponents/PointsCard.js","middleware/authMiddleware.js","landingPage/img/logo1.svg","landingPage/img/logo-light1.svg","landingPage/img/hero.svg","components/Navbar/img/logo.svg","landingPage/LandingPage.js","components/Navbar/Navbar.js","components/Profile/Profile.js","components/Tests/Tests.js","components/Tests/TestInfo.js","middleware/convertTime.js","components/CreateTest/CreateTest.js","components/TestResult/TestResult.js","components/CreateTest/CreateTestForm.js","components/PassTest/PassTest.js","middleware/validator.js","components/Auth/Login.js","components/Auth/Register.js","components/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["React","createContext","tests","title","Spinner","size","console","log","extraClassName","className","formatDate","date1","date","Date","day","getDate","monthIndex","getMonth","year","getFullYear","PointsCard","this","props","points","maxPoints","result","Component","getHeaders","ls","get","module","exports","LandingPage","src","Logo","alt","LogoLight","to","Hero","Navbar","state","isLoggedIn","context","logout","window","location","href","token","exact","icon","faHome","faAlignLeft","faPenAlt","faSignInAlt","faUserPlus","onClick","bind","faSignOutAlt","contextType","TestsContext","TestsContainer","lazy","Profile","user","passedTests","avgResult","isLoading","nextLinkVal","fetch","proxy","headers","then","res","json","isTokenError","reverse","forEach","test","length","Math","floor","setState","urlToFetch","_id","name","fallback","type","Tests","isRedirectToLogin","left","right","isMoreTests","linkToFetch","TestInfo","testResults","usernames","errors","testId","match","params","field","document","querySelector","addEventListener","e","which","preventDefault","sort","res1","res2","currentAccessKey","target","innerText","maxAttempts","usedAttemtps","userId","accessKey","isProtected","timeLimit","attemtpsLeft","faArrowLeft","description","htmlFor","id","contenteditable","onInput","setAccessKey","seconds","hrs","mins","secs","toString","convertTime","goToTest","map","key","username","answers","CreateTest","createdTests","linkToTest","class","subject","faThumbsUp","faUser","results","createdAt","TestResult","resultId","questions","ans","inx","isCorrect","correctAnswerId","parseInt","faCheckCircle","faTimesCircle","question","text","CreateTestForm","answerId","creator","timeErrorMsg","isLimitedAttempts","isLimitedTime","x","i","selElmnt","a","b","c","getElementsByClassName","timeValues","setst","j","getElementsByTagName","createElement","setAttribute","innerHTML","options","selectedIndex","appendChild","y","k","s","h","parentNode","previousSibling","removeAttribute","click","stopPropagation","closeAllSelect","nextSibling","classList","toggle","elmnt","arrNo","push","remove","indexOf","add","quesId","len","index","value","min","max","quesIndex","ansId","newTest","ques","method","body","JSON","stringify","success","isTimeErr","getElementById","splice","letters","setTestTitle","setTestSubject","onChange","setTestDescription","cols","rows","setProtectedState","setAttemptsState","changeAttemptsNumber","setTimeLimitState","style","width","visibility","deleteQuestion","setQuestionTitle","deleteAnswer","setCorrectAnswerId","checked","setAnswerText","handleAddAnswer","handleAddQuestion","handleAddTest","PassTest","answeredQuestions","isSubmitted","isTimeUp","time","setInterval","querySelectorAll","el","query","now","toISOString","substr","onSubmit","finishTest","handleSelect","validate","data","trim","Login","email","password","formEl","createRef","psw","keyCode","getAttribute","setToken","doesUserExist","handleSubmit","data-name","setCredential","contentEditable","setLoading","AuthContext","Register","confirmPassword","psw1","newUser","notSuccess","registerUser","MainPage","mainEl","lastScrollTime","getTime","contains","path","component","App","startsWith","set","process","basename","Fragment","Provider","Boolean","hostname","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4ad76241.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default React.createContext({\r\n    tests: [{ title: 'hello' }]\r\n})\r\n","import React from 'react'\r\n\r\nimport './Spinner.css'\r\n\r\nconst Spinner = ({ size }) => {\r\n    console.log(size);\r\n    const extraClassName = size === \"sm\" ? \"small\" : \"\";\r\n\r\n    return (\r\n        <div className={ \"loader-wrapper \" + extraClassName }>\r\n            <div className={ \"loader \" + extraClassName }></div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Spinner","const formatDate = date1 => {\r\n    let date = new Date(date1);\r\n    let monthNames = [\r\n        'January',\r\n        'February',\r\n        'March',\r\n        'April',\r\n        'May',\r\n        'June',\r\n        'July',\r\n        'August',\r\n        'September',\r\n        'October',\r\n        'November',\r\n        'December'\r\n    ];\r\n\r\n    let day = date.getDate();\r\n    let monthIndex = date.getMonth();\r\n    let year = date.getFullYear();\r\n\r\n    return day + ' ' + monthNames[monthIndex] + ', ' + year;\r\n};\r\n\r\nexport {\r\n    formatDate\r\n}","import React, { Component } from 'react'\r\n\r\nimport './css/style.css'\r\n\r\nexport default class PointsCard extends Component {\r\n    render() {\r\n        const { points, maxPoints } = this.props;\r\n\r\n        let result = points / maxPoints;\r\n        let extraClassName = '';\r\n\r\n        if (result >= .85)\r\n            extraClassName = 'excellent';\r\n        else if (result >= .65)\r\n            extraClassName = 'good';\r\n        else if (result >= .40)\r\n            extraClassName = 'satisfactory';\r\n        else extraClassName = 'bad';\r\n\r\n        return (\r\n            <span className={ `points-card ${ extraClassName }` }>\r\n                { points }<span className=\"divider\">/</span>{ maxPoints }\r\n            </span>\r\n        )\r\n    }\r\n}\r\n","import ls from 'local-storage'\r\n\r\nconst getHeaders = () => {\r\n    return {\r\n        'x-auth-token': ls.get('token')\r\n    }\r\n}\r\n\r\nexport {\r\n    getHeaders\r\n}","module.exports = __webpack_public_path__ + \"static/media/logo1.2ad03ba9.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo-light1.dc46d8b1.svg\";","module.exports = __webpack_public_path__ + \"static/media/hero.de877d3a.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.dc46d8b1.svg\";","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport Logo from './img/logo1.svg'\r\nimport LogoLight from './img/logo-light1.svg'\r\nimport Hero from './img/hero.svg'\r\n\r\nimport './css/style.css'\r\n\r\nexport default class LandingPage extends Component {\r\n    render() {\r\n        return (\r\n            <header>\r\n                {/* <div className=\"bg-circle-lg bg-circle\"></div> */}\r\n                <div className=\"bg-circle-md bg-circle\"></div>\r\n                <div className=\"bg-circle-dm bg-circle\"></div>\r\n                <div className=\"nav\">\r\n                    <div className=\"nav-left\">\r\n                        <img className=\"light\" src={ Logo } alt=\"\" />\r\n                        <img className=\"dark\" src={ LogoLight } alt=\"\" />\r\n                        <h1>EasyTest</h1>\r\n                    </div>\r\n                </div>\r\n                <div className=\"hero\">\r\n                    <div className=\"hero-left\">\r\n                        <h1>Get your experience in online testing to a whole new level!</h1>\r\n                        <Link className=\"cta\" to=\"/app/\">Try it out!</Link>\r\n                    </div>\r\n                    <div className=\"hero-right\">\r\n                        <img src={ Hero } alt=\"\" />\r\n                    </div>\r\n                </div>\r\n                <div className=\"copyright\">\r\n                    &copy; 2020 Yegor Trussov\r\n                </div>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { NavLink, Link } from 'react-router-dom'\r\nimport ls from 'local-storage'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faHome, faAlignLeft, faPenAlt, faSignInAlt, faSignOutAlt, faUserPlus } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport Logo from './img/logo.svg'\r\n\r\nimport TestsContext from '../../context/TestsContext'\r\n\r\nclass Navbar extends Component {\r\n    state = {\r\n        isLoggedIn: false\r\n    }\r\n\r\n    static contextType = TestsContext;\r\n\r\n    logout() {\r\n        this.context.logout();\r\n        window.location.href = process.env.PUBLIC_URL + '/app/login'\r\n    }\r\n\r\n    render() {\r\n        const token = ls.get('token');\r\n        console.log(token);\r\n        \r\n        let isLoggedIn = token !== '';\r\n\r\n        return (\r\n            <nav>\r\n                <div className=\"nav-item nav-top\">\r\n                    <Link exact to=\"/\">\r\n                        <h2 className=\"logo\"><img src={ Logo } alt=\"\"/> <span className=\"text\">EasyTest</span></h2>\r\n                    </Link>\r\n                </div>\r\n                { \r\n                    isLoggedIn && (\r\n                        <div className=\"nav-item nav-middle\">\r\n                            <NavLink exact className=\"nav-link\" to={\"/app/\"}><FontAwesomeIcon className=\"icon\" icon={ faHome } /> <span className=\"text\">Home</span></NavLink>\r\n                            <NavLink className=\"nav-link\" to={\"/app/allTests\"}><FontAwesomeIcon className=\"icon\" icon={ faAlignLeft } /><span className=\"text\"> Tests</span></NavLink>\r\n                            <NavLink className=\"nav-link\" to={\"/app/createTest\"}><FontAwesomeIcon className=\"icon\" icon={ faPenAlt } /> <span className=\"text\">Create Test</span></NavLink>\r\n                        </div>\r\n                    )\r\n                }\r\n                \r\n                <div className=\"nav-item nav-bottom\">\r\n                    { !isLoggedIn && (\r\n                        <>\r\n                            <NavLink className=\"nav-link\" to={\"/app/login\"}><FontAwesomeIcon className=\"icon\" icon={ faSignInAlt } /> <span className=\"text\">Login</span></NavLink>\r\n                            <NavLink className=\"nav-link\" to={\"/app/register\"}><FontAwesomeIcon className=\"icon\" icon={ faUserPlus } /> <span className=\"text\">Register</span></NavLink>\r\n                        </>\r\n                    ) }\r\n                    { isLoggedIn && (\r\n                        <button className=\"nav-link\" onClick={ this.logout.bind(this) } ><FontAwesomeIcon className=\"icon\" icon={ faSignOutAlt } /> <span className=\"text\">Logout</span></button>\r\n                    ) }                    \r\n                </div>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar","import React, { Component, Suspense } from 'react'\r\nimport Spinner from '../Spinner/Spinner'\r\nimport { getHeaders } from '../../middleware/authMiddleware'\r\nimport { formatDate } from '../../middleware/dateFormat'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport PointsCard from '../reusableComponents/PointsCard'\r\n\r\nimport TestsContext from '../../context/TestsContext'\r\n\r\nimport './css/style.css'\r\n\r\nconst TestsContainer = React.lazy(() => import('../reusableComponents/tests/TestsContainer'))\r\n\r\nexport default class Profile extends Component {\r\n    state = {\r\n        user: null,\r\n        passedTests: [],\r\n        avgResult: null,\r\n        isLoading: true,\r\n        nextLinkVal: null\r\n    }\r\n\r\n    static contextType = TestsContext;\r\n\r\n    componentDidMount() {\r\n        fetch(`${ this.context.proxy }/api/users/user`, {\r\n            headers: getHeaders()\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                if (res.isTokenError) {\r\n                    this.context.logout();\r\n                    window.location.href = '/app/login';\r\n                }\r\n                console.log(res.passedTests);\r\n                \r\n                res.passedTests.reverse();\r\n\r\n                let avgResult = 0;\r\n                res.passedTests.forEach(test => {\r\n                    avgResult += test.points / test.maxPoints;\r\n                    console.log(avgResult)\r\n                })\r\n                avgResult /= res.passedTests.length;\r\n                avgResult = Math.floor(avgResult * 100);\r\n\r\n                this.setState({\r\n                    user: res,\r\n                    avgResult,\r\n                    isLoading: false,\r\n                })\r\n            })\r\n    }\r\n\r\n    render() {\r\n        const { user, isLoading, avgResult } = this.state;\r\n\r\n        console.log(user)\r\n\r\n        let tempTests = [];\r\n\r\n        if (isLoading || !user) return (\r\n            <Spinner />\r\n        )\r\n\r\n        const urlToFetch = `${ this.context.proxy }/api/tests/passedTests/${ user._id }`;\r\n\r\n        return (\r\n            <div>\r\n                <h1 className=\"heading\">\r\n                    Hello, { user.name }!\r\n                </h1>\r\n                <div className=\"profile-block\">\r\n                    <div className=\"profile-img\">\r\n                        <img src=\"/img/profile-img.svg\" alt=\"\"/>\r\n                    </div>\r\n                    <div className=\"profile-info\">\r\n                        <div className=\"profile-info__block\">\r\n                            <span className=\"info-text\">Name: { user.name }</span>\r\n                        </div>\r\n                        <div className=\"profile-info__block\">\r\n                            <span className=\"info-text\">Tests passed: { user.passedTests.length }</span>\r\n                        </div>\r\n                        <div className=\"profile-info__block\">\r\n                            <span className=\"info-text\">Average result: { avgResult }%</span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                { user.passedTests.length > 0 ? ( <h2>Your recent tests: </h2> ) : ( <h2>You haven't passed any tests yet!</h2> ) }\r\n                { <Suspense fallback={ <Spinner /> }>\r\n                    <TestsContainer type=\"result\" urlToFetch={ urlToFetch } user={ user } />\r\n                </Suspense> }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component, Suspense } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nimport TestsContext from '../../context/TestsContext'\r\nimport Spinner from '../Spinner/Spinner'\r\n\r\nimport './css/style.css'\r\n\r\nconst TestsContainer = React.lazy(() => import('../reusableComponents/tests/TestsContainer'))\r\n\r\nexport default class Tests extends Component {\r\n    state = {\r\n        isLoading: false,\r\n        tests: [],\r\n        isRedirectToLogin: false,\r\n        left: 0,\r\n        right: 3,\r\n        isMoreTests: true\r\n    }\r\n\r\n    static contextType = TestsContext;    \r\n\r\n    render() {\r\n        const { isLoading, tests, isRedirectToLogin, isMoreTests } = this.state;\r\n\r\n        let tempTests = [];\r\n        console.log(isMoreTests)\r\n\r\n        const linkToFetch = `${ this.context.proxy }/api/tests/allTests`;\r\n\r\n        if (isRedirectToLogin) return (\r\n            <Redirect to=\"/app/login\" />\r\n        )\r\n\r\n        if (isLoading) return (\r\n            <Spinner />\r\n        )\r\n\r\n        return (\r\n            <>\r\n                <h1 className=\"heading\">Available tests: </h1>\r\n                <Suspense fallback={ <Spinner /> }>\r\n                    <TestsContainer \r\n                        urlToFetch={ linkToFetch }\r\n                        type={ \"full\" } />\r\n                </Suspense>\r\n                \r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nimport Spinner from '../Spinner/Spinner'\r\n\r\nimport PointsCard from '../reusableComponents/PointsCard'\r\n\r\nimport { convertTime } from '../../middleware/convertTime'\r\n\r\nimport './css/style.css'\r\n\r\nimport TestsContext from '../../context/TestsContext'\r\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport default class TestInfo extends Component {\r\n    state = {\r\n        isLoading: true,\r\n        test: null,\r\n        testResults: null,\r\n        usernames: null,\r\n        errors: []\r\n    };\r\n\r\n    static contextType = TestsContext;\r\n\r\n    componentDidMount() {\r\n        const testId = this.props.match.params.testId;\r\n\r\n        let field = document.querySelector('span.field');\r\n        console.log(field);\r\n        \r\n        if (field !== null && field) field.addEventListener('keypress',function(e){ \r\n            if (e.which === 13) {\r\n                e.preventDefault();\r\n            }\r\n        });\r\n        \r\n        fetch(`${ this.context.proxy }/api/tests/testInfo/${ testId }`)\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                this.setState({\r\n                    isLoading: false,\r\n                    test: res\r\n                })\r\n            })\r\n        fetch(`${ this.context.proxy }/api/tests/testResults/${ testId }`)\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                res.testResults.sort((res1, res2) => {\r\n                    return res2.points - res1.points;\r\n                })\r\n                this.setState({\r\n                    isLoading: false,\r\n                    testResults: res.testResults,\r\n                    usernames: res.usernames\r\n                })\r\n            })\r\n    }\r\n\r\n    setAccessKey(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            currentAccessKey: e.target.innerText\r\n        })\r\n    }\r\n\r\n    goToTest() {\r\n        const { test, errors, testResults } = this.state;\r\n        const { maxAttempts } = test;\r\n        let usedAttemtps = 0;\r\n        testResults.forEach(res => {\r\n            if (res.userId === this.context.userId) \r\n                usedAttemtps++;\r\n        })\r\n        console.log(usedAttemtps, maxAttempts);\r\n        \r\n        if (maxAttempts && usedAttemtps >= maxAttempts) {\r\n            errors['attempts'] = 'You have not got any attempts left!';\r\n            this.setState({\r\n                ...this.state,\r\n                errors\r\n            })\r\n        } else {\r\n            const { currentAccessKey } = this.state;\r\n            const { accessKey, _id, isProtected } = test;\r\n            if (accessKey === currentAccessKey || !isProtected) {\r\n                window.location.href = `/app/passTest/${ _id }`\r\n            } else {\r\n                let { errors } = this.state;\r\n                errors['keyError'] = 'Incorrect access key!';\r\n                this.setState({\r\n                    ...this.state,\r\n                    errors\r\n                })\r\n            }\r\n        }\r\n        \r\n        \r\n    }   \r\n    \r\n    componentDidUpdate() {\r\n        let field = document.querySelector('span.field');\r\n        console.log(field);\r\n        \r\n        if (field && field !== null) field.addEventListener('keypress',function(e){ \r\n            if (e.which === 13) {\r\n                e.preventDefault();\r\n            }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { isLoading, test, testResults, errors } = this.state;\r\n        \r\n        if (isLoading || test === null) return (\r\n            <Spinner />\r\n        )\r\n\r\n        const { maxAttempts, timeLimit } = test;\r\n        let usedAttemtps = 0;\r\n        if (testResults) testResults.forEach(res => {\r\n            if (res.userId === this.context.userId) \r\n                usedAttemtps++;\r\n        })\r\n        const attemtpsLeft = maxAttempts - usedAttemtps;\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"page-top\">\r\n                    <Link to=\"/app/allTests\">\r\n                        <FontAwesomeIcon icon={ faArrowLeft } /> Back \r\n                    </Link>\r\n                </div>\r\n                <h1>{ test.title }</h1>\r\n                <p>{ test.description }</p>\r\n                { test.isProtected && (\r\n                    //return (\r\n                        <>\r\n                            <br/>\r\n                            <label htmlFor=\"title\">To start the test, you need to type in the secret key!</label> <br/>\r\n                            <span id=\"field\" className=\"field\" contenteditable=\"true\" onInput={ (e) => this.setAccessKey(e) } type=\"text\" name=\"title\"></span>\r\n                            <span className=\"error-input\">{ errors['keyError'] }</span>\r\n                        </>\r\n                    //)\r\n                    \r\n                 ) }\r\n                 { maxAttempts && (\r\n                    <div className=\"attempts-block\">\r\n                        <span className=\"max-attemtts\">Attempts left: { attemtpsLeft }</span>\r\n                    </div>\r\n                 ) }\r\n                 { timeLimit && (\r\n                    <div className=\"attempts-block\">\r\n                        <span className=\"max-attemtts\">Time limit: { convertTime(timeLimit) }</span>\r\n                    </div>\r\n                 ) }\r\n                <br/>\r\n                {/* <Link class=\"btn btn-cta\" to={ `/app/passTest/${ test._id }` }>\r\n                    Pass test!\r\n                </Link> */}\r\n                <div className=\"btn-block\">\r\n                    <span className=\"error-input\">{ errors['attempts'] }</span>\r\n                    <button onClick={ () => this.goToTest() } className=\"btn btn-cta\">Pass test!</button>\r\n                </div>\r\n                \r\n                <div className=\"results\">\r\n                    <h3>Results: </h3>\r\n                    <table>\r\n                        <col className=\"username\" />\r\n                        <col className=\"points\" />\r\n                        <tr>\r\n                            <th>User</th>\r\n                            <th className=\"points\">Points</th>\r\n                        </tr>\r\n                        { testResults === null ? () => {\r\n                            return (\r\n                                <Spinner />\r\n                            )\r\n                        } : testResults.map(res => {                            \r\n                            return (\r\n                                <tr className='resultTr' key={ res.userId + res.points }>\r\n                                    <td>{ res.username }</td>\r\n                                    <td className=\"points\">\r\n                                        <PointsCard points={ res.points } maxPoints={ res.answers.length } />\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        }) }\r\n                    </table>\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","export const convertTimeShort = seconds => {\r\n    return new Date(seconds * 1000).toISOString().substr(11, 8);\r\n};\r\n\r\nexport const convertTime = seconds => {\r\n    const hrs = Math.floor(seconds / 3600);\r\n    const mins = Math.floor((seconds - hrs * 3600) / 60);\r\n    const secs = seconds - hrs * 3600 - mins * 60;\r\n\r\n    let result = '';\r\n    if (hrs) \r\n        result += hrs.toString() + ` hour${ hrs !== 1 ? 's' : '' } `;\r\n    if (mins)\r\n        result += mins.toString() + ` minute${ mins !== 1 ? 's' : '' } `;\r\n    if (secs) \r\n        result += secs.toString() + ` second${ secs !== 1 ? 's' : '' } `;\r\n    \r\n    return result;\r\n};\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport TestsContext from '../../context/TestsContext'\r\nimport Spinner from '../Spinner/Spinner';\r\n\r\nimport { formatDate } from '../../middleware/dateFormat'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faUser, faThumbsUp } from '@fortawesome/free-regular-svg-icons'\r\n\r\nexport default class CreateTest extends Component {\r\n    state = {\r\n        createdTests: [],\r\n        isLoading: true\r\n    }\r\n\r\n    static contextType = TestsContext;\r\n\r\n    componentDidMount() {\r\n        if (!this.context.userId) \r\n            window.location.href = '/app/login';\r\n        fetch(`${ this.context.proxy }/api/tests/createdTests/${ this.context.userId }`)\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                \r\n                this.setState({\r\n                    createdTests: res,\r\n                    isLoading: false\r\n                })\r\n            })\r\n    }\r\n    \r\n    render() {\r\n        const { createdTests, isLoading } = this.state;\r\n\r\n        if (isLoading) return (\r\n            <Spinner />\r\n        )\r\n\r\n        return (\r\n            <div>\r\n                <h1 className=\"heading\">\r\n                    Currently, you have { createdTests.length } created tests\r\n                </h1>\r\n                <Link to=\"/app/createTestForm\" className=\"btn btn-cta\">\r\n                    New test\r\n                </Link>\r\n                <div className=\"tests-container\">\r\n                    { createdTests.map(test => {\r\n                        const linkToTest = `/app/testInfo/${ test._id }`\r\n\r\n                        return (\r\n                            <Link to={ linkToTest }>\r\n                                <div class=\"test-card\">\r\n                                    <h3 class=\"test-card__title\">\r\n                                        { test.title }\r\n                                    </h3>\r\n                                    <h4 class=\"test-card__subject\">\r\n                                        { test.subject }\r\n                                    </h4>\r\n                                    <div class=\"test-card__btns\">\r\n                                        <div class=\"btns-btn left\"> <FontAwesomeIcon className=\"icon\" icon={ faThumbsUp } /> <span>0</span> </div>\r\n                                        <div class=\"btns-btn right\"><FontAwesomeIcon className=\"icon\" icon={ faUser } /> <span>{ test.results.length }</span> </div>\r\n                                    </div>\r\n                                    <h4 class=\"test-card__date\">\r\n                                        { formatDate(test.createdAt) }\r\n                                    </h4>\r\n                                </div>\r\n                            </Link>\r\n                        )\r\n                    }) }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport Spinner from '../Spinner/Spinner'\r\n\r\nimport './css/style.css'\r\n\r\nimport TestsContext from '../../context/TestsContext'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCheckCircle, faTimesCircle } from '@fortawesome/free-regular-svg-icons'\r\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport default class TestResult extends Component {\r\n    state = {\r\n        isLoading: true,\r\n        test: null,\r\n        answers: null\r\n    }\r\n\r\n    static contextType = TestsContext;\r\n\r\n    componentDidMount() {\r\n        const userId = this.props.match.params.userId;\r\n        const resultId = this.props.match.params.resultId;\r\n        \r\n        fetch(`${ this.context.proxy }/api/tests/testResult/${ userId }/${ resultId }`)\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                \r\n                this.setState({\r\n                    isLoading: false,\r\n                    answers: res.answers,\r\n                    test: res.test\r\n                })\r\n            })\r\n    }\r\n    \r\n\r\n    render() {\r\n        const { isLoading, test, answers } = this.state;\r\n        if (test) console.log(test.questions[0]);\r\n        console.log(answers);\r\n        \r\n        \r\n\r\n        if (isLoading) return (\r\n            <Spinner />\r\n        )\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"page-top\">\r\n                    <Link to=\"/app/\">\r\n                        <FontAwesomeIcon className=\"icon\" icon={ faArrowLeft } /> Back\r\n                    </Link>\r\n                </div>\r\n                <h1 className=\"heading\">\r\n                    Test result for \"{ test.title }\"\r\n                </h1>\r\n                <div className=\"result-table\">\r\n                    <table>\r\n                        <col className=\"main\" />\r\n                        { answers.map(ans => {\r\n                            return (\r\n                                <col className=\"answer\" />\r\n                            )\r\n                        }) }\r\n                        <tr className=\"first\">\r\n                            <th className=\"first main\">Question No.</th>\r\n                            { answers.map((ans, inx) => {\r\n                                return (\r\n                                    <th className=\"first ans\">{ inx + 1 }</th>\r\n                                )\r\n                            }) }\r\n                        </tr>\r\n                        <tr>\r\n                            <th className=\"main\">Result: </th>\r\n                            { answers.map((ans, inx) => {\r\n                                let extraClassName = '';\r\n                                console.log(toString(ans));\r\n                                \r\n                                let isCorrect = ans.toString() === test.questions[inx].correctAnswerId;\r\n                                \r\n                                if (parseInt(ans) === parseInt(test.questions[inx].correctAnswerId)) \r\n                                    extraClassName = 'correct';\r\n                                else \r\n                                    extraClassName = 'wrong'\r\n                                return (\r\n                                    <th className={ `answerr ans ${ extraClassName }` }>{ isCorrect ? (<FontAwesomeIcon className=\"icon\" icon={ faCheckCircle } /> ) : (<FontAwesomeIcon className=\"icon\" icon={ faTimesCircle } />) }</th>\r\n                                )\r\n                            }) }\r\n                        </tr>\r\n                    </table>\r\n                </div>\r\n                { answers.map((ans, inx) => {\r\n                    let isCorrect = ans.toString() === test.questions[inx].correctAnswerId;\r\n                    console.log(test.questions);\r\n                    \r\n                    let extraClassName = '';\r\n                    if (!isCorrect) extraClassName = 'wrong';\r\n                    let question = test.questions[inx];\r\n                    console.log(question.answers[parseInt(question.correctAnswerId)]);\r\n                    \r\n                    return (\r\n                        <div className=\"question-ans\">\r\n                            <h3>{ inx + 1 }. { question.title }</h3>\r\n                            { ans ===  0 ? (\r\n                                <span className={ \"ans-text \" + extraClassName}>\r\n                                    Your answer: -\r\n                                </span>\r\n                            ) : (\r\n                                <span className={ \"ans-text \" + extraClassName}>\r\n                                    Your answer: { ans }) { question.answers[ans - 1].text }\r\n                                </span>\r\n                            ) } \r\n                            <span className=\"ans-text\">\r\n                                Correct answer: { question.correctAnswerId }) { question.answers[parseInt(question.correctAnswerId) - 1].text }\r\n                            </span>                           \r\n                        </div>\r\n                    )\r\n                }) }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nimport Spinner from '../Spinner/Spinner'\r\n\r\nimport TestsContext from '../../context/TestsContext'\r\n\r\nimport './css/style.css'\r\n\r\nexport default class CreateTestForm extends Component {\r\n    state = {\r\n        questions: [{\r\n            title: '',\r\n            answers: [{\r\n                text: '',\r\n                answerId: '1'\r\n            }, {\r\n                text: '',\r\n                answerId: '2'\r\n            }],\r\n            correctAnswerId: '1'\r\n        }],\r\n        title: '',\r\n        description: '',\r\n        subject: '',\r\n        isProtected: false,\r\n        accessKey: '',\r\n        creator: this.context.userId,\r\n        timeErrorMsg: '',\r\n        isLoading: false,\r\n        errors: [],\r\n        maxAttempts: null,\r\n        isLimitedAttempts: false,\r\n        isLimitedTime: false,\r\n        timeLimit: null\r\n    }\r\n\r\n    static contextType = TestsContext;\r\n\r\n    componentDidMount() {\r\n                \r\n        var x, i, selElmnt, a, b, c;\r\n        /* Look for any elements with the class \"custom-select\": */\r\n        x = document.getElementsByClassName('custom-select');\r\n        console.log(x);\r\n\r\n        let timeValues = [5 * 60, 10 * 60, 20 * 60, 30 * 60, 1 * 60 * 60, 1.5 * 60 * 60];\r\n\r\n        const setst = (j) => {\r\n            console.log(\"hhhh\");\r\n            \r\n            this.setState({\r\n                ...this.state,\r\n                timeLimit: timeValues[j - 1]\r\n            }, () => console.log(this.state))\r\n        }\r\n\r\n        for (i = 0; i < x.length; i++) {\r\n            selElmnt = x[i].getElementsByTagName('select')[0];\r\n            /* For each element, create a new DIV that will act as the selected item: */\r\n            a = document.createElement('DIV');\r\n            a.setAttribute('class', 'select-selected');\r\n            a.innerHTML = selElmnt.options[selElmnt.selectedIndex].innerHTML;\r\n            x[i].appendChild(a);\r\n            /* For each element, create a new DIV that will contain the option list: */\r\n            b = document.createElement('DIV');\r\n            b.setAttribute('class', 'select-items select-hide');\r\n            for (let j = 1; j < selElmnt.length; j++) {\r\n                /* For each option in the original select element,\r\n            create a new DIV that will act as an option item: */\r\n                c = document.createElement('DIV');\r\n                c.innerHTML = selElmnt.options[j].innerHTML;\r\n                console.log(selElmnt);\r\n                \r\n                c.addEventListener('click', function(e) {\r\n                    /* When an item is clicked, update the original select box,\r\n                and the selected item: */\r\n                    \r\n                    var y, i, k, s, h;\r\n                    s = this.parentNode.parentNode.getElementsByTagName('select')[0];\r\n                    h = this.parentNode.previousSibling;\r\n                    console.log(timeValues[j - 1]);\r\n                    // this.setState({\r\n                    //     ...this.state,\r\n                    //     timeLimit: timeValues[j - 1]\r\n                    // })\r\n                    \r\n                    \r\n                    for (i = 0; i < s.length; i++) {\r\n                        if (s.options[i].innerHTML === this.innerHTML) {\r\n                            s.selectedIndex = i;\r\n\r\n                            h.innerHTML = this.innerHTML;\r\n                            y = this.parentNode.getElementsByClassName(\r\n                                'same-as-selected'\r\n                            );\r\n                            for (k = 0; k < y.length; k++) {\r\n                                y[k].removeAttribute('class');\r\n                            }\r\n                            this.setAttribute('class', 'same-as-selected');\r\n                            break;\r\n                        }\r\n                    }\r\n                    h.click();\r\n\r\n                    setst(j);\r\n                });\r\n                b.appendChild(c);\r\n            }\r\n            x[i].appendChild(b);\r\n            a.addEventListener('click', function(e) {\r\n                /* When the select box is clicked, close any other select boxes,\r\n            and open/close the current select box: */\r\n                e.stopPropagation();\r\n                closeAllSelect(this);\r\n                this.nextSibling.classList.toggle('select-hide');\r\n                this.classList.toggle('select-arrow-active');\r\n            });\r\n        }\r\n\r\n        function closeAllSelect(elmnt) {\r\n            /* A function that will close all select boxes in the document,\r\n        except the current select box: */\r\n            var x,\r\n                y,\r\n                i,\r\n                arrNo = [];\r\n            x = document.getElementsByClassName('select-items');\r\n            y = document.getElementsByClassName('select-selected');\r\n            for (i = 0; i < y.length; i++) {\r\n                if (elmnt === y[i]) {\r\n                    arrNo.push(i);\r\n                } else {\r\n                    y[i].classList.remove('select-arrow-active');\r\n                }\r\n            }\r\n            for (i = 0; i < x.length; i++) {\r\n                if (arrNo.indexOf(i)) {\r\n                    x[i].classList.add('select-hide');\r\n                }\r\n            }\r\n        }\r\n\r\n        document.addEventListener('click', closeAllSelect);\r\n\r\n    }\r\n    \r\n\r\n    handleAddAnswer(quesId) {\r\n        const { questions } = this.state;        \r\n        let len = questions[quesId].answers.length;\r\n        console.log(len.toString());\r\n        \r\n        if (questions[quesId].answers.length === 6) return;\r\n        questions[quesId].answers.push({\r\n            text: '',\r\n            answerId: (len + 1).toString()\r\n        })\r\n        console.log(questions[quesId].answers);\r\n        \r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        })\r\n    }\r\n\r\n    handleAddQuestion() {\r\n        const { questions } = this.state;\r\n        if (questions.length === 20) return;\r\n        questions.push({\r\n            title: '',\r\n            answers: [{\r\n                text: '',\r\n                answerId: '1'\r\n            }, {\r\n                text: '',\r\n                answerId: '2'\r\n            }],\r\n            correctAnswerId: '1'\r\n        }) \r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        })\r\n    }\r\n\r\n    setQuestionTitle(e, index) {\r\n        let { questions } = this.state;\r\n        questions[index].title = e.target.innerText;\r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        });\r\n    }\r\n\r\n    setAnswerText(e, index, inx) {\r\n        console.log(e.target.innerText);\r\n        \r\n        let { questions } = this.state;\r\n        console.log(questions[index].answers, inx);\r\n        questions[index].answers[inx].text = e.target.innerText;\r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        })\r\n    }\r\n\r\n    setTestTitle(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            title: e.target.innerText\r\n        })\r\n    }\r\n\r\n    setTestDescription(e) {        \r\n        this.setState({\r\n            ...this.state,\r\n            description: e.target.value\r\n        })\r\n    }\r\n\r\n    setTestSubject(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            subject: e.target.innerText\r\n        }, () => console.log(this.state.subject))\r\n    }\r\n\r\n    setProtectedState(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            isProtected: !this.state.isProtected,\r\n            accessKey: ''\r\n        })\r\n    }\r\n\r\n    setAttemptsState(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            isLimitedAttempts: !this.state.isLimitedAttempts,\r\n            maxAttempts: 1\r\n        })\r\n    }\r\n\r\n    setTimeLimitState(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            isLimitedTime: !this.state.isLimitedTime,\r\n            timeLimit: null\r\n        })\r\n    }\r\n\r\n    setAccessKey(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            accessKey: e.target.innerText\r\n        })\r\n    }\r\n\r\n    setAttemptsNumber(e) {\r\n        this.setState({\r\n            ...this.state,\r\n            maxAttempts: parseInt(e.target.value)\r\n        })\r\n        console.log(this.state);\r\n        \r\n    }\r\n\r\n    changeAttemptsNumber(value) {\r\n        let { maxAttempts } = this.state;\r\n\r\n        if (value > 0) \r\n            maxAttempts = Math.min(maxAttempts + value, 10);\r\n        else \r\n            maxAttempts = Math.max(maxAttempts + value, 1);\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            maxAttempts\r\n        })\r\n    }\r\n\r\n    setCorrectAnswerId(quesIndex, ansId) {\r\n        let { questions } = this.state;\r\n        questions[quesIndex].correctAnswerId = ansId;\r\n        console.log(ansId);\r\n        \r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        })\r\n    }\r\n\r\n    handleAddTest() {\r\n        this.setState({\r\n            ...this.state,\r\n            isLoading: true\r\n        })\r\n\r\n        let newTest = this.state;\r\n        \r\n        console.log(this.state);\r\n        \r\n        let errors = [];\r\n\r\n        if (!newTest.title) \r\n            errors['title'] = 'The test must have a title'\r\n        if (!newTest.subject) \r\n            errors['subject'] = 'The test must have a subject'\r\n        newTest.questions.map(ques => {\r\n            if (!ques.title) \r\n                errors['questions'] = 'Questions must not be empty';\r\n            ques.answers.map(ans => {\r\n                if (!ans.text) \r\n                    errors['answers'] = 'Answers must not be empty';\r\n                return true;\r\n            })\r\n            return true;\r\n        })\r\n\r\n        if (errors['title'] || errors['subject'] || errors['questions'] || errors['answers']) {\r\n            this.setState({\r\n                ...this.state,\r\n                errors\r\n            });\r\n            return;\r\n        }\r\n\r\n        if (!this.context.userId) \r\n            window.location.href = '/app/login'\r\n        \r\n        fetch(`${ this.context.proxy }/api/tests/createTest`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'x-auth-token': this.context.token\r\n            },\r\n            body: JSON.stringify(this.state)\r\n        })\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                \r\n                if (!res.success) {\r\n                    if (res.isTimeErr) {\r\n                        this.setState({\r\n                            ...this.state,\r\n                            timeErrorMsg: 'You cannot create more than 1 test in 5 minutes!',\r\n                            isLoading: false\r\n                        })\r\n                    }\r\n                } else {\r\n                    window.location.href = '/app/allTests'\r\n                }\r\n            })\r\n    }\r\n\r\n    deleteAnswer(quesId, ansId) {\r\n        let { questions } = this.state;\r\n        if (questions[quesId].answers.length <= 2) return;\r\n\r\n        let inx = parseInt(ansId);\r\n        let corrAnswer = questions[quesId].correctAnswerId;\r\n        if (corrAnswer.toString() === (ansId + 1).toString()) {\r\n            if (ansId === 0) {\r\n                questions[quesId].correctAnswerId = '1';\r\n            } else {\r\n                console.log('fff');\r\n                \r\n                questions[quesId].correctAnswerId = (ansId).toString();\r\n            }\r\n        } \r\n        for (let i = inx; i < questions[quesId].answers.length; i++) {\r\n            questions[quesId].answers[i].answerId = (parseInt(questions[quesId].answers[i].answerId) - 1).toString();\r\n            if (i !== inx)\r\n                document.getElementById(`_${ quesId }-${ i - 1 }`).innerText = questions[quesId].answers[i].text;\r\n        }  \r\n        console.log(ansId);\r\n        \r\n        questions[quesId].answers.splice(ansId, 1);\r\n\r\n        console.log(questions[quesId].answers);\r\n        \r\n\r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        })\r\n    }\r\n\r\n    deleteQuestion(quesId) {\r\n        let { questions } = this.state;\r\n        if (questions.length === 1) return;\r\n        \r\n        questions.splice(quesId, 1);\r\n        this.setState({\r\n            ...this.state,\r\n            questions\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { questions, isProtected, timeErrorMsg, isLoading, title, errors, isLimitedAttempts, isLimitedTime, maxAttempts } = this.state;\r\n\r\n        console.log(maxAttempts);\r\n        \r\n        const letters = ['A', 'B', 'C', 'D', 'E', 'F'];\r\n\r\n        return (\r\n            <div>\r\n                <h1 className=\"heading\">\r\n                    Create test \r\n                </h1>\r\n                <div className=\"test-basic-info\">\r\n                    <div className=\"info-group\">\r\n                        <label htmlFor=\"title\">Test name: </label>\r\n                        <span value={ title } className=\"field\" contenteditable=\"true\" onInput={ (e) => this.setTestTitle(e) } type=\"text\" name=\"title\"></span>\r\n                        <span className=\"error-input\">{ errors['title'] }</span>\r\n                    </div>\r\n                    <div className=\"info-group\">\r\n                        <label htmlFor=\"subject\">Subject: </label>\r\n                        <span className=\"field\" contenteditable=\"true\" onInput={ (e) => this.setTestSubject(e) } type=\"text\" name=\"subject\"> </span>\r\n                        <span className=\"error-input\">{ errors['subject'] }</span>\r\n                    </div>\r\n                    <div className=\"info-group\">\r\n                        <label htmlFor=\"description\">Description: </label>\r\n                        <textarea className=\"\" onChange={ (e) => this.setTestDescription(e) } name=\"description\" id=\"\" cols=\"30\" rows=\"10\"></textarea>\r\n                    </div>\r\n                    <div className=\"info-group-checkbox\">\r\n                        <input onChange={ this.setProtectedState.bind(this) } type=\"checkbox\" name=\"isProtected\" />\r\n                        <label htmlFor=\"isProtected\" name=\"isProtected\">Protected</label>\r\n                    </div>\r\n                    { isProtected && (\r\n                        <div className=\"info-group\">\r\n                            <label htmlFor=\"key\">Secret key: </label>\r\n                            <span class=\"field\" contenteditable=\"true\" onInput={ (e) => this.setAccessKey(e) } name=\"key\" > </span>\r\n                        </div>\r\n                    ) }\r\n                    <div className=\"info-group-checkbox\">\r\n                        <input onChange={ this.setAttemptsState.bind(this) } type=\"checkbox\" name=\"isLimitedAttempts\" />\r\n                        <label htmlFor=\"isLimitedAttempts\" name=\"isLimitedAttempts\">Limited attempts</label>\r\n                    </div>\r\n                    { isLimitedAttempts && (\r\n                        <div className=\"info-group\">\r\n                            <label htmlFor=\"key\">Maximum attempts: </label>\r\n                            <div className=\"btn-group\">\r\n                                <button className=\"increment-btn\" onClick={ () => this.changeAttemptsNumber(-1) }> <span>-</span> </button>\r\n                                <span className=\"attempts-num\">{ maxAttempts }</span>\r\n                                <button className=\"increment-btn\" onClick={ () => this.changeAttemptsNumber(1) }> <span>+</span> </button>\r\n                            </div>\r\n                            \r\n                        </div>\r\n                    ) }\r\n                    <div className=\"info-group-checkbox\">\r\n                        <input onChange={ this.setTimeLimitState.bind(this) } type=\"checkbox\" name=\"isLimitedTime\" />\r\n                        <label htmlFor=\"isLimitedTime\" name=\"isLimitedTime\">Limited time</label>\r\n                    </div>\r\n                    { isLimitedTime ? (\r\n                        <div className=\"custom-select\" style={{ width: 300 + 'px' }}>\r\n                            <select>\r\n                                <option value=\"0\">Select time limit:</option>\r\n                                <option value=\"1\">5 minutes</option>\r\n                                <option value=\"2\">10 minutes</option>\r\n                                <option value=\"3\">20 minuted</option>\r\n                                <option value=\"4\">30 minutes</option>\r\n                                <option value=\"5\">1 hour</option>\r\n                                <option value=\"6\">1.5 hours</option>\r\n                            </select>\r\n                        </div>\r\n                    ) : (\r\n                        <div className=\"custom-select\" style={{ width: 300 + 'px', visibility: 'hidden' }}>\r\n                            <select>\r\n                                <option value=\"0\">Select time limit:</option>\r\n                                <option value=\"1\">5 minutes</option>\r\n                                <option value=\"2\">10 minutes</option>\r\n                                <option value=\"3\">20 minuted</option>\r\n                                <option value=\"4\">30 minutes</option>\r\n                                <option value=\"5\">1 hour</option>\r\n                                <option value=\"6\">1.5 hours</option>\r\n                            </select>\r\n                        </div>\r\n                    ) }\r\n                    \r\n                </div>\r\n                <div className=\"questions\">\r\n                    { questions.map((ques, index) => {\r\n                        return (\r\n                            <div className=\"question-card\">\r\n                                <button onClick={ () => this.deleteQuestion(index) } className=\"btn-delete\"><span>&times;</span></button>\r\n                                <label className=\"title\"><span>{ index + 1 }.</span> </label>\r\n                                <span className=\"input\" contenteditable=\"true\" type=\"text\" onInput={ (e) => this.setQuestionTitle(e, index) } ></span>\r\n                                <div className=\"answers\">\r\n                                    { ques.answers.map((ans, inx) => {\r\n                                        return (\r\n                                            <div className=\"ans-card\">\r\n                                                <button onClick={ () => this.deleteAnswer(index, inx) } className=\"btn-delete\"><span>&times;</span></button>\r\n                                                <input type=\"radio\" id={ `${index}-${inx}` } name={ index } title=\"Mark as correct\" onChange={ () => this.setCorrectAnswerId(index, ans.answerId) } checked={ ques.correctAnswerId === ans.answerId } />\r\n                                                <label htmlFor={ `${index}-${inx}` }></label>\r\n                                                <span className=\"ans-letter\">{ letters[inx] }) </span>\r\n                                                <span id={ `_${ index }-${ inx }` } className=\"input\" contenteditable=\"true\" onInput={ (e) => this.setAnswerText(e, index, inx) } type=\"text\"></span>\r\n                                                \r\n                                                \r\n                                            </div>\r\n                                        )\r\n                                    }) }\r\n                                    <button onClick={ this.handleAddAnswer.bind(this, index) } className=\"add-question\"><span>+</span></button>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    }) }\r\n                    <button onClick={ this.handleAddQuestion.bind(this) } className=\"new-question btn-secondary\">\r\n                        New question\r\n                    </button>\r\n                </div>\r\n                { timeErrorMsg && (\r\n                    <span className=\"error-msg\">\r\n                        { timeErrorMsg }\r\n                    </span>\r\n                ) }\r\n\r\n                { errors['questions'] && (\r\n                    <span className=\"error-msg\">\r\n                        { errors['questions'] }\r\n                    </span>\r\n                ) }\r\n                { errors['answers'] && (\r\n                    <span className=\"error-msg\">\r\n                        { errors['answers'] }\r\n                    </span>\r\n                ) }\r\n\r\n                <button onClick={ this.handleAddTest.bind(this) } className=\"btn btn-cta\">Create test!</button>\r\n                \r\n                { isLoading && <Spinner size=\"sm\" /> }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport TestsContext from '../../context/TestsContext'\r\n\r\nimport Spinner from '../Spinner/Spinner'\r\n\r\nimport './css/style.css'\r\nimport { convertTimeShort } from '../../middleware/convertTime'\r\n\r\nexport default class PassTest extends Component {\r\n    state = {\r\n        isLoading: true,\r\n        test: [],\r\n        answers: [],\r\n        answeredQuestions: 0,\r\n        isSubmitted: false,\r\n        isTimeUp: false,\r\n        time: null\r\n    }\r\n\r\n    static contextType = TestsContext;\r\n\r\n    componentDidMount() {\r\n        const testId = this.props.match.params.testId;\r\n        fetch(`${ this.context.proxy }/api/tests/testInfo/${ testId }`)\r\n            .then(res => res.json())\r\n            .then(res => {\r\n                console.log(res);\r\n                let answers = [];\r\n                for (let i = 0; i < res.questions.length; i++) \r\n                    answers[i] = 0;\r\n                this.setState({\r\n                    isLoading: false,\r\n                    answers,\r\n                    test: res\r\n                })\r\n\r\n                if (res.timeLimit) {\r\n                    const { timeLimit } = res;\r\n                    let time = timeLimit;\r\n                    setInterval(() => {\r\n                        time = Math.max(time - 1, 0);\r\n                        let { isTimeUp } = this.state;\r\n                        if (!isTimeUp && time <= 0) {\r\n                            isTimeUp = true;\r\n                            let els = document.querySelectorAll(\"input[type='radio']\");\r\n                            els.forEach(el => {\r\n                                el.setAttribute('onChange', 'return false');\r\n                                el.setAttribute('onClick', 'return false');\r\n                            })\r\n                        }\r\n                        this.setState({\r\n                            ...this.state,\r\n                            isTimeUp,\r\n                            time\r\n                        });\r\n                        \r\n                    }, 1000)\r\n                }\r\n\r\n                \r\n            })\r\n    }\r\n\r\n    handleSelect(index, answerId) {\r\n        let { answers, answeredQuestions, isTimeUp } = this.state;\r\n        \r\n        if (isTimeUp) \r\n            return;\r\n        else {\r\n            if (!answers[index]) {\r\n                answeredQuestions++;\r\n            }\r\n            answers[index] = answerId;\r\n            this.setState({\r\n                ...this.state,\r\n                answers,\r\n                answeredQuestions\r\n            }, () => console.log(this.state) )\r\n        }\r\n        \r\n    }\r\n\r\n    finishTest(e) {\r\n        e.preventDefault();\r\n        let points = 0;\r\n        let results = [];\r\n        const { answers, test, isSubmitted } = this.state;\r\n\r\n        if (isSubmitted) \r\n            return;\r\n        \r\n        this.setState({\r\n            ...this.state,\r\n            isSubmitted: true\r\n        })\r\n\r\n        console.log('finish!');\r\n        \r\n\r\n        test.questions.map((ques, index) => {\r\n            if (ques.correctAnswerId === answers[index]) {\r\n                points++;\r\n                results.push(true);\r\n            } else {\r\n                results.push(false);\r\n            }\r\n            return ques;\r\n        })\r\n        const query = {\r\n            \"userId\": this.context.userId,\r\n            \"points\": points,\r\n            \"answers\": results,\r\n            \"title\": test.title,\r\n            \"maxPoints\": test.questions.length,\r\n            \"date\": Date.now(),\r\n            \"answersLetters\": answers\r\n        }\r\n        fetch(`${ this.context.proxy }/api/tests/saveResult/${ test._id }`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(query)\r\n        })\r\n            .then(() => {\r\n                console.log('result saved!');\r\n                window.location.href = `/app/testInfo/${ test._id }`\r\n            })\r\n    }\r\n\r\n    render() {\r\n        const { isLoading, test, answeredQuestions, time, answers } = this.state;\r\n        const { questions } = test;\r\n\r\n        const letters = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\r\n\r\n        if (isLoading) return (\r\n            <Spinner />\r\n        )\r\n\r\n        return (\r\n            <>\r\n                <div className=\"info-block\">\r\n                    <div>\r\n                        { test.timeLimit && (\r\n                            <span>Time left: { convertTimeShort(time) }</span>\r\n                        ) } \r\n                    </div>\r\n                    <div>\r\n                        Answered questions: { answeredQuestions } / { questions.length }\r\n                    </div>\r\n                </div>\r\n                <form className=\"test-form\" onSubmit={ e => this.finishTest(e) }>\r\n                    <h1 className=\"heading\">\r\n                        Pass test '{ test.title }'\r\n                    </h1>\r\n                    <div className=\"test-questions\">\r\n                        { questions.map((ques, index) => {\r\n                            return (\r\n                                <div className=\"question-container\">\r\n                                    <h3 class=\"question-container__title\">\r\n                                        { index + 1 }.  { ques.title }\r\n                                    </h3>\r\n                                    <div className=\"question-container__answers\">\r\n                                        { ques.answers.map((ans, inx) => {\r\n                                            const uid = `${ ques }-${ inx }`;\r\n                                            let extraClassName = '';\r\n                                            console.log(answers);\r\n                                            console.log(answers[index].toString() === (inx + 1).toString());\r\n                                            \r\n                                            if (answers[index].toString() === (inx + 1).toString()) \r\n                                                extraClassName = 'selected';\r\n\r\n                                            return (\r\n                                                <div className={ \"answer-block \" + extraClassName } onClick={ this.handleSelect.bind(this, index, ans.answerId) }>\r\n                                                    <div className=\"answer-block__letter\"><span>{ letters[inx] }</span></div>\r\n                                                    <div className=\"answer-block__text\">\r\n                                                        <span>{ ans.text }</span>\r\n                                                    </div>\r\n                                                </div>\r\n                                            )\r\n                                        }) }\r\n                                        \r\n                                    </div>\r\n                                </div>\r\n                            )\r\n\r\n                                {/* <div className=\"question-card\">\r\n                                    <h3 className=\"question-title\">\r\n                                        { index + 1 }.  { ques.title }\r\n                                    </h3>\r\n                                    <div className=\"answers\">\r\n                                        { ques.answers.map(ans => {\r\n                                            return (\r\n                                                <div className=\"answer\">\r\n                                                    <input onChange={ this.handleSelect.bind(this, index, ans.answerId) } id={ ans._id } type=\"radio\" name={ index } />\r\n                                                    <label htmlFor={ ans._id }>{ ans.text }</label>\r\n                                                </div>\r\n                                            )\r\n                                        }) }\r\n                                    </div>\r\n                                </div> */}\r\n                            \r\n                        }) }\r\n                    </div>\r\n                    <input type=\"submit\" className=\"btn btn-cta\" value=\"Finish\" />\r\n                </form>\r\n            </>\r\n        )\r\n    }\r\n}\r\n","const validate = (data) => {\r\n    let errors = [];\r\n    data.forEach(field => {\r\n        if (field.name === 'email') {\r\n            if (!(/^\\w+([-]?\\w+)*@\\w+([-]?\\w+)*(\\.\\w{2,3})+$/.test(field.value)) ) {\r\n                errors['email'] = 'Invalid email'\r\n            } \r\n        } \r\n        if (field.name === 'password') {\r\n            if (field.value.length < 6) {\r\n                errors['password'] = 'Password must be at least 6 characters'\r\n            }\r\n        }\r\n        if (field.name === 'fullName') {\r\n            if (field.value.trim().length <= 5) {\r\n                errors['fullName'] = 'Please enter a real full name'\r\n            }\r\n        }\r\n    })\r\n\r\n    return errors;\r\n}\r\n\r\nexport {\r\n    validate\r\n}","import React, { Component } from 'react'\r\n\r\nimport './css/style.css'\r\n\r\nimport Spinner from '../Spinner/Spinner'\r\n\r\nimport { validate } from '../../middleware/validator'\r\nimport AuthContext from '../../context/TestsContext'\r\n\r\nexport default class Login extends Component {\r\n    state = {\r\n        email: '',\r\n        password: '',\r\n        errors: [],\r\n        isLoading: false\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.formEl = React.createRef();        \r\n    }\r\n\r\n    static contextType = AuthContext;\r\n\r\n    componentDidMount() {\r\n        const psw = document.querySelector('#psw');\r\n        const email = document.querySelector('#email');\r\n        psw.addEventListener('focus',function(e){ /*yourcode*/ },false);\r\n        psw.addEventListener('keyup',function(e){ console.log(e.keyCode) },false);\r\n        email.addEventListener('keypress',function(e){ \r\n            if (e.which === 13) {\r\n                e.preventDefault();\r\n                // let form = document.querySelector('form#login-form');\r\n                // form.submit()\r\n            }\r\n         },false);\r\n        psw.addEventListener('keypress',function(e){ \r\n            if (e.which === 13) {\r\n                e.preventDefault();\r\n                // let form = document.querySelector('form#login-form');\r\n                // form.submit()\r\n            }\r\n         },false);\r\n    }\r\n\r\n    setCredential(e) {\r\n        console.log(e.target);\r\n        \r\n        this.setState({\r\n            ...this.state,\r\n            [e.target.getAttribute('data-name')]: e.target.innerHTML\r\n        }, () => console.log(this.state)\r\n        )\r\n    }\r\n\r\n    setLoading(state) {\r\n        this.setState({\r\n            isLoading: state\r\n        }, () => console.log(this.state))\r\n    }\r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        let data = [\r\n            { name: 'email', value: this.state.email },\r\n            { name: 'password', value: this.state.password }\r\n        ];\r\n        let errors = validate(data);\r\n        console.log(errors['email']);\r\n        \r\n        if (errors['email'] || errors['password']) {\r\n            this.setState({\r\n                ...this.state,\r\n                errors: errors,\r\n                isLoading: false\r\n            })\r\n        } else {\r\n            errors = [];\r\n            const query = {\r\n                email: this.state.email,\r\n                password: this.state.password\r\n            }\r\n            fetch(`${ this.context.proxy }/api/users/login`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(query)\r\n            })\r\n                .then(res => res.json())\r\n                .then(res => {\r\n                    if (res.success) {\r\n                        this.context.setToken(res.token, res.user._id);\r\n                        window.location.href = '/app/'\r\n                    } else {\r\n                        if (res.doesUserExist) \r\n                            errors['password'] = 'Incorrect password';\r\n                        else \r\n                            errors['email'] = 'User does not exist!'\r\n                        this.setState({\r\n                            ...this.state,\r\n                            errors: errors,\r\n                            isLoading: false\r\n                        })\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { errors, isLoading } = this.state;\r\n        console.log(isLoading);\r\n        \r\n\r\n        return (\r\n            <div>\r\n                <h1 className=\"heading\">Log in</h1>\r\n                <form id=\"login-form\" onSubmit={ (e) => this.handleSubmit(e) }>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">E-mail: </label>\r\n                        <span data-name=\"email\" onInput={ (e) => this.setCredential(e) } className=\"field\" contentEditable=\"true\" id=\"email\"></span>\r\n                        <span className=\"error-input\">{ errors['email'] }</span>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Password: </label>\r\n                        <span data-name=\"password\" onInput={ (e) => this.setCredential(e) } id=\"psw\" className=\"field with-input\" contentEditable=\"true\">\r\n                        </span>\r\n                        <span className=\"error-input\">{ errors['password'] }</span>\r\n                    </div>\r\n                    <input onClick={ () => this.setLoading(true) } type=\"submit\" className=\"btn btn-cta\" value=\"Log in\" />\r\n                    { isLoading && <Spinner size=\"sm\" /> }\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nimport './css/style.css'\r\n\r\nimport Spinner from '../Spinner/Spinner'\r\n\r\nimport { validate } from '../../middleware/validator'\r\nimport TestsContext from '../../context/TestsContext'\r\n\r\nexport default class Register extends Component {\r\n    state = {\r\n        email: '',\r\n        password: '',\r\n        confirmPassword: '',\r\n        name: '',\r\n        errors: [],\r\n        isLoading: false\r\n    }\r\n\r\n    static contextType = TestsContext;\r\n\r\n    componentDidMount() {\r\n        const psw = document.querySelector('#password');\r\n        const psw1 = document.querySelector('#confirmPassword');\r\n        const email = document.querySelector('#email');\r\n        psw.addEventListener('focus',function(e){ /*yourcode*/ },false);\r\n        psw.addEventListener('keyup',function(e){ console.log(e.keyCode) },false);\r\n        psw1.addEventListener('focus',function(e){ /*yourcode*/ },false);\r\n        psw1.addEventListener('keyup',function(e){ console.log(e.keyCode) },false);\r\n        email.addEventListener('keypress',function(e){ \r\n            if (e.which === 13) {\r\n                e.preventDefault();\r\n                // let form = document.querySelector('form#login-form');\r\n                // form.submit()\r\n            }\r\n         },false);\r\n        let fields = document.querySelectorAll('.field');\r\n        fields.forEach(field => {\r\n            field.addEventListener('keypress',function(e){ \r\n                if (e.which === 13) {\r\n                    e.preventDefault();\r\n                }\r\n            });\r\n        }) \r\n        psw.addEventListener('keypress',function(e){ \r\n            if (e.which === 13) {\r\n                e.preventDefault();\r\n            }\r\n         },false);\r\n        psw1.addEventListener('keypress',function(e){ \r\n            if (e.which === 13) {\r\n                e.preventDefault();\r\n            }\r\n         },false);\r\n    }\r\n    \r\n\r\n    setCredential(e) {\r\n        this.setState({\r\n            [e.target.id]: e.target.innerHTML\r\n        });\r\n    }\r\n\r\n    setLoading(state) {\r\n        this.setState({\r\n            isLoading: state\r\n        }, () => console.log(this.state))\r\n    }\r\n\r\n    registerUser(e) {\r\n        e.preventDefault();\r\n\r\n        let data = [\r\n            { name: 'email', value: this.state.email },\r\n            { name: 'password', value: this.state.password },\r\n            { name: 'fullName', value: this.state.name }\r\n        ];\r\n        let errors = validate(data);\r\n        if (this.state.password !== this.state.confirmPassword) {\r\n            errors['confirmPassword'] = 'Passwords do not match'\r\n        }\r\n        \r\n        if (errors['email'] || errors['password'] || errors['fullName'] || errors['confirmPassword']) {\r\n            this.setState({\r\n                ...this.state,\r\n                errors: errors,\r\n                isLoading: false\r\n            })\r\n        } else {\r\n            const newUser = {\r\n                email: this.state.email,\r\n                password: this.state.password,\r\n                name: this.state.name\r\n            };\r\n            if (this.state.confirmPassword !== newUser.password) {\r\n                return;\r\n            };\r\n            fetch(`${ this.context.proxy }/api/users/addUser`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(newUser)\r\n            })\r\n                .then(res => res.json())\r\n                .then(res => {\r\n                    console.log(res);\r\n                    \r\n                    if (res.notSuccess) {\r\n                        errors = [];\r\n                        errors['email'] = 'User with such email already exists';\r\n                        this.setState({\r\n                            ...this.state,\r\n                            errors,\r\n                            isLoading: false\r\n                        })\r\n                    } else {\r\n                        this.context.setToken(res.token, res.user._id);\r\n                        window.location.href = '/app/'\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { errors, isLoading } = this.state;\r\n\r\n        return (\r\n            <>\r\n                <h1 className=\"heading\">Register</h1>\r\n                <form onSubmit={ (e) => this.registerUser(e) }>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">E-mail: </label>\r\n                        <span onInput={ (e) => this.setCredential(e) }  contenteditable=\"true\" className=\"field\" type=\"text\" name=\"\" id=\"email\"></span>\r\n                        <span className=\"error-input\">{ errors['email'] }</span>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Full name: </label>\r\n                        <span onInput={ (e) => this.setCredential(e) }  contenteditable=\"true\" className=\"field\" type=\"text\" name=\"\" id=\"name\"></span>\r\n                        <span className=\"error-input\">{ errors['fullName'] }</span>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Password: </label>\r\n                        <span onInput={ (e) => this.setCredential(e) }  contenteditable=\"true\" className=\"field\" type=\"text\" name=\"\" id=\"password\"></span>\r\n                        <span className=\"error-input\">{ errors['password'] }</span>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"\">Confirm password: </label>\r\n                        <span onInput={ (e) => this.setCredential(e) }  contenteditable=\"true\" className=\"field\" type=\"text\" name=\"\" id=\"confirmPassword\"></span>\r\n                        <span className=\"error-input\">{ errors['confirmPassword'] }</span>\r\n                    </div>\r\n                    <input onClick={ () => this.setLoading(true) } type=\"submit\" className=\"btn btn-cta\" value=\"Create account\" />\r\n                    { isLoading && <Spinner size=\"sm\" /> }\r\n                </form>\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Switch, Route, BrowserRouter } from 'react-router-dom'\r\n\r\nimport Navbar from './Navbar/Navbar'\r\n\r\nimport Profile from './Profile/Profile'\r\nimport Tests from './Tests/Tests'\r\nimport TestInfo from './Tests/TestInfo'\r\nimport CreateTest from './CreateTest/CreateTest'\r\nimport TestResult from './TestResult/TestResult'\r\nimport CreateTestForm from './CreateTest/CreateTestForm'\r\nimport PassTest from './PassTest/PassTest'\r\nimport Login from './Auth/Login'\r\nimport Register from './Auth/Register'\r\n\r\nimport './css/MainPage.css'\r\nimport './css/GlobalStyles/style.css'\r\n\r\nexport default class MainPage extends Component {    \r\n\r\n    componentDidMount() {\r\n        let mainEl = document.querySelector('main')\r\n        console.log(\"Hello\");\r\n\r\n\r\n        setInterval(() => {\r\n            if (is_scrolling()) {\r\n                if (!mainEl.classList.contains(\"on-scroll-bar\")) {\r\n                    mainEl.classList.add(\"on-scroll-bar\");\r\n                }\r\n                \r\n            } else {\r\n                if (mainEl.classList.contains(\"on-scroll-bar\")) {\r\n                    mainEl.classList.remove(\"on-scroll-bar\");\r\n                }\r\n            }\r\n            \r\n        }, 10)\r\n\r\n        mainEl.addEventListener('scroll', (e) => {\r\n            window.lastScrollTime = new Date().getTime()\r\n        }, false)\r\n\r\n        function is_scrolling() {\r\n            return window.lastScrollTime && new Date().getTime() < window.lastScrollTime + 500\r\n        }\r\n    }\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <BrowserRouter>\r\n\r\n                <div className=\"app-container\">\r\n                    <Navbar />\r\n                    <main>\r\n                        <Switch>\r\n                            <Route exact path='/app/' component={ Profile } /> \r\n                            <Route path='/app/allTests' component={ Tests } /> \r\n                            <Route path='/app/testInfo/:testId' component={ TestInfo } /> \r\n                            <Route path='/app/testResult/:userId/:resultId' component={ TestResult } /> \r\n                            <Route path='/app/createTest' component={ CreateTest } /> \r\n                            <Route path='/app/createTestForm' component={ CreateTestForm } /> \r\n                            <Route path='/app/passTest/:testId' component={ PassTest } /> \r\n                            <Route path='/app/login' component={ Login } /> \r\n                            <Route path='/app/register' component={ Register } /> \r\n                        </Switch>\r\n                    </main>\r\n                </div>\r\n\r\n            </BrowserRouter>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport ls from 'local-storage'\r\n\r\nimport TestsContext from './context/TestsContext'\r\n\r\nimport LandingPage from './landingPage/LandingPage';\r\nimport MainPage from './components/MainPage';\r\n\r\nimport './App.css'\r\n\r\nclass App extends Component {\r\n    state = {\r\n        userId: ls.get('userId'),\r\n        token: ls.get('token'),\r\n        proxy: window.location.href.startsWith('http://') ? 'http://localhost:5000' : 'https://easytestapp.herokuapp.com'\r\n    }\r\n\r\n    setToken = (token, userId) => {\r\n        this.setState({\r\n            token: token,\r\n            userId: userId\r\n        })\r\n        ls.set('token', token);\r\n        ls.set('userId', userId);\r\n    }\r\n\r\n    logout = () => {\r\n        this.setState({\r\n            token: '',\r\n            userId: ''\r\n        });\r\n        ls.set('token', '');\r\n        ls.set('userId', '');\r\n    }\r\n\r\n    render() {\r\n        const { token, userId, proxy } = this.state;\r\n        console.log(process.env);\r\n        console.log(window.location.href);\r\n        \r\n        \r\n\r\n        return (\r\n            <BrowserRouter basename={ process.env.PUBLIC_URL }>\r\n                <React.Fragment>\r\n                    <TestsContext.Provider value={{ token, userId, setToken: this.setToken, logout: this.logout, proxy  }}>\r\n                        <Switch>\r\n                            <Route exact path=\"/\" component={ LandingPage } />\r\n                            <Route path=\"/app\" component={ MainPage } />\r\n                        </Switch>\r\n                    </TestsContext.Provider>\r\n                </React.Fragment>\r\n            </BrowserRouter>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}